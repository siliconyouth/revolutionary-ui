#!/usr/bin/env tsx

/**
 * Configure R2 Caching Rules
 * Sets up optimal caching headers for different content types
 */

import { config } from '@dotenvx/dotenvx';
import chalk from 'chalk';
import path from 'path';

config({ path: path.join(__dirname, '../.env.local') });

// Cache configurations by content type
const CACHE_CONFIGS = {
  // Immutable content (versioned files)
  immutable: {
    pattern: /\/versions\//,
    headers: {
      'Cache-Control': 'public, max-age=31536000, immutable', // 1 year
      'CDN-Cache-Control': 'max-age=31536000',
    },
  },
  
  // Source code
  code: {
    pattern: /\.(tsx?|jsx?|css|scss)$/,
    headers: {
      'Cache-Control': 'public, max-age=3600, stale-while-revalidate=86400', // 1 hour, stale 1 day
      'CDN-Cache-Control': 'max-age=86400', // 1 day at CDN
    },
  },
  
  // Documentation
  docs: {
    pattern: /\.(md|mdx|txt)$/,
    headers: {
      'Cache-Control': 'public, max-age=1800, stale-while-revalidate=3600', // 30 min, stale 1 hour
      'CDN-Cache-Control': 'max-age=3600', // 1 hour at CDN
    },
  },
  
  // Images and media
  media: {
    pattern: /\.(png|jpg|jpeg|gif|svg|webp|mp4|webm)$/,
    headers: {
      'Cache-Control': 'public, max-age=2592000', // 30 days
      'CDN-Cache-Control': 'max-age=2592000',
    },
  },
  
  // JSON data
  json: {
    pattern: /\.json$/,
    headers: {
      'Cache-Control': 'public, max-age=300, must-revalidate', // 5 minutes
      'CDN-Cache-Control': 'max-age=600', // 10 minutes at CDN
    },
  },
};

// Update R2StorageService to use these cache headers
const cacheConfigContent = `/**
 * R2 Cache Configuration
 * Auto-generated by configure-r2-caching.ts
 */

export const R2_CACHE_CONFIG = ${JSON.stringify(CACHE_CONFIGS, null, 2)};

export function getCacheHeaders(key: string, options?: { immutable?: boolean }): Record<string, string> {
  // Check if immutable
  if (options?.immutable || CACHE_CONFIGS.immutable.pattern.test(key)) {
    return CACHE_CONFIGS.immutable.headers;
  }
  
  // Check other patterns
  for (const [type, config] of Object.entries(CACHE_CONFIGS)) {
    if (type !== 'immutable' && config.pattern.test(key)) {
      return config.headers;
    }
  }
  
  // Default cache headers
  return {
    'Cache-Control': 'public, max-age=3600', // 1 hour default
    'CDN-Cache-Control': 'max-age=7200', // 2 hours at CDN
  };
}
`;

// Create cache configuration file
import fs from 'fs';

const configPath = path.join(__dirname, '../src/config/r2-cache-config.ts');
fs.mkdirSync(path.dirname(configPath), { recursive: true });
fs.writeFileSync(configPath, cacheConfigContent);

console.log(chalk.blue('\n🚀 R2 Cache Configuration\n'));
console.log(chalk.green('✅ Cache configuration created at:'), configPath);

// Update R2StorageService to use cache config
console.log(chalk.yellow('\n📝 Update R2StorageService to use cache configuration:\n'));

const serviceUpdate = `
// In R2StorageService.upload() method, add:
import { getCacheHeaders } from '../config/r2-cache-config';

// When uploading:
const cacheHeaders = getCacheHeaders(key, { immutable: options.immutable });
const params: PutObjectCommandInput = {
  // ... existing params
  CacheControl: cacheHeaders['Cache-Control'],
  Metadata: {
    ...options.metadata,
    'CDN-Cache-Control': cacheHeaders['CDN-Cache-Control'],
  },
};
`;

console.log(chalk.gray(serviceUpdate));

// Cloudflare Page Rules setup
console.log(chalk.yellow('\n🌐 Cloudflare Page Rules Configuration:\n'));

console.log('1. Go to Cloudflare Dashboard > Your Domain > Page Rules');
console.log('2. Create these rules:\n');

const pageRules = [
  {
    url: `${process.env.R2_PUBLIC_URL}/resources/*/versions/*`,
    settings: {
      'Browser Cache TTL': '1 year',
      'Edge Cache TTL': '1 month',
      'Cache Level': 'Cache Everything',
    },
  },
  {
    url: `${process.env.R2_PUBLIC_URL}/resources/*/code/*`,
    settings: {
      'Browser Cache TTL': '1 hour',
      'Edge Cache TTL': '1 day',
      'Cache Level': 'Cache Everything',
    },
  },
  {
    url: `${process.env.R2_PUBLIC_URL}/resources/*/preview/*`,
    settings: {
      'Browser Cache TTL': '30 days',
      'Edge Cache TTL': '30 days',
      'Cache Level': 'Cache Everything',
    },
  },
];

pageRules.forEach((rule, index) => {
  console.log(chalk.cyan(`Rule ${index + 1}:`));
  console.log(chalk.gray(`  URL: ${rule.url}`));
  console.log(chalk.gray('  Settings:'));
  Object.entries(rule.settings).forEach(([key, value]) => {
    console.log(chalk.gray(`    - ${key}: ${value}`));
  });
  console.log();
});

// Cache purge strategy
console.log(chalk.yellow('🔄 Cache Purge Strategy:\n'));

const purgeScript = `#!/usr/bin/env tsx
// scripts/purge-r2-cache.ts

import { config } from '@dotenvx/dotenvx';
import fetch from 'node-fetch';

async function purgeCache(patterns: string[]) {
  const zoneId = process.env.CLOUDFLARE_ZONE_ID;
  const apiToken = process.env.CLOUDFLARE_API_TOKEN;
  
  if (!zoneId || !apiToken) {
    throw new Error('Missing Cloudflare credentials');
  }
  
  const response = await fetch(\`https://api.cloudflare.com/client/v4/zones/\${zoneId}/purge_cache\`, {
    method: 'POST',
    headers: {
      'Authorization': \`Bearer \${apiToken}\`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      files: patterns.map(p => \`\${process.env.R2_PUBLIC_URL}/\${p}\`),
    }),
  });
  
  if (!response.ok) {
    throw new Error(\`Purge failed: \${response.statusText}\`);
  }
  
  console.log('✅ Cache purged successfully');
}

// Usage: npm run purge-cache -- "resources/*/code/*"
const patterns = process.argv.slice(2);
purgeCache(patterns).catch(console.error);
`;

const purgePath = path.join(__dirname, '../scripts/purge-r2-cache.ts');
fs.writeFileSync(purgePath, purgeScript);

console.log(chalk.green('✅ Cache purge script created at:'), purgePath);

// Performance tips
console.log(chalk.yellow('\n⚡ Performance Optimization Tips:\n'));

const tips = [
  'Use versioned URLs for immutable content',
  'Enable Cloudflare Argo for 30% faster performance',
  'Set up Cloudflare Workers for edge computing',
  'Use WebP format for images with fallback',
  'Enable Brotli compression in Cloudflare',
  'Monitor cache hit rates in Cloudflare Analytics',
];

tips.forEach((tip, index) => {
  console.log(chalk.gray(`${index + 1}. ${tip}`));
});

console.log(chalk.green('\n✅ R2 caching configuration complete!\n'));