#!/usr/bin/env node

/**
 * Revolutionary UI v3.3.0 - Main CLI Entry Point
 * Modern CLI implementation with best practices from v0, Shadcn, etc.
 */

const { existsSync } = require('fs');
const { join } = require('path');
const { spawn } = require('child_process');

// Determine which CLI implementation to use
async function main() {
  const args = process.argv.slice(2);
  
  // Check if we're in development or production
  const isDev = existsSync(join(__dirname, '../packages/cli/src'));
  
  // Use the new modular CLI implementation
  const cliPath = isDev
    ? join(__dirname, '../packages/cli/src/bin/rui.ts')
    : join(__dirname, '../packages/cli/dist/rui.js');
  
  // Check if CLI exists
  if (!existsSync(cliPath)) {
    console.error('Revolutionary UI CLI not found.');
    console.error('Please run "pnpm build" in the project root to build the CLI.');
    process.exit(1);
  }
  
  // Run the CLI
  if (isDev) {
    // Development mode - use npx tsx for TypeScript
    const tsx = spawn('npx', ['tsx', cliPath, ...args], {
      stdio: 'inherit',
      env: { ...process.env, NODE_ENV: 'development' }
    });
    
    tsx.on('close', (code) => {
      process.exit(code || 0);
    });
    
    tsx.on('error', (err) => {
      console.error('Failed to start CLI:', err.message);
      console.error('Make sure tsx is installed: pnpm add -D tsx');
      process.exit(1);
    });
  } else {
    // Production mode - use Node.js directly
    const node = spawn('node', [cliPath, ...args], {
      stdio: 'inherit',
      env: { ...process.env, NODE_ENV: 'production' }
    });
    
    node.on('close', (code) => {
      process.exit(code || 0);
    });
    
    node.on('error', (err) => {
      console.error('Failed to start CLI:', err.message);
      process.exit(1);
    });
  }
}

// Run the main function
main().catch(error => {
  console.error('Error:', error);
  process.exit(1);
});