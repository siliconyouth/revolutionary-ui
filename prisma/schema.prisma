generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_PRISMA")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                      @id @default(cuid())
  email               String                      @unique
  name                String?
  image               String?
  role                UserRole                    @default(USER)
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  featureUsages       FeatureUsage[]
  invoices            Invoice[]
  subscription        Subscription?
  usageRecords        UsageRecord[]
  accounts            Account[]
  activityLogs        ActivityLog[]
  aiUsage             AIUsage[]
  componentAnalytics  ComponentAnalytics[]
  reviewedSubmissions ComponentSubmission[]       @relation("ReviewerSubmissions")
  submissions         ComponentSubmission[]
  downloads           Download[]
  earnings            Earning[]
  favorites           Favorite[]
  featuredSubmissions FeaturedSubmission[]
  notifications       Notification[]
  packageTokens       PackageAccessToken[]
  packageVersions     PackageVersion[]
  payouts             Payout[]
  privatePackages     PrivatePackage[]
  projects            Project[]
  purchases           Purchase[]
  resources           Resource[]                  @relation("AuthorResources")
  publishedResources  Resource[]                  @relation("PublisherResources")
  reviews             Review[]
  sessions            Session[]
  submissionComments  SubmissionComment[]
  reviewChecklists    SubmissionReviewChecklist[]
  submissionVersions  SubmissionVersion[]
  teamInvitations     TeamInvitation[]
  teamMemberships     TeamMember[]
  teamResourcesAdded  TeamResource[]
  aiConfigs           UserAIConfig?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Category {
  id            String                @id @default(cuid())
  name          String                @unique
  slug          String                @unique
  description   String?
  icon          String?
  parentId      String?
  sortOrder     Int                   @default(0)
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  parent        Category?             @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[]            @relation("SubCategories")
  submissions   ComponentSubmission[]
  resources     Resource[]

  @@index([slug])
  @@map("categories")
}

model ResourceType {
  id          String                @id @default(cuid())
  name        String                @unique
  slug        String                @unique
  description String?
  createdAt   DateTime              @default(now())
  submissions ComponentSubmission[]
  resources   Resource[]

  @@map("resource_types")
}

model Resource {
  id                  String               @id @default(cuid())
  name                String
  slug                String               @unique
  description         String
  longDescription     String?
  categoryId          String
  resourceTypeId      String
  authorId            String
  publisherId         String?
  githubUrl           String?
  npmPackage          String?
  demoUrl             String?
  documentationUrl    String?
  license             String               @default("MIT")
  frameworks          String[]
  dependencies        Json?
  peerDependencies    Json?
  devDependencies     Json?
  sourceCode          String?
  documentation       String?
  hasTypescript       Boolean              @default(false)
  hasTests            Boolean              @default(false)
  isResponsive        Boolean              @default(true)
  isAccessible        Boolean              @default(false)
  supportsDarkMode    Boolean              @default(false)
  supportsRtl         Boolean              @default(false)
  bundleSizeKb        Int?
  weeklyDownloads     Int                  @default(0)
  githubStars         Int                  @default(0)
  codeQualityScore    Int?
  // R2 Storage fields
  storageObjects      StorageObject[]
  codeStorageId       String?              @unique
  codeStorage         StorageObject?       @relation("ResourceCode", fields: [codeStorageId], references: [id])
  docsStorageId       String?              @unique
  docsStorage         StorageObject?       @relation("ResourceDocs", fields: [docsStorageId], references: [id])
  documentationScore  Int?
  designScore         Int?
  price               Float                @default(0)
  currency            String               @default("USD")
  isFree              Boolean              @default(true)
  isPremium           Boolean              @default(false)
  isPublished         Boolean              @default(false)
  isFeatured          Boolean              @default(false)
  publishedAt         DateTime?
  views               Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  analytics           ComponentAnalytics[]
  fromSubmission      ComponentSubmission?
  downloads           Download[]
  favorites           Favorite[]
  featuredSubmissions FeaturedSubmission[]
  previews            Preview[]
  purchases           Purchase[]
  author              User                 @relation("AuthorResources", fields: [authorId], references: [id])
  category            Category             @relation(fields: [categoryId], references: [id])
  publisher           User?                @relation("PublisherResources", fields: [publisherId], references: [id])
  resourceType        ResourceType         @relation(fields: [resourceTypeId], references: [id])
  reviews             Review[]
  teamResources       TeamResource[]
  tags                Tag[]                @relation("ResourceTags")

  @@index([slug])
  @@index([categoryId])
  @@index([authorId])
  @@index([isPublished, isFeatured])
  @@map("resources")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  resources Resource[] @relation("ResourceTags")

  @@map("tags")
}

model Preview {
  id                  String      @id @default(cuid())
  resourceId          String
  previewType         PreviewType
  previewUrl          String?
  sandboxUrl          String?
  exampleCode         String
  exampleFramework    String
  exampleDependencies Json?
  previewHeight       Int         @default(400)
  previewWidth        String      @default("100%")
  isInteractive       Boolean     @default(true)
  isResponsive        Boolean     @default(true)
  supportsThemes      Boolean     @default(false)
  supportsRtl         Boolean     @default(false)
  views               Int         @default(0)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  resource            Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId])
  @@map("previews")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  resourceId String
  createdAt  DateTime @default(now())
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
  @@map("favorites")
}

model Download {
  id         String   @id @default(cuid())
  userId     String?
  resourceId String
  version    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([resourceId])
  @@index([createdAt])
  @@map("downloads")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  resourceId String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  isHelpful  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@index([resourceId])
  @@map("reviews")
}

model Purchase {
  id              String         @id @default(cuid())
  userId          String
  resourceId      String
  amount          Float
  currency        String         @default("USD")
  stripePaymentId String?        @unique
  status          PurchaseStatus @default(PENDING)
  licenseKey      String?        @unique
  expiresAt       DateTime?
  createdAt       DateTime       @default(now())
  resource        Resource       @relation(fields: [resourceId], references: [id])
  user            User           @relation(fields: [userId], references: [id])

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
  @@map("purchases")
}

model Earning {
  id          String        @id @default(cuid())
  userId      String
  purchaseId  String        @unique
  amount      Float
  currency    String        @default("USD")
  platformFee Float
  status      EarningStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("earnings")
}

model Payout {
  id             String       @id @default(cuid())
  userId         String
  amount         Float
  currency       String       @default("USD")
  method         PayoutMethod
  destination    String
  status         PayoutStatus @default(PENDING)
  processedAt    DateTime?
  stripePayoutId String?      @unique
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("payouts")
}

model ComponentSubmission {
  id                  String                     @id @default(cuid())
  userId              String
  submitterName       String                     @db.VarChar(100)
  submitterEmail      String                     @db.VarChar(255)
  submitterGithub     String?                    @db.VarChar(100)
  name                String                     @db.VarChar(200)
  slug                String?                    @unique @db.VarChar(200)
  description         String
  longDescription     String?
  categoryId          String
  resourceTypeId      String
  frameworks          String[]
  sourceCode          String
  documentation       String?
  demoUrl             String?                    @db.VarChar(500)
  githubUrl           String?                    @db.VarChar(500)
  npmPackage          String?                    @db.VarChar(200)
  dependencies        Json?
  peerDependencies    Json?
  devDependencies     Json?
  bundleSizeKb        Int?
  minReactVersion     String?                    @db.VarChar(20)
  minVueVersion       String?                    @db.VarChar(20)
  minAngularVersion   String?                    @db.VarChar(20)
  hasTypescript       Boolean                    @default(false)
  hasTests            Boolean                    @default(false)
  hasDocumentation    Boolean                    @default(true)
  hasPreview          Boolean                    @default(false)
  isResponsive        Boolean                    @default(true)
  isAccessible        Boolean                    @default(false)
  supportsDarkMode    Boolean                    @default(false)
  supportsRtl         Boolean                    @default(false)
  license             String                     @default("MIT") @db.VarChar(50)
  acceptsTerms        Boolean                    @default(false)
  copyrightOwner      String?                    @db.VarChar(200)
  status              SubmissionStatus           @default(DRAFT)
  submissionDate      DateTime?
  reviewStartedAt     DateTime?
  reviewCompletedAt   DateTime?
  publishedAt         DateTime?
  reviewerId          String?
  reviewNotes         String?
  rejectionReason     String?
  requiredChanges     String[]
  codeQualityScore    Int?
  documentationScore  Int?
  designScore         Int?
  publishedResourceId String?                    @unique
  version             String                     @default("1.0.0") @db.VarChar(20)
  // R2 Storage fields
  storageObjects      StorageObject[]
  codeStorageId       String?                    @unique
  codeStorage         StorageObject?             @relation("SubmissionCode", fields: [codeStorageId], references: [id])
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  category            Category                   @relation(fields: [categoryId], references: [id])
  publishedResource   Resource?                  @relation(fields: [publishedResourceId], references: [id])
  resourceType        ResourceType               @relation(fields: [resourceTypeId], references: [id])
  reviewer            User?                      @relation("ReviewerSubmissions", fields: [reviewerId], references: [id])
  user                User                       @relation(fields: [userId], references: [id])
  attachments         SubmissionAttachment[]
  comments            SubmissionComment[]
  previews            SubmissionPreview[]
  checklist           SubmissionReviewChecklist?
  versions            SubmissionVersion[]

  @@index([userId])
  @@index([status])
  @@index([categoryId])
  @@index([submissionDate])
  @@index([reviewerId])
  @@map("component_submissions")
}

model SubmissionPreview {
  id                  String              @id @default(cuid())
  submissionId        String
  previewType         String              @db.VarChar(50)
  previewCode         String
  previewDependencies Json?
  sandboxUrl          String?             @db.VarChar(500)
  screenshotUrl       String?             @db.VarChar(500)
  framework           String              @db.VarChar(50)
  exampleCode         String
  exampleProps        Json?
  createdAt           DateTime            @default(now())
  submission          ComponentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@map("submission_previews")
}

model SubmissionAttachment {
  id             String              @id @default(cuid())
  submissionId   String
  fileName       String              @db.VarChar(255)
  fileType       String              @db.VarChar(100)
  fileSizeBytes  Int
  fileUrl        String              @db.VarChar(500)
  attachmentType AttachmentType
  description    String?
  uploadedAt     DateTime            @default(now())
  submission     ComponentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@map("submission_attachments")
}

model SubmissionReviewChecklist {
  id                   String              @id @default(cuid())
  submissionId         String              @unique
  codeFollowsStandards Boolean?
  codeIsClean          Boolean?
  codeHasComments      Boolean?
  noConsoleLogs        Boolean?
  noSecurityIssues     Boolean?
  readmeExists         Boolean?
  apiDocumented        Boolean?
  examplesProvided     Boolean?
  propsDocumented      Boolean?
  testsExist           Boolean?
  testsPass            Boolean?
  coverageAdequate     Boolean?
  responsiveDesign     Boolean?
  accessibleMarkup     Boolean?
  consistentStyling    Boolean?
  licenseAppropriate   Boolean?
  noCopyrightIssues    Boolean?
  dependenciesLicensed Boolean?
  reviewerId           String?
  reviewedAt           DateTime            @default(now())
  reviewer             User?               @relation(fields: [reviewerId], references: [id])
  submission           ComponentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("submission_review_checklist")
}

model SubmissionComment {
  id           String              @id @default(cuid())
  submissionId String
  userId       String
  comment      String
  commentType  CommentType         @default(GENERAL)
  lineNumber   Int?
  filePath     String?             @db.VarChar(255)
  isInternal   Boolean             @default(false)
  isResolved   Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  submission   ComponentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user         User                @relation(fields: [userId], references: [id])

  @@index([submissionId])
  @@map("submission_comments")
}

model SubmissionVersion {
  id            String              @id @default(cuid())
  submissionId  String
  versionNumber Int
  changesMade   String[]
  sourceCode    String
  createdBy     String?
  createdAt     DateTime            @default(now())
  creator       User?               @relation(fields: [createdBy], references: [id])
  submission    ComponentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, versionNumber])
  @@index([submissionId])
  @@map("submission_versions")
}

model SubmissionGuideline {
  id         String   @id @default(cuid())
  category   String   @db.VarChar(100)
  title      String   @db.VarChar(200)
  content    String
  isRequired Boolean  @default(false)
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("submission_guidelines")
}

model FeaturedSubmission {
  id             String    @id @default(cuid())
  resourceId     String
  featuredReason String?
  featuredBy     String?
  featuredAt     DateTime  @default(now())
  featuredUntil  DateTime?
  position       Int       @default(0)
  isActive       Boolean   @default(true)
  featuredByUser User?     @relation(fields: [featuredBy], references: [id])
  resource       Resource  @relation(fields: [resourceId], references: [id])

  @@index([isActive, featuredUntil])
  @@map("featured_submissions")
}

model AIProvider {
  id                 String         @id @default(cuid())
  name               String         @unique
  slug               String         @unique
  description        String?
  icon               String?
  apiEndpoint        String?
  apiKeyEnvVar       String
  isActive           Boolean        @default(true)
  isDefault          Boolean        @default(false)
  supportsChat       Boolean        @default(true)
  supportsCompletion Boolean        @default(true)
  supportsEmbedding  Boolean        @default(false)
  supportsImage      Boolean        @default(false)
  supportsVision     Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  models             AIModel[]
  usageRecords       AIUsage[]
  userConfigs        UserAIConfig[]

  @@map("ai_providers")
}

model AIModel {
  id                String     @id @default(cuid())
  providerId        String
  modelName         String
  displayName       String
  description       String?
  maxTokens         Int
  supportsFunctions Boolean    @default(false)
  supportsStreaming Boolean    @default(true)
  inputCostPer1k    Float?
  outputCostPer1k   Float?
  isActive          Boolean    @default(true)
  isDefault         Boolean    @default(false)
  createdAt         DateTime   @default(now())
  provider          AIProvider @relation(fields: [providerId], references: [id])
  usageRecords      AIUsage[]

  @@unique([providerId, modelName])
  @@map("ai_models")
}

model UserAIConfig {
  id                String      @id @default(cuid())
  userId            String      @unique
  providerId        String?
  encryptedApiKeys  Json?
  defaultModel      String?
  temperature       Float       @default(0.7)
  maxTokens         Int         @default(2000)
  monthlyTokenLimit Int?
  dailyRequestLimit Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  provider          AIProvider? @relation(fields: [providerId], references: [id])
  user              User        @relation(fields: [userId], references: [id])

  @@map("user_ai_configs")
}

model AIUsage {
  id                 String     @id @default(cuid())
  userId             String
  providerId         String
  modelId            String
  inputTokens        Int
  outputTokens       Int
  totalTokens        Int
  requestType        String
  promptHash         String?
  estimatedCost      Float?
  generatedComponent String?
  componentType      String?
  framework          String?
  createdAt          DateTime   @default(now())
  model              AIModel    @relation(fields: [modelId], references: [id])
  provider           AIProvider @relation(fields: [providerId], references: [id])
  user               User       @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([providerId, createdAt])
  @@map("ai_usage")
}

model Team {
  id               String           @id @default(cuid())
  name             String
  slug             String           @unique
  description      String?
  avatarUrl        String?
  websiteUrl       String?
  billingEmail     String?
  stripeCustomerId String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  privatePackages  PrivatePackage[]
  projects         Project[]
  invitations      TeamInvitation[]
  members          TeamMember[]
  resources        TeamResource[]

  @@map("teams")
}

model TeamMember {
  id          String   @id @default(cuid())
  teamId      String
  userId      String
  role        TeamRole @default(MEMBER)
  permissions String[]
  joinedAt    DateTime @default(now())
  team        Team     @relation(fields: [teamId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([userId])
  @@map("team_members")
}

model TeamInvitation {
  id            String    @id @default(cuid())
  teamId        String
  email         String
  role          TeamRole  @default(MEMBER)
  token         String    @unique
  invitedBy     String
  expiresAt     DateTime
  acceptedAt    DateTime?
  createdAt     DateTime  @default(now())
  invitedByUser User      @relation(fields: [invitedBy], references: [id])
  team          Team      @relation(fields: [teamId], references: [id])

  @@index([email])
  @@index([token])
  @@map("team_invitations")
}

model Project {
  id             String             @id @default(cuid())
  teamId         String?
  userId         String?
  name           String
  slug           String             @unique
  description    String?
  framework      String             @default("react")
  language       String             @default("typescript")
  styling        String             @default("tailwind")
  githubRepo     String?
  gitBranch      String             @default("main")
  lastAccessedAt DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  components     ProjectComponent[]
  team           Team?              @relation(fields: [teamId], references: [id])
  user           User?              @relation(fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@map("projects")
}

model ProjectComponent {
  id               String   @id @default(cuid())
  projectId        String
  name             String
  type             String
  sourceCode       String
  compiledCode     String?
  framework        String
  dependencies     Json?
  props            Json?
  generatedFrom    String?
  generationConfig Json?
  version          Int      @default(1)
  previousVersions Json[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  project          Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@map("project_components")
}

model PrivatePackage {
  id              String               @id @default(cuid())
  scope           String
  name            String
  fullName        String               @unique
  ownerId         String?
  teamId          String?
  description     String?
  keywords        String[]
  homepage        String?
  repository      String?
  isPrivate       Boolean              @default(true)
  latestVersion   String?
  downloads       Int                  @default(0)
  weeklyDownloads Int                  @default(0)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  accessTokens    PackageAccessToken[]
  versions        PackageVersion[]
  owner           User?                @relation(fields: [ownerId], references: [id])
  team            Team?                @relation(fields: [teamId], references: [id])

  @@index([scope, name])
  @@map("private_packages")
}

model PackageVersion {
  id               String         @id @default(cuid())
  packageId        String
  version          String
  tag              String         @default("latest")
  tarballUrl       String
  tarballSize      Int
  unpackedSize     Int
  packageJson      Json
  readme           String?
  dependencies     Json?
  devDependencies  Json?
  peerDependencies Json?
  publishedBy      String?
  publishedAt      DateTime       @default(now())
  downloads        Int            @default(0)
  package          PrivatePackage @relation(fields: [packageId], references: [id])
  publisher        User?          @relation(fields: [publishedBy], references: [id])

  @@unique([packageId, version])
  @@index([packageId, tag])
  @@map("package_versions")
}

model PackageAccessToken {
  id         String         @id @default(cuid())
  packageId  String
  token      String         @unique
  name       String?
  canRead    Boolean        @default(true)
  canWrite   Boolean        @default(false)
  lastUsedAt DateTime?
  usageCount Int            @default(0)
  expiresAt  DateTime?
  revokedAt  DateTime?
  createdBy  String
  createdAt  DateTime       @default(now())
  creator    User           @relation(fields: [createdBy], references: [id])
  package    PrivatePackage @relation(fields: [packageId], references: [id])

  @@index([token])
  @@map("package_access_tokens")
}

model ComponentAnalytics {
  id            String             @id @default(cuid())
  resourceId    String?
  componentName String?
  componentType String?
  userId        String?
  teamId        String?
  eventType     AnalyticsEventType
  eventData     Json?
  sessionId     String?
  ipAddress     String?
  userAgent     String?
  referrer      String?
  loadTime      Int?
  renderTime    Int?
  bundleSize    Int?
  createdAt     DateTime           @default(now())
  resource      Resource?          @relation(fields: [resourceId], references: [id])
  user          User?              @relation(fields: [userId], references: [id])

  @@index([resourceId, createdAt])
  @@index([userId, createdAt])
  @@index([eventType, createdAt])
  @@map("component_analytics")
}

model PerformanceMetric {
  id          String   @id @default(cuid())
  metricType  String
  metricName  String
  value       Float
  unit        String
  environment String   @default("production")
  region      String?
  metadata    Json?
  recordedAt  DateTime @default(now())

  @@index([metricType, recordedAt])
  @@map("performance_metrics")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  resourceId  String?
  teamId      String?
  projectId   String?
  actionUrl   String?
  actionLabel String?
  isRead      Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@map("notifications")
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String?
  teamId     String?
  action     String
  entityType String
  entityId   String
  changes    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@map("activity_logs")
}

model FeatureFlag {
  id                String   @id @default(cuid())
  key               String   @unique
  name              String
  description       String?
  isEnabled         Boolean  @default(false)
  rolloutPercentage Int      @default(0)
  enabledForUsers   String[]
  enabledForTeams   String[]
  conditions        Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("feature_flags")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  isSecret    Boolean  @default(false)
  updatedBy   String?
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

model TeamResource {
  id          String   @id @default(cuid())
  teamId      String
  resourceId  String
  addedBy     String
  addedAt     DateTime @default(now())
  addedByUser User     @relation(fields: [addedBy], references: [id])
  resource    Resource @relation(fields: [resourceId], references: [id])
  team        Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, resourceId])
  @@map("team_resources")
}

model Subscription {
  id                   String        @id @default(cuid())
  userId               String        @unique
  tier                 String
  stripeSubscriptionId String?       @unique
  stripeCustomerId     String?
  stripePriceId        String?
  status               String        @default("active")
  billingPeriod        String        @default("monthly")
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean       @default(false)
  trialStart           DateTime?
  trialEnd             DateTime?
  metadata             Json?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  invoices             Invoice[]
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageRecords         UsageRecord[]

  @@index([userId])
  @@index([stripeSubscriptionId])
  @@index([status])
}

model UsageRecord {
  id             String       @id @default(cuid())
  userId         String
  subscriptionId String
  metric         String
  value          Int          @default(0)
  period         String
  metadata       Json?
  createdAt      DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionId])
  @@index([metric, period])
}

model Invoice {
  id              String       @id @default(cuid())
  userId          String
  subscriptionId  String
  stripeInvoiceId String?      @unique
  status          String       @default("draft")
  amount          Int
  currency        String       @default("usd")
  periodStart     DateTime
  periodEnd       DateTime
  dueDate         DateTime?
  paidAt          DateTime?
  metadata        Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionId])
  @@index([stripeInvoiceId])
}

model Feature {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  category    String
  tiers       String[]
  limits      Json?
  active      Boolean  @default(true)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([category])
}

model FeatureUsage {
  id       String   @id @default(cuid())
  userId   String
  feature  String
  usedAt   DateTime @default(now())
  metadata Json?
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, feature])
  @@index([feature, usedAt])
}

enum UserRole {
  USER
  CREATOR
  MODERATOR
  ADMIN
}

enum PreviewType {
  LIVE
  STATIC
  SANDBOX
  IFRAME
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum EarningStatus {
  PENDING
  AVAILABLE
  PAID
}

enum PayoutMethod {
  BANK_TRANSFER
  PAYPAL
  STRIPE
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
  ARCHIVED
}

enum AttachmentType {
  SCREENSHOT
  DEMO_VIDEO
  DOCUMENTATION
  TEST_FILE
}

enum CommentType {
  GENERAL
  CODE_REVIEW
  DESIGN_FEEDBACK
  DOCUMENTATION
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum AnalyticsEventType {
  VIEW
  PREVIEW
  DOWNLOAD
  COPY_CODE
  GENERATE
  CUSTOMIZE
  SHARE
  ERROR
}

enum NotificationType {
  SUBMISSION_APPROVED
  SUBMISSION_REJECTED
  REVIEW_RECEIVED
  PURCHASE_MADE
  PAYOUT_PROCESSED
  TEAM_INVITATION
  COMPONENT_FEATURED
  SYSTEM_UPDATE
  PRICING_UPDATE
}

// R2 Storage Models
model StorageObject {
  id                String               @id @default(cuid())
  bucket            String
  key               String
  url               String
  publicUrl         String?
  size              Int?
  contentType       String?
  etag              String?
  contentHash       String?
  storageType       StorageType
  resourceId        String?
  resource          Resource?            @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  submissionId      String?
  submission        ComponentSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  metadata          Json?
  uploadedAt        DateTime             @default(now())
  lastAccessed      DateTime?

  // Named relations for unique fields
  resourceAsCode    Resource?            @relation("ResourceCode")
  resourceAsDocs    Resource?            @relation("ResourceDocs")
  submissionAsCode  ComponentSubmission? @relation("SubmissionCode")

  @@unique([bucket, key])
  @@index([resourceId])
  @@index([submissionId])
  @@index([storageType])
  @@map("storage_objects")
}

enum StorageType {
  SOURCE_CODE
  DOCUMENTATION
  PREVIEW_IMAGE
  PREVIEW_VIDEO
  COMPILED_CODE
  PACKAGE_TARBALL
  ASSET
  EXAMPLE
  SCREENSHOT
}
