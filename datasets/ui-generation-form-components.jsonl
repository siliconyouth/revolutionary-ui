{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible form components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, validation, and modern design patterns."}, {"role": "user", "content": "Create a modern contact form with name, email, message fields, and a submit button. Include validation and loading states."}, {"role": "assistant", "content": "```tsx\nimport React, { useState } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { Mail, User, MessageSquare, Send, CheckCircle, AlertCircle } from 'lucide-react'\n\ninterface FormData {\n  name: string\n  email: string\n  message: string\n}\n\ninterface FormErrors {\n  name?: string\n  email?: string\n  message?: string\n}\n\nexport function ContactForm() {\n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    email: '',\n    message: ''\n  })\n  const [errors, setErrors] = useState<FormErrors>({})\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n  const [touched, setTouched] = useState<Set<keyof FormData>>(new Set())\n\n  const validateField = (field: keyof FormData, value: string): string | undefined => {\n    switch (field) {\n      case 'name':\n        return value.trim().length < 2 ? 'Name must be at least 2 characters' : undefined\n      case 'email':\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        return !emailRegex.test(value) ? 'Please enter a valid email' : undefined\n      case 'message':\n        return value.trim().length < 10 ? 'Message must be at least 10 characters' : undefined\n      default:\n        return undefined\n    }\n  }\n\n  const handleChange = (field: keyof FormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n    if (touched.has(field)) {\n      const error = validateField(field, value)\n      setErrors(prev => ({ ...prev, [field]: error }))\n    }\n  }\n\n  const handleBlur = (field: keyof FormData) => {\n    setTouched(prev => new Set(prev).add(field))\n    const error = validateField(field, formData[field])\n    setErrors(prev => ({ ...prev, [field]: error }))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    // Validate all fields\n    const newErrors: FormErrors = {}\n    Object.keys(formData).forEach(key => {\n      const field = key as keyof FormData\n      const error = validateField(field, formData[field])\n      if (error) newErrors[field] = error\n    })\n    \n    setErrors(newErrors)\n    if (Object.keys(newErrors).length > 0) return\n    \n    setIsLoading(true)\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000))\n    \n    setIsLoading(false)\n    setIsSuccess(true)\n    \n    // Reset form after 3 seconds\n    setTimeout(() => {\n      setFormData({ name: '', email: '', message: '' })\n      setIsSuccess(false)\n      setTouched(new Set())\n    }, 3000)\n  }\n\n  return (\n    <div className=\"w-full max-w-md mx-auto p-8 bg-white/80 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-200/50\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Get in Touch</h2>\n        <p className=\"text-gray-600 mb-8\">We'd love to hear from you. Send us a message!</p>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Name Field */}\n          <div>\n            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Name\n            </label>\n            <div className=\"relative\">\n              <User className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                id=\"name\"\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => handleChange('name', e.target.value)}\n                onBlur={() => handleBlur('name')}\n                className={`\n                  w-full pl-11 pr-4 py-3 rounded-xl border transition-all duration-200\n                  ${errors.name && touched.has('name')\n                    ? 'border-red-300 focus:border-red-500 focus:ring-red-500/20'\n                    : 'border-gray-300 focus:border-blue-500 focus:ring-blue-500/20'\n                  }\n                  focus:outline-none focus:ring-4 bg-white/50 backdrop-blur-sm\n                `}\n                placeholder=\"John Doe\"\n              />\n            </div>\n            <AnimatePresence>\n              {errors.name && touched.has('name') && (\n                <motion.p\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -10 }}\n                  className=\"mt-2 text-sm text-red-600 flex items-center gap-1\"\n                >\n                  <AlertCircle className=\"w-4 h-4\" />\n                  {errors.name}\n                </motion.p>\n              )}\n            </AnimatePresence>\n          </div>\n\n          {/* Email Field */}\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Email\n            </label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => handleChange('email', e.target.value)}\n                onBlur={() => handleBlur('email')}\n                className={`\n                  w-full pl-11 pr-4 py-3 rounded-xl border transition-all duration-200\n                  ${errors.email && touched.has('email')\n                    ? 'border-red-300 focus:border-red-500 focus:ring-red-500/20'\n                    : 'border-gray-300 focus:border-blue-500 focus:ring-blue-500/20'\n                  }\n                  focus:outline-none focus:ring-4 bg-white/50 backdrop-blur-sm\n                `}\n                placeholder=\"john@example.com\"\n              />\n            </div>\n            <AnimatePresence>\n              {errors.email && touched.has('email') && (\n                <motion.p\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -10 }}\n                  className=\"mt-2 text-sm text-red-600 flex items-center gap-1\"\n                >\n                  <AlertCircle className=\"w-4 h-4\" />\n                  {errors.email}\n                </motion.p>\n              )}\n            </AnimatePresence>\n          </div>\n\n          {/* Message Field */}\n          <div>\n            <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Message\n            </label>\n            <div className=\"relative\">\n              <MessageSquare className=\"absolute left-3 top-3 w-5 h-5 text-gray-400\" />\n              <textarea\n                id=\"message\"\n                value={formData.message}\n                onChange={(e) => handleChange('message', e.target.value)}\n                onBlur={() => handleBlur('message')}\n                rows={4}\n                className={`\n                  w-full pl-11 pr-4 py-3 rounded-xl border transition-all duration-200\n                  ${errors.message && touched.has('message')\n                    ? 'border-red-300 focus:border-red-500 focus:ring-red-500/20'\n                    : 'border-gray-300 focus:border-blue-500 focus:ring-blue-500/20'\n                  }\n                  focus:outline-none focus:ring-4 bg-white/50 backdrop-blur-sm resize-none\n                `}\n                placeholder=\"Your message here...\"\n              />\n            </div>\n            <AnimatePresence>\n              {errors.message && touched.has('message') && (\n                <motion.p\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -10 }}\n                  className=\"mt-2 text-sm text-red-600 flex items-center gap-1\"\n                >\n                  <AlertCircle className=\"w-4 h-4\" />\n                  {errors.message}\n                </motion.p>\n              )}\n            </AnimatePresence>\n          </div>\n\n          {/* Submit Button */}\n          <motion.button\n            type=\"submit\"\n            disabled={isLoading || isSuccess}\n            className=\"\n              w-full py-3 px-6 rounded-xl font-medium text-white\n              bg-gradient-to-r from-blue-600 to-purple-600\n              hover:from-blue-700 hover:to-purple-700\n              focus:outline-none focus:ring-4 focus:ring-blue-500/30\n              disabled:opacity-50 disabled:cursor-not-allowed\n              transition-all duration-200 transform hover:scale-[1.02]\n              flex items-center justify-center gap-2\n            \"\n            whileTap={{ scale: 0.98 }}\n          >\n            <AnimatePresence mode=\"wait\">\n              {isLoading ? (\n                <motion.div\n                  key=\"loading\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  className=\"flex items-center gap-2\"\n                >\n                  <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                  Sending...\n                </motion.div>\n              ) : isSuccess ? (\n                <motion.div\n                  key=\"success\"\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.8 }}\n                  className=\"flex items-center gap-2\"\n                >\n                  <CheckCircle className=\"w-5 h-5\" />\n                  Message Sent!\n                </motion.div>\n              ) : (\n                <motion.div\n                  key=\"submit\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Send className=\"w-5 h-5\" />\n                  Send Message\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </motion.button>\n        </form>\n      </motion.div>\n    </div>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible form components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, validation, and modern design patterns."}, {"role": "user", "content": "Build a multi-step registration form with progress indicator, personal info, account details, and preferences steps. Include smooth transitions and validation."}, {"role": "assistant", "content": "```tsx\nimport React, { useState } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { ChevronRight, ChevronLeft, User, Mail, Lock, Settings, Check, AlertCircle } from 'lucide-react'\n\ninterface PersonalInfo {\n  firstName: string\n  lastName: string\n  dateOfBirth: string\n  phone: string\n}\n\ninterface AccountDetails {\n  email: string\n  password: string\n  confirmPassword: string\n}\n\ninterface Preferences {\n  newsletter: boolean\n  notifications: boolean\n  theme: 'light' | 'dark' | 'auto'\n  language: string\n}\n\ninterface FormData {\n  personalInfo: PersonalInfo\n  accountDetails: AccountDetails\n  preferences: Preferences\n}\n\ntype FormErrors = {\n  [K in keyof FormData]: Partial<FormData[K]>\n}\n\nconst STEPS = [\n  { id: 'personal', title: 'Personal Info', icon: User },\n  { id: 'account', title: 'Account Details', icon: Mail },\n  { id: 'preferences', title: 'Preferences', icon: Settings }\n]\n\nexport function MultiStepRegistrationForm() {\n  const [currentStep, setCurrentStep] = useState(0)\n  const [formData, setFormData] = useState<FormData>({\n    personalInfo: {\n      firstName: '',\n      lastName: '',\n      dateOfBirth: '',\n      phone: ''\n    },\n    accountDetails: {\n      email: '',\n      password: '',\n      confirmPassword: ''\n    },\n    preferences: {\n      newsletter: false,\n      notifications: true,\n      theme: 'auto',\n      language: 'en'\n    }\n  })\n  const [errors, setErrors] = useState<FormErrors>({\n    personalInfo: {},\n    accountDetails: {},\n    preferences: {}\n  })\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [isComplete, setIsComplete] = useState(false)\n\n  const validatePersonalInfo = (): boolean => {\n    const newErrors: Partial<PersonalInfo> = {}\n    const { firstName, lastName, dateOfBirth, phone } = formData.personalInfo\n    \n    if (!firstName.trim()) newErrors.firstName = 'First name is required'\n    if (!lastName.trim()) newErrors.lastName = 'Last name is required'\n    if (!dateOfBirth) newErrors.dateOfBirth = 'Date of birth is required'\n    if (!phone.match(/^[\\d\\s\\-\\+\\(\\)]+$/)) newErrors.phone = 'Invalid phone number'\n    \n    setErrors(prev => ({ ...prev, personalInfo: newErrors }))\n    return Object.keys(newErrors).length === 0\n  }\n\n  const validateAccountDetails = (): boolean => {\n    const newErrors: Partial<AccountDetails> = {}\n    const { email, password, confirmPassword } = formData.accountDetails\n    \n    if (!email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n      newErrors.email = 'Invalid email address'\n    }\n    if (password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters'\n    }\n    if (password !== confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match'\n    }\n    \n    setErrors(prev => ({ ...prev, accountDetails: newErrors }))\n    return Object.keys(newErrors).length === 0\n  }\n\n  const handleNext = () => {\n    let isValid = true\n    \n    if (currentStep === 0) {\n      isValid = validatePersonalInfo()\n    } else if (currentStep === 1) {\n      isValid = validateAccountDetails()\n    }\n    \n    if (isValid) {\n      if (currentStep < STEPS.length - 1) {\n        setCurrentStep(prev => prev + 1)\n      } else {\n        handleSubmit()\n      }\n    }\n  }\n\n  const handlePrevious = () => {\n    setCurrentStep(prev => Math.max(0, prev - 1))\n  }\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true)\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000))\n    \n    setIsSubmitting(false)\n    setIsComplete(true)\n  }\n\n  const updateFormData = <K extends keyof FormData>(\n    section: K,\n    field: keyof FormData[K],\n    value: any\n  ) => {\n    setFormData(prev => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        [field]: value\n      }\n    }))\n  }\n\n  const progress = ((currentStep + 1) / STEPS.length) * 100\n\n  if (isComplete) {\n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"w-full max-w-2xl mx-auto p-8 bg-white rounded-3xl shadow-2xl text-center\"\n      >\n        <motion.div\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{ delay: 0.2, type: 'spring' }}\n          className=\"w-20 h-20 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-6\"\n        >\n          <Check className=\"w-10 h-10 text-white\" />\n        </motion.div>\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Registration Complete!</h2>\n        <p className=\"text-gray-600\">Welcome aboard! Your account has been created successfully.</p>\n      </motion.div>\n    )\n  }\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto\">\n      {/* Progress Bar */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          {STEPS.map((step, index) => {\n            const Icon = step.icon\n            const isActive = index === currentStep\n            const isCompleted = index < currentStep\n            \n            return (\n              <div key={step.id} className=\"flex items-center flex-1\">\n                <motion.div\n                  initial={false}\n                  animate={{\n                    scale: isActive ? 1.1 : 1,\n                    backgroundColor: isActive ? '#3B82F6' : isCompleted ? '#10B981' : '#E5E7EB'\n                  }}\n                  className=\"relative z-10 w-12 h-12 rounded-full flex items-center justify-center\"\n                >\n                  {isCompleted ? (\n                    <Check className=\"w-6 h-6 text-white\" />\n                  ) : (\n                    <Icon className={`w-6 h-6 ${isActive ? 'text-white' : 'text-gray-400'}`} />\n                  )}\n                </motion.div>\n                {index < STEPS.length - 1 && (\n                  <div className=\"flex-1 h-1 mx-2 bg-gray-200 relative\">\n                    <motion.div\n                      initial={false}\n                      animate={{ width: isCompleted ? '100%' : '0%' }}\n                      className=\"absolute top-0 left-0 h-full bg-green-500\"\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                )}\n              </div>\n            )\n          })}\n        </div>\n        <div className=\"flex justify-between\">\n          {STEPS.map((step, index) => (\n            <div key={step.id} className=\"flex-1 text-center\">\n              <p className={`text-sm font-medium ${\n                index === currentStep ? 'text-blue-600' : 'text-gray-500'\n              }`}>\n                {step.title}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Form Content */}\n      <motion.div\n        initial={{ opacity: 0, x: 20 }}\n        animate={{ opacity: 1, x: 0 }}\n        className=\"bg-white rounded-3xl shadow-2xl p-8\"\n      >\n        <AnimatePresence mode=\"wait\">\n          {currentStep === 0 && (\n            <motion.div\n              key=\"personal\"\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n              className=\"space-y-6\"\n            >\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Personal Information</h2>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    First Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.personalInfo.firstName}\n                    onChange={(e) => updateFormData('personalInfo', 'firstName', e.target.value)}\n                    className={`w-full px-4 py-3 rounded-xl border ${\n                      errors.personalInfo.firstName ? 'border-red-300' : 'border-gray-300'\n                    } focus:outline-none focus:ring-4 focus:ring-blue-500/20`}\n                    placeholder=\"John\"\n                  />\n                  {errors.personalInfo.firstName && (\n                    <p className=\"mt-2 text-sm text-red-600 flex items-center gap-1\">\n                      <AlertCircle className=\"w-4 h-4\" />\n                      {errors.personalInfo.firstName}\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Last Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.personalInfo.lastName}\n                    onChange={(e) => updateFormData('personalInfo', 'lastName', e.target.value)}\n                    className={`w-full px-4 py-3 rounded-xl border ${\n                      errors.personalInfo.lastName ? 'border-red-300' : 'border-gray-300'\n                    } focus:outline-none focus:ring-4 focus:ring-blue-500/20`}\n                    placeholder=\"Doe\"\n                  />\n                  {errors.personalInfo.lastName && (\n                    <p className=\"mt-2 text-sm text-red-600 flex items-center gap-1\">\n                      <AlertCircle className=\"w-4 h-4\" />\n                      {errors.personalInfo.lastName}\n                    </p>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Date of Birth\n                </label>\n                <input\n                  type=\"date\"\n                  value={formData.personalInfo.dateOfBirth}\n                  onChange={(e) => updateFormData('personalInfo', 'dateOfBirth', e.target.value)}\n                  className={`w-full px-4 py-3 rounded-xl border ${\n                    errors.personalInfo.dateOfBirth ? 'border-red-300' : 'border-gray-300'\n                  } focus:outline-none focus:ring-4 focus:ring-blue-500/20`}\n                />\n                {errors.personalInfo.dateOfBirth && (\n                  <p className=\"mt-2 text-sm text-red-600 flex items-center gap-1\">\n                    <AlertCircle className=\"w-4 h-4\" />\n                    {errors.personalInfo.dateOfBirth}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Phone Number\n                </label>\n                <input\n                  type=\"tel\"\n                  value={formData.personalInfo.phone}\n                  onChange={(e) => updateFormData('personalInfo', 'phone', e.target.value)}\n                  className={`w-full px-4 py-3 rounded-xl border ${\n                    errors.personalInfo.phone ? 'border-red-300' : 'border-gray-300'\n                  } focus:outline-none focus:ring-4 focus:ring-blue-500/20`}\n                  placeholder=\"+1 (555) 123-4567\"\n                />\n                {errors.personalInfo.phone && (\n                  <p className=\"mt-2 text-sm text-red-600 flex items-center gap-1\">\n                    <AlertCircle className=\"w-4 h-4\" />\n                    {errors.personalInfo.phone}\n                  </p>\n                )}\n              </div>\n            </motion.div>\n          )}\n\n          {currentStep === 1 && (\n            <motion.div\n              key=\"account\"\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n              className=\"space-y-6\"\n            >\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Account Details</h2>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Email Address\n                </label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                  <input\n                    type=\"email\"\n                    value={formData.accountDetails.email}\n                    onChange={(e) => updateFormData('accountDetails', 'email', e.target.value)}\n                    className={`w-full pl-11 pr-4 py-3 rounded-xl border ${\n                      errors.accountDetails.email ? 'border-red-300' : 'border-gray-300'\n                    } focus:outline-none focus:ring-4 focus:ring-blue-500/20`}\n                    placeholder=\"john@example.com\"\n                  />\n                </div>\n                {errors.accountDetails.email && (\n                  <p className=\"mt-2 text-sm text-red-600 flex items-center gap-1\">\n                    <AlertCircle className=\"w-4 h-4\" />\n                    {errors.accountDetails.email}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Password\n                </label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                  <input\n                    type=\"password\"\n                    value={formData.accountDetails.password}\n                    onChange={(e) => updateFormData('accountDetails', 'password', e.target.value)}\n                    className={`w-full pl-11 pr-4 py-3 rounded-xl border ${\n                      errors.accountDetails.password ? 'border-red-300' : 'border-gray-300'\n                    } focus:outline-none focus:ring-4 focus:ring-blue-500/20`}\n                    placeholder=\"••••••••\"\n                  />\n                </div>\n                {errors.accountDetails.password && (\n                  <p className=\"mt-2 text-sm text-red-600 flex items-center gap-1\">\n                    <AlertCircle className=\"w-4 h-4\" />\n                    {errors.accountDetails.password}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Confirm Password\n                </label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                  <input\n                    type=\"password\"\n                    value={formData.accountDetails.confirmPassword}\n                    onChange={(e) => updateFormData('accountDetails', 'confirmPassword', e.target.value)}\n                    className={`w-full pl-11 pr-4 py-3 rounded-xl border ${\n                      errors.accountDetails.confirmPassword ? 'border-red-300' : 'border-gray-300'\n                    } focus:outline-none focus:ring-4 focus:ring-blue-500/20`}\n                    placeholder=\"••••••••\"\n                  />\n                </div>\n                {errors.accountDetails.confirmPassword && (\n                  <p className=\"mt-2 text-sm text-red-600 flex items-center gap-1\">\n                    <AlertCircle className=\"w-4 h-4\" />\n                    {errors.accountDetails.confirmPassword}\n                  </p>\n                )}\n              </div>\n            </motion.div>\n          )}\n\n          {currentStep === 2 && (\n            <motion.div\n              key=\"preferences\"\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n              className=\"space-y-6\"\n            >\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Preferences</h2>\n              \n              <div className=\"space-y-4\">\n                <label className=\"flex items-center justify-between p-4 rounded-xl border border-gray-300 hover:border-blue-500 transition-colors cursor-pointer\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Newsletter</p>\n                    <p className=\"text-sm text-gray-600\">Receive weekly updates and news</p>\n                  </div>\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.preferences.newsletter}\n                    onChange={(e) => updateFormData('preferences', 'newsletter', e.target.checked)}\n                    className=\"w-5 h-5 text-blue-600 rounded focus:ring-blue-500\"\n                  />\n                </label>\n                \n                <label className=\"flex items-center justify-between p-4 rounded-xl border border-gray-300 hover:border-blue-500 transition-colors cursor-pointer\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Push Notifications</p>\n                    <p className=\"text-sm text-gray-600\">Get notified about important updates</p>\n                  </div>\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.preferences.notifications}\n                    onChange={(e) => updateFormData('preferences', 'notifications', e.target.checked)}\n                    className=\"w-5 h-5 text-blue-600 rounded focus:ring-blue-500\"\n                  />\n                </label>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Theme Preference\n                </label>\n                <select\n                  value={formData.preferences.theme}\n                  onChange={(e) => updateFormData('preferences', 'theme', e.target.value as 'light' | 'dark' | 'auto')}\n                  className=\"w-full px-4 py-3 rounded-xl border border-gray-300 focus:outline-none focus:ring-4 focus:ring-blue-500/20\"\n                >\n                  <option value=\"light\">Light</option>\n                  <option value=\"dark\">Dark</option>\n                  <option value=\"auto\">Auto (System)</option>\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Language\n                </label>\n                <select\n                  value={formData.preferences.language}\n                  onChange={(e) => updateFormData('preferences', 'language', e.target.value)}\n                  className=\"w-full px-4 py-3 rounded-xl border border-gray-300 focus:outline-none focus:ring-4 focus:ring-blue-500/20\"\n                >\n                  <option value=\"en\">English</option>\n                  <option value=\"es\">Español</option>\n                  <option value=\"fr\">Français</option>\n                  <option value=\"de\">Deutsch</option>\n                  <option value=\"ja\">日本語</option>\n                </select>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Navigation Buttons */}\n        <div className=\"flex justify-between mt-8\">\n          <button\n            type=\"button\"\n            onClick={handlePrevious}\n            disabled={currentStep === 0}\n            className=\"\n              px-6 py-3 rounded-xl font-medium\n              text-gray-700 bg-gray-100 hover:bg-gray-200\n              disabled:opacity-50 disabled:cursor-not-allowed\n              transition-colors flex items-center gap-2\n            \"\n          >\n            <ChevronLeft className=\"w-5 h-5\" />\n            Previous\n          </button>\n          \n          <motion.button\n            type=\"button\"\n            onClick={handleNext}\n            disabled={isSubmitting}\n            className=\"\n              px-6 py-3 rounded-xl font-medium text-white\n              bg-gradient-to-r from-blue-600 to-purple-600\n              hover:from-blue-700 hover:to-purple-700\n              disabled:opacity-50 disabled:cursor-not-allowed\n              transition-all flex items-center gap-2\n            \"\n            whileTap={{ scale: 0.98 }}\n          >\n            {isSubmitting ? (\n              <>\n                <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                Processing...\n              </>\n            ) : currentStep === STEPS.length - 1 ? (\n              <>\n                Complete Registration\n                <Check className=\"w-5 h-5\" />\n              </>\n            ) : (\n              <>\n                Next\n                <ChevronRight className=\"w-5 h-5\" />\n              </>\n            )}\n          </motion.button>\n        </div>\n      </motion.div>\n    </div>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible form components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, validation, and modern design patterns."}, {"role": "user", "content": "Create a dynamic form builder component where users can add/remove fields, choose field types, and preview the form in real-time."}, {"role": "assistant", "content": "```tsx\nimport React, { useState } from 'react'\nimport { motion, AnimatePresence, Reorder } from 'framer-motion'\nimport { Plus, Trash2, GripVertical, Eye, EyeOff, Download, Upload, Copy, Check } from 'lucide-react'\n\ntype FieldType = 'text' | 'email' | 'number' | 'select' | 'textarea' | 'checkbox' | 'radio' | 'date'\n\ninterface FieldOption {\n  id: string\n  label: string\n  value: string\n}\n\ninterface FormField {\n  id: string\n  type: FieldType\n  label: string\n  placeholder?: string\n  required: boolean\n  options?: FieldOption[]\n  validation?: {\n    min?: number\n    max?: number\n    pattern?: string\n  }\n}\n\nconst FIELD_TYPES: { value: FieldType; label: string; icon: string }[] = [\n  { value: 'text', label: 'Text Input', icon: 'Aa' },\n  { value: 'email', label: 'Email', icon: '@' },\n  { value: 'number', label: 'Number', icon: '123' },\n  { value: 'select', label: 'Dropdown', icon: '▼' },\n  { value: 'textarea', label: 'Text Area', icon: '¶' },\n  { value: 'checkbox', label: 'Checkbox', icon: '☑' },\n  { value: 'radio', label: 'Radio', icon: '◉' },\n  { value: 'date', label: 'Date', icon: '📅' }\n]\n\nexport function DynamicFormBuilder() {\n  const [fields, setFields] = useState<FormField[]>([\n    {\n      id: '1',\n      type: 'text',\n      label: 'Full Name',\n      placeholder: 'Enter your full name',\n      required: true\n    },\n    {\n      id: '2',\n      type: 'email',\n      label: 'Email Address',\n      placeholder: 'john@example.com',\n      required: true\n    }\n  ])\n  const [showPreview, setShowPreview] = useState(true)\n  const [formName, setFormName] = useState('Contact Form')\n  const [selectedField, setSelectedField] = useState<string | null>(null)\n  const [copied, setCopied] = useState(false)\n\n  const addField = (type: FieldType) => {\n    const newField: FormField = {\n      id: Date.now().toString(),\n      type,\n      label: `New ${type} field`,\n      placeholder: '',\n      required: false,\n      options: type === 'select' || type === 'radio' ? [\n        { id: '1', label: 'Option 1', value: 'option1' },\n        { id: '2', label: 'Option 2', value: 'option2' }\n      ] : undefined\n    }\n    setFields([...fields, newField])\n    setSelectedField(newField.id)\n  }\n\n  const updateField = (id: string, updates: Partial<FormField>) => {\n    setFields(fields.map(field => \n      field.id === id ? { ...field, ...updates } : field\n    ))\n  }\n\n  const removeField = (id: string) => {\n    setFields(fields.filter(field => field.id !== id))\n    if (selectedField === id) setSelectedField(null)\n  }\n\n  const addOption = (fieldId: string) => {\n    const field = fields.find(f => f.id === fieldId)\n    if (field && field.options) {\n      const newOption: FieldOption = {\n        id: Date.now().toString(),\n        label: `Option ${field.options.length + 1}`,\n        value: `option${field.options.length + 1}`\n      }\n      updateField(fieldId, {\n        options: [...field.options, newOption]\n      })\n    }\n  }\n\n  const updateOption = (fieldId: string, optionId: string, updates: Partial<FieldOption>) => {\n    const field = fields.find(f => f.id === fieldId)\n    if (field && field.options) {\n      updateField(fieldId, {\n        options: field.options.map(opt => \n          opt.id === optionId ? { ...opt, ...updates } : opt\n        )\n      })\n    }\n  }\n\n  const removeOption = (fieldId: string, optionId: string) => {\n    const field = fields.find(f => f.id === fieldId)\n    if (field && field.options) {\n      updateField(fieldId, {\n        options: field.options.filter(opt => opt.id !== optionId)\n      })\n    }\n  }\n\n  const exportForm = () => {\n    const formConfig = {\n      name: formName,\n      fields: fields\n    }\n    const blob = new Blob([JSON.stringify(formConfig, null, 2)], { type: 'application/json' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `${formName.toLowerCase().replace(/\\s+/g, '-')}-form.json`\n    a.click()\n  }\n\n  const copyFormCode = () => {\n    const code = generateFormCode()\n    navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }\n\n  const generateFormCode = () => {\n    return `// ${formName} Component\\nexport function ${formName.replace(/\\s+/g, '')}Form() {\\n  const [formData, setFormData] = useState({\\n${fields.map(f => `    ${f.label.toLowerCase().replace(/\\s+/g, '_')}: ''`).join(',\\n')}\\n  })\\n\\n  return (\\n    <form className=\"space-y-4\">\\n      <h2 className=\"text-2xl font-bold\">${formName}</h2>\\n${fields.map(field => generateFieldCode(field)).join('\\n')}\\n      <button type=\"submit\" className=\"px-6 py-3 bg-blue-600 text-white rounded-lg\">\\n        Submit\\n      </button>\\n    </form>\\n  )\\n}`\n  }\n\n  const generateFieldCode = (field: FormField): string => {\n    const fieldName = field.label.toLowerCase().replace(/\\s+/g, '_')\n    switch (field.type) {\n      case 'text':\n      case 'email':\n      case 'number':\n      case 'date':\n        return `      <div>\\n        <label className=\"block text-sm font-medium mb-2\">${field.label}</label>\\n        <input\\n          type=\"${field.type}\"\\n          placeholder=\"${field.placeholder || ''}\"\\n          required={${field.required}}\\n          className=\"w-full px-4 py-2 border rounded-lg\"\\n        />\\n      </div>`\n      case 'textarea':\n        return `      <div>\\n        <label className=\"block text-sm font-medium mb-2\">${field.label}</label>\\n        <textarea\\n          placeholder=\"${field.placeholder || ''}\"\\n          required={${field.required}}\\n          rows={4}\\n          className=\"w-full px-4 py-2 border rounded-lg\"\\n        />\\n      </div>`\n      case 'select':\n        return `      <div>\\n        <label className=\"block text-sm font-medium mb-2\">${field.label}</label>\\n        <select required={${field.required}} className=\"w-full px-4 py-2 border rounded-lg\">\\n          <option value=\"\">Select an option</option>\\n${field.options?.map(opt => `          <option value=\"${opt.value}\">${opt.label}</option>`).join('\\n')}\\n        </select>\\n      </div>`\n      case 'checkbox':\n        return `      <label className=\"flex items-center gap-2\">\\n        <input type=\"checkbox\" className=\"rounded\" />\\n        <span>${field.label}</span>\\n      </label>`\n      case 'radio':\n        return `      <div>\\n        <label className=\"block text-sm font-medium mb-2\">${field.label}</label>\\n        <div className=\"space-y-2\">\\n${field.options?.map(opt => `          <label className=\"flex items-center gap-2\">\\n            <input type=\"radio\" name=\"${fieldName}\" value=\"${opt.value}\" />\\n            <span>${opt.label}</span>\\n          </label>`).join('\\n')}\\n        </div>\\n      </div>`\n      default:\n        return ''\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">Dynamic Form Builder</h1>\n          <p className=\"text-gray-600\">Create custom forms with drag-and-drop simplicity</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Builder Panel */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Form Name */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Form Name\n              </label>\n              <input\n                type=\"text\"\n                value={formName}\n                onChange={(e) => setFormName(e.target.value)}\n                className=\"w-full px-4 py-3 rounded-xl border border-gray-300 focus:outline-none focus:ring-4 focus:ring-blue-500/20\"\n              />\n            </div>\n\n            {/* Field Types */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Add Field</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                {FIELD_TYPES.map(type => (\n                  <motion.button\n                    key={type.value}\n                    onClick={() => addField(type.value)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"\n                      p-4 rounded-xl border-2 border-dashed border-gray-300\n                      hover:border-blue-500 hover:bg-blue-50\n                      transition-colors flex flex-col items-center gap-2\n                    \"\n                  >\n                    <span className=\"text-2xl\">{type.icon}</span>\n                    <span className=\"text-sm font-medium\">{type.label}</span>\n                  </motion.button>\n                ))}\n              </div>\n            </div>\n\n            {/* Form Fields */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Form Fields</h3>\n                <div className=\"flex items-center gap-2\">\n                  <button\n                    onClick={() => setShowPreview(!showPreview)}\n                    className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n                  >\n                    {showPreview ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                  <button\n                    onClick={exportForm}\n                    className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n                  >\n                    <Download className=\"w-5 h-5\" />\n                  </button>\n                  <button\n                    onClick={copyFormCode}\n                    className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors relative\"\n                  >\n                    {copied ? <Check className=\"w-5 h-5 text-green-600\" /> : <Copy className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n              </div>\n\n              <Reorder.Group\n                axis=\"y\"\n                values={fields}\n                onReorder={setFields}\n                className=\"space-y-3\"\n              >\n                <AnimatePresence>\n                  {fields.map(field => (\n                    <Reorder.Item\n                      key={field.id}\n                      value={field}\n                      className=\"group\"\n                    >\n                      <motion.div\n                        layout\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        exit={{ opacity: 0, x: -100 }}\n                        onClick={() => setSelectedField(field.id)}\n                        className={`\n                          p-4 rounded-xl border-2 cursor-pointer transition-all\n                          ${selectedField === field.id\n                            ? 'border-blue-500 bg-blue-50'\n                            : 'border-gray-200 hover:border-gray-300'\n                          }\n                        `}\n                      >\n                        <div className=\"flex items-start gap-3\">\n                          <GripVertical className=\"w-5 h-5 text-gray-400 mt-1 cursor-move\" />\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <span className=\"text-xs font-medium px-2 py-1 bg-gray-100 rounded\">\n                                {field.type}\n                              </span>\n                              <input\n                                type=\"text\"\n                                value={field.label}\n                                onChange={(e) => updateField(field.id, { label: e.target.value })}\n                                onClick={(e) => e.stopPropagation()}\n                                className=\"flex-1 font-medium bg-transparent focus:outline-none focus:bg-white focus:px-2 focus:py-1 focus:rounded\"\n                              />\n                              {field.required && (\n                                <span className=\"text-xs text-red-600\">Required</span>\n                              )}\n                            </div>\n                            <input\n                              type=\"text\"\n                              value={field.placeholder || ''}\n                              onChange={(e) => updateField(field.id, { placeholder: e.target.value })}\n                              onClick={(e) => e.stopPropagation()}\n                              placeholder=\"Placeholder text...\"\n                              className=\"text-sm text-gray-600 bg-transparent focus:outline-none focus:bg-white focus:px-2 focus:py-1 focus:rounded w-full\"\n                            />\n                          </div>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              removeField(field.id)\n                            }}\n                            className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors opacity-0 group-hover:opacity-100\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </button>\n                        </div>\n\n                        {/* Field Options */}\n                        {selectedField === field.id && (\n                          <motion.div\n                            initial={{ height: 0, opacity: 0 }}\n                            animate={{ height: 'auto', opacity: 1 }}\n                            className=\"mt-4 pt-4 border-t border-gray-200 space-y-3\"\n                          >\n                            <label className=\"flex items-center gap-2\">\n                              <input\n                                type=\"checkbox\"\n                                checked={field.required}\n                                onChange={(e) => updateField(field.id, { required: e.target.checked })}\n                                className=\"rounded text-blue-600\"\n                              />\n                              <span className=\"text-sm font-medium\">Required field</span>\n                            </label>\n\n                            {/* Options for select/radio */}\n                            {(field.type === 'select' || field.type === 'radio') && field.options && (\n                              <div>\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <label className=\"text-sm font-medium\">Options</label>\n                                  <button\n                                    onClick={() => addOption(field.id)}\n                                    className=\"text-xs text-blue-600 hover:text-blue-700 flex items-center gap-1\"\n                                  >\n                                    <Plus className=\"w-3 h-3\" /> Add Option\n                                  </button>\n                                </div>\n                                <div className=\"space-y-2\">\n                                  {field.options.map(option => (\n                                    <div key={option.id} className=\"flex items-center gap-2\">\n                                      <input\n                                        type=\"text\"\n                                        value={option.label}\n                                        onChange={(e) => updateOption(field.id, option.id, { label: e.target.value })}\n                                        className=\"flex-1 px-3 py-2 text-sm border rounded-lg\"\n                                      />\n                                      <button\n                                        onClick={() => removeOption(field.id, option.id)}\n                                        className=\"p-1 text-red-600 hover:bg-red-50 rounded\"\n                                      >\n                                        <Trash2 className=\"w-3 h-3\" />\n                                      </button>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    </Reorder.Item>\n                  ))}\n                </AnimatePresence>\n              </Reorder.Group>\n\n              {fields.length === 0 && (\n                <div className=\"text-center py-12 text-gray-500\">\n                  <p>No fields added yet.</p>\n                  <p className=\"text-sm mt-2\">Click on a field type above to get started!</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Preview Panel */}\n          {showPreview && (\n            <div className=\"lg:col-span-1\">\n              <div className=\"sticky top-8\">\n                <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Preview</h3>\n                  <form className=\"space-y-4\" onSubmit={(e) => e.preventDefault()}>\n                    <h4 className=\"text-xl font-bold\">{formName}</h4>\n                    {fields.map(field => (\n                      <div key={field.id}>\n                        {field.type !== 'checkbox' && (\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            {field.label}\n                            {field.required && <span className=\"text-red-600 ml-1\">*</span>}\n                          </label>\n                        )}\n                        \n                        {field.type === 'text' || field.type === 'email' || field.type === 'number' || field.type === 'date' ? (\n                          <input\n                            type={field.type}\n                            placeholder={field.placeholder}\n                            required={field.required}\n                            className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          />\n                        ) : field.type === 'textarea' ? (\n                          <textarea\n                            placeholder={field.placeholder}\n                            required={field.required}\n                            rows={4}\n                            className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n                          />\n                        ) : field.type === 'select' ? (\n                          <select\n                            required={field.required}\n                            className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          >\n                            <option value=\"\">Select an option</option>\n                            {field.options?.map(option => (\n                              <option key={option.id} value={option.value}>\n                                {option.label}\n                              </option>\n                            ))}\n                          </select>\n                        ) : field.type === 'checkbox' ? (\n                          <label className=\"flex items-center gap-2 cursor-pointer\">\n                            <input\n                              type=\"checkbox\"\n                              required={field.required}\n                              className=\"rounded text-blue-600\"\n                            />\n                            <span className=\"text-sm\">{field.label}</span>\n                            {field.required && <span className=\"text-red-600\">*</span>}\n                          </label>\n                        ) : field.type === 'radio' ? (\n                          <div className=\"space-y-2\">\n                            {field.options?.map(option => (\n                              <label key={option.id} className=\"flex items-center gap-2 cursor-pointer\">\n                                <input\n                                  type=\"radio\"\n                                  name={field.id}\n                                  value={option.value}\n                                  required={field.required}\n                                  className=\"text-blue-600\"\n                                />\n                                <span className=\"text-sm\">{option.label}</span>\n                              </label>\n                            ))}\n                          </div>\n                        ) : null}\n                      </div>\n                    ))}\n                    \n                    {fields.length > 0 && (\n                      <button\n                        type=\"submit\"\n                        className=\"\n                          w-full py-3 px-6 rounded-xl font-medium text-white\n                          bg-gradient-to-r from-blue-600 to-purple-600\n                          hover:from-blue-700 hover:to-purple-700\n                          transition-all transform hover:scale-[1.02]\n                        \"\n                      >\n                        Submit\n                      </button>\n                    )}\n                  </form>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n```"}]}