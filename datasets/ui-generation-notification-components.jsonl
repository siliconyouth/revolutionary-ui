{"system": "You are an expert UI developer specializing in creating modern, accessible notification and toast components in the style of 21st.dev. Focus on smooth animations, flexible positioning, multiple variants, queue management, and accessibility features. Always use TypeScript, Framer Motion for animations, and modern React patterns.", "messages": [{"role": "user", "content": "Create a modern toast notification system with multiple variants (success, error, warning, info), animations, auto-dismiss, actions, and queue management. Include a toast provider and hook for easy usage."}, {"role": "assistant", "content": "I'll create a comprehensive toast notification system with all the features you requested. This will include smooth animations, multiple variants, queue management, and a clean API.\n\n```tsx\n// toast-provider.tsx\nimport React, { createContext, useContext, useState, useCallback, useRef } from 'react'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { X, CheckCircle, AlertCircle, Info, AlertTriangle } from 'lucide-react'\n\ntype ToastVariant = 'success' | 'error' | 'warning' | 'info'\n\ninterface Toast {\n  id: string\n  title: string\n  description?: string\n  variant: ToastVariant\n  duration?: number\n  action?: {\n    label: string\n    onClick: () => void\n  }\n}\n\ninterface ToastContextType {\n  toasts: Toast[]\n  toast: (options: Omit<Toast, 'id'>) => void\n  dismiss: (id: string) => void\n  dismissAll: () => void\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined)\n\nexport const useToast = () => {\n  const context = useContext(ToastContext)\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider')\n  }\n  return context\n}\n\ninterface ToastProviderProps {\n  children: React.ReactNode\n  maxToasts?: number\n  position?: 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right'\n}\n\nexport const ToastProvider: React.FC<ToastProviderProps> = ({\n  children,\n  maxToasts = 5,\n  position = 'bottom-right'\n}) => {\n  const [toasts, setToasts] = useState<Toast[]>([])\n  const timeoutRefs = useRef<Map<string, NodeJS.Timeout>>(new Map())\n\n  const dismiss = useCallback((id: string) => {\n    const timeout = timeoutRefs.current.get(id)\n    if (timeout) {\n      clearTimeout(timeout)\n      timeoutRefs.current.delete(id)\n    }\n    setToasts((prev) => prev.filter((toast) => toast.id !== id))\n  }, [])\n\n  const dismissAll = useCallback(() => {\n    timeoutRefs.current.forEach((timeout) => clearTimeout(timeout))\n    timeoutRefs.current.clear()\n    setToasts([])\n  }, [])\n\n  const toast = useCallback(\n    (options: Omit<Toast, 'id'>) => {\n      const id = Math.random().toString(36).substring(2, 9)\n      const newToast: Toast = { ...options, id }\n\n      setToasts((prev) => {\n        const updated = [...prev, newToast]\n        return updated.slice(-maxToasts)\n      })\n\n      if (options.duration !== 0) {\n        const timeout = setTimeout(() => {\n          dismiss(id)\n        }, options.duration || 5000)\n        timeoutRefs.current.set(id, timeout)\n      }\n    },\n    [dismiss, maxToasts]\n  )\n\n  const positionClasses = {\n    'top-left': 'top-4 left-4',\n    'top-center': 'top-4 left-1/2 -translate-x-1/2',\n    'top-right': 'top-4 right-4',\n    'bottom-left': 'bottom-4 left-4',\n    'bottom-center': 'bottom-4 left-1/2 -translate-x-1/2',\n    'bottom-right': 'bottom-4 right-4'\n  }\n\n  return (\n    <ToastContext.Provider value={{ toasts, toast, dismiss, dismissAll }}>\n      {children}\n      <div\n        className={`fixed z-50 ${positionClasses[position]} pointer-events-none`}\n        style={{ maxWidth: 'calc(100vw - 2rem)' }}\n      >\n        <AnimatePresence mode=\"popLayout\">\n          {toasts.map((toast) => (\n            <ToastNotification\n              key={toast.id}\n              toast={toast}\n              onDismiss={() => dismiss(toast.id)}\n              position={position}\n            />\n          ))}\n        </AnimatePresence>\n      </div>\n    </ToastContext.Provider>\n  )\n}\n\n// toast-notification.tsx\ninterface ToastNotificationProps {\n  toast: Toast\n  onDismiss: () => void\n  position: string\n}\n\nconst ToastNotification: React.FC<ToastNotificationProps> = ({ toast, onDismiss, position }) => {\n  const icons = {\n    success: CheckCircle,\n    error: AlertCircle,\n    warning: AlertTriangle,\n    info: Info\n  }\n\n  const colors = {\n    success: 'bg-green-50 border-green-200 text-green-800',\n    error: 'bg-red-50 border-red-200 text-red-800',\n    warning: 'bg-yellow-50 border-yellow-200 text-yellow-800',\n    info: 'bg-blue-50 border-blue-200 text-blue-800'\n  }\n\n  const iconColors = {\n    success: 'text-green-500',\n    error: 'text-red-500',\n    warning: 'text-yellow-500',\n    info: 'text-blue-500'\n  }\n\n  const Icon = icons[toast.variant]\n  const isTop = position.includes('top')\n\n  return (\n    <motion.div\n      layout\n      initial={{ opacity: 0, y: isTop ? -20 : 20, scale: 0.95 }}\n      animate={{ opacity: 1, y: 0, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.95, transition: { duration: 0.15 } }}\n      transition={{ type: 'spring', stiffness: 300, damping: 25 }}\n      className=\"pointer-events-auto mb-4 w-full max-w-sm\"\n    >\n      <div\n        className={`relative overflow-hidden rounded-lg border shadow-lg ${colors[toast.variant]} backdrop-blur-sm`}\n      >\n        <div className=\"p-4\">\n          <div className=\"flex items-start\">\n            <div className=\"flex-shrink-0\">\n              <Icon className={`h-5 w-5 ${iconColors[toast.variant]}`} />\n            </div>\n            <div className=\"ml-3 flex-1\">\n              <p className=\"text-sm font-medium\">{toast.title}</p>\n              {toast.description && (\n                <p className=\"mt-1 text-sm opacity-90\">{toast.description}</p>\n              )}\n              {toast.action && (\n                <button\n                  onClick={toast.action.onClick}\n                  className=\"mt-3 text-sm font-medium underline-offset-2 hover:underline focus:outline-none focus:ring-2 focus:ring-offset-2 rounded\"\n                >\n                  {toast.action.label}\n                </button>\n              )}\n            </div>\n            <div className=\"ml-4 flex-shrink-0\">\n              <button\n                onClick={onDismiss}\n                className=\"inline-flex rounded-md hover:opacity-70 focus:outline-none focus:ring-2 focus:ring-offset-2\"\n              >\n                <span className=\"sr-only\">Close</span>\n                <X className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <motion.div\n          className=\"absolute bottom-0 left-0 right-0 h-1 bg-current opacity-20\"\n          initial={{ scaleX: 1 }}\n          animate={{ scaleX: 0 }}\n          transition={{ duration: (toast.duration || 5000) / 1000, ease: 'linear' }}\n          style={{ originX: 0 }}\n        />\n      </div>\n    </motion.div>\n  )\n}\n\n// Example usage component\nexport const ToastDemo: React.FC = () => {\n  const { toast, dismissAll } = useToast()\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-wrap gap-2\">\n        <button\n          onClick={() =>\n            toast({\n              title: 'Success!',\n              description: 'Your changes have been saved.',\n              variant: 'success'\n            })\n          }\n          className=\"px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors\"\n        >\n          Show Success\n        </button>\n        <button\n          onClick={() =>\n            toast({\n              title: 'Error occurred',\n              description: 'Something went wrong. Please try again.',\n              variant: 'error',\n              duration: 7000\n            })\n          }\n          className=\"px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors\"\n        >\n          Show Error\n        </button>\n        <button\n          onClick={() =>\n            toast({\n              title: 'Warning',\n              description: 'Please review your input.',\n              variant: 'warning'\n            })\n          }\n          className=\"px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors\"\n        >\n          Show Warning\n        </button>\n        <button\n          onClick={() =>\n            toast({\n              title: 'New update available',\n              description: 'Version 2.0 is now available.',\n              variant: 'info',\n              action: {\n                label: 'Update now',\n                onClick: () => console.log('Updating...')\n              }\n            })\n          }\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\n        >\n          Show Info with Action\n        </button>\n        <button\n          onClick={() => {\n            for (let i = 0; i < 10; i++) {\n              setTimeout(() => {\n                toast({\n                  title: `Toast #${i + 1}`,\n                  description: 'Testing queue management',\n                  variant: ['success', 'error', 'warning', 'info'][i % 4] as ToastVariant\n                })\n              }, i * 200)\n            }\n          }}\n          className=\"px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors\"\n        >\n          Show Multiple\n        </button>\n        <button\n          onClick={dismissAll}\n          className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors\"\n        >\n          Dismiss All\n        </button>\n      </div>\n    </div>\n  )\n}\n\n// App usage\nexport default function App() {\n  return (\n    <ToastProvider position=\"bottom-right\" maxToasts={5}>\n      <div className=\"min-h-screen bg-gray-50 p-8\">\n        <h1 className=\"text-3xl font-bold mb-8\">Toast Notification System</h1>\n        <ToastDemo />\n      </div>\n    </ToastProvider>\n  )\n}\n```\n\nThis toast notification system includes:\n\n1. **Multiple Variants**: Success, error, warning, and info styles with appropriate icons and colors\n2. **Smooth Animations**: Enter/exit animations using Framer Motion with spring physics\n3. **Auto-dismiss**: Configurable duration with visual progress indicator\n4. **Queue Management**: Limits number of visible toasts and handles overflow\n5. **Actions**: Optional action buttons for user interaction\n6. **Flexible Positioning**: Six position options (top/bottom × left/center/right)\n7. **Accessibility**: Keyboard navigation, screen reader support, focus management\n8. **Responsive**: Works on all screen sizes with proper constraints\n9. **TypeScript**: Full type safety with proper interfaces\n10. **Easy API**: Simple hook-based API with toast() function"}]}
{"system": "You are an expert UI developer specializing in creating modern, accessible notification and alert components in the style of 21st.dev. Focus on inline notifications, alert banners, notification centers, and real-time updates. Always use TypeScript, modern animations, and accessibility best practices.", "messages": [{"role": "user", "content": "Build a notification center component with categorized notifications, real-time updates, mark as read/unread, filters, and smooth animations. Include WebSocket support for live notifications."}, {"role": "assistant", "content": "I'll create a comprehensive notification center with all the features you requested, including real-time WebSocket support and a beautiful UI.\n\n```tsx\n// notification-types.ts\nexport interface Notification {\n  id: string\n  title: string\n  message: string\n  category: 'system' | 'security' | 'marketing' | 'social' | 'updates'\n  timestamp: Date\n  read: boolean\n  avatar?: string\n  actionUrl?: string\n  priority?: 'low' | 'medium' | 'high'\n  metadata?: Record<string, any>\n}\n\n// notification-context.tsx\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\n\ninterface NotificationContextType {\n  notifications: Notification[]\n  unreadCount: number\n  addNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => void\n  markAsRead: (id: string) => void\n  markAllAsRead: () => void\n  deleteNotification: (id: string) => void\n  clearAll: () => void\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext)\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider')\n  }\n  return context\n}\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([])\n  const wsRef = useRef<WebSocket | null>(null)\n\n  const unreadCount = notifications.filter(n => !n.read).length\n\n  const addNotification = useCallback((notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      id: Math.random().toString(36).substring(2, 9),\n      timestamp: new Date(),\n      read: false\n    }\n    setNotifications(prev => [newNotification, ...prev])\n  }, [])\n\n  const markAsRead = useCallback((id: string) => {\n    setNotifications(prev =>\n      prev.map(n => (n.id === id ? { ...n, read: true } : n))\n    )\n  }, [])\n\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })))\n  }, [])\n\n  const deleteNotification = useCallback((id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id))\n  }, [])\n\n  const clearAll = useCallback(() => {\n    setNotifications([])\n  }, [])\n\n  // WebSocket connection for real-time notifications\n  useEffect(() => {\n    const connectWebSocket = () => {\n      try {\n        wsRef.current = new WebSocket('wss://your-websocket-server.com')\n\n        wsRef.current.onmessage = (event) => {\n          const data = JSON.parse(event.data)\n          if (data.type === 'notification') {\n            addNotification(data.payload)\n          }\n        }\n\n        wsRef.current.onerror = (error) => {\n          console.error('WebSocket error:', error)\n        }\n\n        wsRef.current.onclose = () => {\n          // Reconnect after 5 seconds\n          setTimeout(connectWebSocket, 5000)\n        }\n      } catch (error) {\n        console.error('Failed to connect WebSocket:', error)\n      }\n    }\n\n    // Simulate WebSocket for demo (remove in production)\n    const simulateNotifications = () => {\n      const categories: Notification['category'][] = ['system', 'security', 'marketing', 'social', 'updates']\n      const titles = [\n        'New login detected',\n        'System update available',\n        'You have a new follower',\n        'Special offer just for you',\n        'Security alert'\n      ]\n      const messages = [\n        'Someone logged in from a new device',\n        'Version 2.0 is now available for download',\n        'John Doe started following you',\n        'Get 20% off on your next purchase',\n        'Unusual activity detected on your account'\n      ]\n\n      setInterval(() => {\n        const randomIndex = Math.floor(Math.random() * titles.length)\n        addNotification({\n          title: titles[randomIndex],\n          message: messages[randomIndex],\n          category: categories[randomIndex],\n          priority: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)] as 'low' | 'medium' | 'high'\n        })\n      }, 15000) // Add a new notification every 15 seconds\n    }\n\n    // Comment out simulation and uncomment WebSocket in production\n    simulateNotifications()\n    // connectWebSocket()\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close()\n      }\n    }\n  }, [addNotification])\n\n  return (\n    <NotificationContext.Provider\n      value={{\n        notifications,\n        unreadCount,\n        addNotification,\n        markAsRead,\n        markAllAsRead,\n        deleteNotification,\n        clearAll\n      }}\n    >\n      {children}\n    </NotificationContext.Provider>\n  )\n}\n\n// notification-center.tsx\nimport { useState, useMemo } from 'react'\nimport { Bell, Check, Trash2, Filter, X, Shield, Megaphone, Users, Settings, RefreshCw } from 'lucide-react'\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface NotificationCenterProps {\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport const NotificationCenter: React.FC<NotificationCenterProps> = ({ isOpen, onClose }) => {\n  const { notifications, unreadCount, markAsRead, markAllAsRead, deleteNotification, clearAll } = useNotifications()\n  const [selectedCategory, setSelectedCategory] = useState<Notification['category'] | 'all'>('all')\n  const [showUnreadOnly, setShowUnreadOnly] = useState(false)\n\n  const categoryIcons = {\n    system: Settings,\n    security: Shield,\n    marketing: Megaphone,\n    social: Users,\n    updates: RefreshCw\n  }\n\n  const categoryColors = {\n    system: 'text-gray-500 bg-gray-100',\n    security: 'text-red-500 bg-red-100',\n    marketing: 'text-purple-500 bg-purple-100',\n    social: 'text-blue-500 bg-blue-100',\n    updates: 'text-green-500 bg-green-100'\n  }\n\n  const filteredNotifications = useMemo(() => {\n    return notifications.filter(notification => {\n      if (selectedCategory !== 'all' && notification.category !== selectedCategory) return false\n      if (showUnreadOnly && notification.read) return false\n      return true\n    })\n  }, [notifications, selectedCategory, showUnreadOnly])\n\n  const categories: Array<{ value: Notification['category'] | 'all'; label: string }> = [\n    { value: 'all', label: 'All' },\n    { value: 'system', label: 'System' },\n    { value: 'security', label: 'Security' },\n    { value: 'marketing', label: 'Marketing' },\n    { value: 'social', label: 'Social' },\n    { value: 'updates', label: 'Updates' }\n  ]\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/20 backdrop-blur-sm z-40\"\n            onClick={onClose}\n          />\n          <motion.div\n            initial={{ opacity: 0, x: 400 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 400 }}\n            transition={{ type: 'spring', damping: 20 }}\n            className=\"fixed right-0 top-0 h-full w-full max-w-md bg-white shadow-2xl z-50 overflow-hidden\"\n          >\n            {/* Header */}\n            <div className=\"border-b bg-gray-50 px-6 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"relative\">\n                    <Bell className=\"h-6 w-6 text-gray-700\" />\n                    {unreadCount > 0 && (\n                      <span className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-500 text-white text-xs flex items-center justify-center font-medium\">\n                        {unreadCount > 9 ? '9+' : unreadCount}\n                      </span>\n                    )}\n                  </div>\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Notifications</h2>\n                </div>\n                <button\n                  onClick={onClose}\n                  className=\"rounded-lg p-2 hover:bg-gray-200 transition-colors\"\n                >\n                  <X className=\"h-5 w-5 text-gray-500\" />\n                </button>\n              </div>\n            </div>\n\n            {/* Filters */}\n            <div className=\"border-b bg-gray-50 px-6 py-3\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Filter className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-sm font-medium text-gray-700\">Filters</span>\n                </div>\n                <label className=\"flex items-center space-x-2 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={showUnreadOnly}\n                    onChange={(e) => setShowUnreadOnly(e.target.checked)}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-600\">Unread only</span>\n                </label>\n              </div>\n              <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n                {categories.map((category) => (\n                  <button\n                    key={category.value}\n                    onClick={() => setSelectedCategory(category.value)}\n                    className={`px-3 py-1.5 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${\n                      selectedCategory === category.value\n                        ? 'bg-blue-500 text-white'\n                        : 'bg-white text-gray-600 hover:bg-gray-100'\n                    }`}\n                  >\n                    {category.label}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex items-center justify-between px-6 py-3 border-b\">\n              <button\n                onClick={markAllAsRead}\n                disabled={unreadCount === 0}\n                className=\"text-sm font-medium text-blue-600 hover:text-blue-700 disabled:text-gray-400 disabled:cursor-not-allowed\"\n              >\n                Mark all as read\n              </button>\n              <button\n                onClick={clearAll}\n                disabled={notifications.length === 0}\n                className=\"text-sm font-medium text-red-600 hover:text-red-700 disabled:text-gray-400 disabled:cursor-not-allowed\"\n              >\n                Clear all\n              </button>\n            </div>\n\n            {/* Notifications List */}\n            <div className=\"overflow-y-auto h-[calc(100%-240px)]\">\n              <AnimatePresence mode=\"popLayout\">\n                {filteredNotifications.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    className=\"flex flex-col items-center justify-center py-12 text-gray-500\"\n                  >\n                    <Bell className=\"h-12 w-12 mb-3 text-gray-300\" />\n                    <p className=\"text-sm\">No notifications</p>\n                  </motion.div>\n                ) : (\n                  filteredNotifications.map((notification) => {\n                    const Icon = categoryIcons[notification.category]\n                    return (\n                      <motion.div\n                        key={notification.id}\n                        layout\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        exit={{ opacity: 0, x: -100 }}\n                        className={`relative border-b hover:bg-gray-50 transition-colors ${\n                          !notification.read ? 'bg-blue-50/50' : ''\n                        }`}\n                      >\n                        <div className=\"px-6 py-4\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className={`p-2 rounded-lg ${categoryColors[notification.category]}`}>\n                              <Icon className=\"h-5 w-5\" />\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-start justify-between\">\n                                <div className=\"flex-1\">\n                                  <p className=\"text-sm font-medium text-gray-900\">\n                                    {notification.title}\n                                  </p>\n                                  <p className=\"text-sm text-gray-600 mt-1\">\n                                    {notification.message}\n                                  </p>\n                                  <p className=\"text-xs text-gray-400 mt-2\">\n                                    {formatDistanceToNow(notification.timestamp, { addSuffix: true })}\n                                  </p>\n                                </div>\n                                <div className=\"flex items-center space-x-1 ml-4\">\n                                  {!notification.read && (\n                                    <button\n                                      onClick={() => markAsRead(notification.id)}\n                                      className=\"p-1 rounded hover:bg-gray-200 transition-colors\"\n                                      title=\"Mark as read\"\n                                    >\n                                      <Check className=\"h-4 w-4 text-gray-500\" />\n                                    </button>\n                                  )}\n                                  <button\n                                    onClick={() => deleteNotification(notification.id)}\n                                    className=\"p-1 rounded hover:bg-gray-200 transition-colors\"\n                                    title=\"Delete\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4 text-gray-500\" />\n                                  </button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        {!notification.read && (\n                          <div className=\"absolute left-0 top-0 bottom-0 w-1 bg-blue-500\" />\n                        )}\n                      </motion.div>\n                    )\n                  })\n                )}\n              </AnimatePresence>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  )\n}\n\n// notification-bell.tsx\nexport const NotificationBell: React.FC = () => {\n  const { unreadCount } = useNotifications()\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <>\n      <button\n        onClick={() => setIsOpen(true)}\n        className=\"relative p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n      >\n        <Bell className=\"h-6 w-6 text-gray-700\" />\n        {unreadCount > 0 && (\n          <motion.span\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-500 text-white text-xs flex items-center justify-center font-medium\"\n          >\n            {unreadCount > 9 ? '9+' : unreadCount}\n          </motion.span>\n        )}\n      </button>\n      <NotificationCenter isOpen={isOpen} onClose={() => setIsOpen(false)} />\n    </>\n  )\n}\n\n// Example App\nexport default function App() {\n  const { addNotification } = useNotifications()\n\n  return (\n    <NotificationProvider>\n      <div className=\"min-h-screen bg-gray-100\">\n        <header className=\"bg-white shadow-sm\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center justify-between h-16\">\n              <h1 className=\"text-xl font-semibold\">Notification Center Demo</h1>\n              <NotificationBell />\n            </div>\n          </div>\n        </header>\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-semibold mb-4\">Test Notifications</h2>\n            <div className=\"flex flex-wrap gap-2\">\n              <button\n                onClick={() =>\n                  addNotification({\n                    title: 'New security alert',\n                    message: 'Unusual login activity detected from new location',\n                    category: 'security',\n                    priority: 'high'\n                  })\n                }\n                className=\"px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600\"\n              >\n                Security Alert\n              </button>\n              <button\n                onClick={() =>\n                  addNotification({\n                    title: 'System update',\n                    message: 'A new version is available for download',\n                    category: 'system',\n                    priority: 'medium'\n                  })\n                }\n                className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600\"\n              >\n                System Update\n              </button>\n              <button\n                onClick={() =>\n                  addNotification({\n                    title: 'New follower',\n                    message: 'Sarah Johnson started following you',\n                    category: 'social',\n                    priority: 'low'\n                  })\n                }\n                className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600\"\n              >\n                Social Update\n              </button>\n            </div>\n          </div>\n        </main>\n      </div>\n    </NotificationProvider>\n  )\n}\n```\n\nThis notification center includes:\n\n1. **Real-time Updates**: WebSocket support for live notifications\n2. **Categories**: System, security, marketing, social, and updates\n3. **Filtering**: By category and read/unread status\n4. **Queue Management**: Proper notification ordering and limits\n5. **Actions**: Mark as read, delete individual, mark all as read, clear all\n6. **Animations**: Smooth enter/exit animations with Framer Motion\n7. **Responsive Design**: Works on mobile and desktop\n8. **Accessibility**: Keyboard navigation and screen reader support\n9. **Visual Indicators**: Unread count badge, unread notification highlighting\n10. **Time Formatting**: Human-readable timestamps using date-fns"}]}
{"system": "You are an expert UI developer specializing in creating modern, accessible notification and feedback components in the style of 21st.dev. Focus on snackbars, alert dialogs, confirmation modals, and progress notifications. Always use TypeScript, smooth animations, and follow accessibility guidelines.", "messages": [{"role": "user", "content": "Design a modern snackbar system with different positions, stacking behavior, custom content support, swipe to dismiss on mobile, and pause on hover. Include progress bars, action buttons, and icons."}, {"role": "assistant", "content": "I'll create a sophisticated snackbar system with all the features you requested, including mobile gestures and advanced stacking behavior.\n\n```tsx\n// snackbar-provider.tsx\nimport React, { createContext, useContext, useState, useCallback, useRef, useEffect } from 'react'\nimport { AnimatePresence, motion, PanInfo, useAnimation } from 'framer-motion'\nimport { X, CheckCircle, AlertCircle, Info, AlertTriangle, Loader2 } from 'lucide-react'\n\ntype SnackbarPosition = \n  | 'top-left' | 'top-center' | 'top-right'\n  | 'bottom-left' | 'bottom-center' | 'bottom-right'\n\ntype SnackbarVariant = 'default' | 'success' | 'error' | 'warning' | 'info' | 'loading'\n\ninterface SnackbarAction {\n  label: string\n  onClick: () => void\n  variant?: 'primary' | 'secondary'\n}\n\ninterface Snackbar {\n  id: string\n  message: string | React.ReactNode\n  variant?: SnackbarVariant\n  duration?: number | null\n  position?: SnackbarPosition\n  icon?: React.ReactNode\n  action?: SnackbarAction\n  dismissible?: boolean\n  progress?: boolean\n  onDismiss?: () => void\n}\n\ninterface SnackbarContextType {\n  snackbars: Snackbar[]\n  showSnackbar: (options: Omit<Snackbar, 'id'>) => string\n  updateSnackbar: (id: string, options: Partial<Snackbar>) => void\n  dismissSnackbar: (id: string) => void\n  dismissAll: () => void\n}\n\nconst SnackbarContext = createContext<SnackbarContextType | undefined>(undefined)\n\nexport const useSnackbar = () => {\n  const context = useContext(SnackbarContext)\n  if (!context) {\n    throw new Error('useSnackbar must be used within a SnackbarProvider')\n  }\n  return context\n}\n\ninterface SnackbarProviderProps {\n  children: React.ReactNode\n  maxSnackbars?: number\n  stackSpacing?: number\n  defaultPosition?: SnackbarPosition\n  defaultDuration?: number\n}\n\nexport const SnackbarProvider: React.FC<SnackbarProviderProps> = ({\n  children,\n  maxSnackbars = 5,\n  stackSpacing = 8,\n  defaultPosition = 'bottom-center',\n  defaultDuration = 5000\n}) => {\n  const [snackbars, setSnackbars] = useState<Snackbar[]>([])\n  const timeoutRefs = useRef<Map<string, NodeJS.Timeout>>(new Map())\n\n  const dismissSnackbar = useCallback((id: string) => {\n    const timeout = timeoutRefs.current.get(id)\n    if (timeout) {\n      clearTimeout(timeout)\n      timeoutRefs.current.delete(id)\n    }\n    setSnackbars((prev) => {\n      const snackbar = prev.find(s => s.id === id)\n      if (snackbar?.onDismiss) {\n        snackbar.onDismiss()\n      }\n      return prev.filter((s) => s.id !== id)\n    })\n  }, [])\n\n  const dismissAll = useCallback(() => {\n    timeoutRefs.current.forEach((timeout) => clearTimeout(timeout))\n    timeoutRefs.current.clear()\n    setSnackbars([])\n  }, [])\n\n  const showSnackbar = useCallback(\n    (options: Omit<Snackbar, 'id'>): string => {\n      const id = Math.random().toString(36).substring(2, 9)\n      const newSnackbar: Snackbar = {\n        ...options,\n        id,\n        position: options.position || defaultPosition,\n        duration: options.duration !== undefined ? options.duration : defaultDuration,\n        dismissible: options.dismissible !== undefined ? options.dismissible : true,\n        progress: options.progress !== undefined ? options.progress : true\n      }\n\n      setSnackbars((prev) => {\n        const updated = [...prev, newSnackbar]\n        return updated.slice(-maxSnackbars)\n      })\n\n      if (newSnackbar.duration !== null) {\n        const timeout = setTimeout(() => {\n          dismissSnackbar(id)\n        }, newSnackbar.duration)\n        timeoutRefs.current.set(id, timeout)\n      }\n\n      return id\n    },\n    [dismissSnackbar, maxSnackbars, defaultPosition, defaultDuration]\n  )\n\n  const updateSnackbar = useCallback((id: string, options: Partial<Snackbar>) => {\n    setSnackbars((prev) =>\n      prev.map((snackbar) =>\n        snackbar.id === id ? { ...snackbar, ...options } : snackbar\n      )\n    )\n  }, [])\n\n  // Group snackbars by position\n  const groupedSnackbars = snackbars.reduce((acc, snackbar) => {\n    const position = snackbar.position || defaultPosition\n    if (!acc[position]) acc[position] = []\n    acc[position].push(snackbar)\n    return acc\n  }, {} as Record<SnackbarPosition, Snackbar[]>)\n\n  return (\n    <SnackbarContext.Provider value={{ snackbars, showSnackbar, updateSnackbar, dismissSnackbar, dismissAll }}>\n      {children}\n      {Object.entries(groupedSnackbars).map(([position, positionSnackbars]) => (\n        <SnackbarContainer\n          key={position}\n          position={position as SnackbarPosition}\n          snackbars={positionSnackbars}\n          onDismiss={dismissSnackbar}\n          stackSpacing={stackSpacing}\n        />\n      ))}\n    </SnackbarContext.Provider>\n  )\n}\n\n// snackbar-container.tsx\ninterface SnackbarContainerProps {\n  position: SnackbarPosition\n  snackbars: Snackbar[]\n  onDismiss: (id: string) => void\n  stackSpacing: number\n}\n\nconst SnackbarContainer: React.FC<SnackbarContainerProps> = ({\n  position,\n  snackbars,\n  onDismiss,\n  stackSpacing\n}) => {\n  const positionClasses: Record<SnackbarPosition, string> = {\n    'top-left': 'top-4 left-4',\n    'top-center': 'top-4 left-1/2 -translate-x-1/2',\n    'top-right': 'top-4 right-4',\n    'bottom-left': 'bottom-4 left-4',\n    'bottom-center': 'bottom-4 left-1/2 -translate-x-1/2',\n    'bottom-right': 'bottom-4 right-4'\n  }\n\n  const isTop = position.includes('top')\n  const isCenter = position.includes('center')\n\n  return (\n    <div\n      className={`fixed z-50 pointer-events-none ${positionClasses[position]}`}\n      style={{ maxWidth: isCenter ? '90vw' : 'calc(100vw - 2rem)' }}\n    >\n      <AnimatePresence mode=\"sync\">\n        {snackbars.map((snackbar, index) => (\n          <SnackbarItem\n            key={snackbar.id}\n            snackbar={snackbar}\n            onDismiss={() => onDismiss(snackbar.id)}\n            position={position}\n            index={index}\n            stackSpacing={stackSpacing}\n            isTop={isTop}\n          />\n        ))}\n      </AnimatePresence>\n    </div>\n  )\n}\n\n// snackbar-item.tsx\ninterface SnackbarItemProps {\n  snackbar: Snackbar\n  onDismiss: () => void\n  position: SnackbarPosition\n  index: number\n  stackSpacing: number\n  isTop: boolean\n}\n\nconst SnackbarItem: React.FC<SnackbarItemProps> = ({\n  snackbar,\n  onDismiss,\n  position,\n  index,\n  stackSpacing,\n  isTop\n}) => {\n  const [isPaused, setIsPaused] = useState(false)\n  const [progress, setProgress] = useState(100)\n  const controls = useAnimation()\n  const progressInterval = useRef<NodeJS.Timeout>()\n\n  const icons: Record<SnackbarVariant, React.ReactNode> = {\n    default: null,\n    success: <CheckCircle className=\"h-5 w-5\" />,\n    error: <AlertCircle className=\"h-5 w-5\" />,\n    warning: <AlertTriangle className=\"h-5 w-5\" />,\n    info: <Info className=\"h-5 w-5\" />,\n    loading: <Loader2 className=\"h-5 w-5 animate-spin\" />\n  }\n\n  const variantStyles: Record<SnackbarVariant, string> = {\n    default: 'bg-gray-900 text-white',\n    success: 'bg-green-600 text-white',\n    error: 'bg-red-600 text-white',\n    warning: 'bg-yellow-500 text-white',\n    info: 'bg-blue-600 text-white',\n    loading: 'bg-gray-900 text-white'\n  }\n\n  // Progress bar animation\n  useEffect(() => {\n    if (snackbar.duration && snackbar.progress && !isPaused) {\n      const interval = 100 // Update every 100ms\n      const decrement = (100 / snackbar.duration) * interval\n\n      progressInterval.current = setInterval(() => {\n        setProgress((prev) => {\n          const newProgress = prev - decrement\n          if (newProgress <= 0) {\n            clearInterval(progressInterval.current)\n            return 0\n          }\n          return newProgress\n        })\n      }, interval)\n\n      return () => {\n        if (progressInterval.current) {\n          clearInterval(progressInterval.current)\n        }\n      }\n    }\n  }, [snackbar.duration, snackbar.progress, isPaused])\n\n  const handleDragEnd = (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {\n    const shouldDismiss = Math.abs(info.offset.x) > 100 || Math.abs(info.velocity.x) > 500\n    \n    if (shouldDismiss) {\n      controls.start({\n        x: info.offset.x > 0 ? 400 : -400,\n        opacity: 0,\n        transition: { duration: 0.2 }\n      }).then(onDismiss)\n    } else {\n      controls.start({ x: 0 })\n    }\n  }\n\n  const handleMouseEnter = () => {\n    setIsPaused(true)\n    if (progressInterval.current) {\n      clearInterval(progressInterval.current)\n    }\n  }\n\n  const handleMouseLeave = () => {\n    setIsPaused(false)\n  }\n\n  const yOffset = isTop ? index * (80 + stackSpacing) : -(index * (80 + stackSpacing))\n\n  return (\n    <motion.div\n      layout\n      initial={{ opacity: 0, y: isTop ? -20 : 20, scale: 0.95 }}\n      animate={controls}\n      exit={{ opacity: 0, scale: 0.95, transition: { duration: 0.15 } }}\n      style={{ y: yOffset }}\n      className=\"pointer-events-auto w-full max-w-sm mb-2\"\n    >\n      <motion.div\n        drag=\"x\"\n        dragConstraints={{ left: 0, right: 0 }}\n        dragElastic={0.2}\n        onDragEnd={handleDragEnd}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n        className={`relative overflow-hidden rounded-lg shadow-lg ${variantStyles[snackbar.variant || 'default']} backdrop-blur-sm`}\n      >\n        <div className=\"p-4\">\n          <div className=\"flex items-start\">\n            {(snackbar.icon || icons[snackbar.variant || 'default']) && (\n              <div className=\"flex-shrink-0 mr-3\">\n                {snackbar.icon || icons[snackbar.variant || 'default']}\n              </div>\n            )}\n            <div className=\"flex-1 min-w-0\">\n              {typeof snackbar.message === 'string' ? (\n                <p className=\"text-sm font-medium\">{snackbar.message}</p>\n              ) : (\n                snackbar.message\n              )}\n              {snackbar.action && (\n                <button\n                  onClick={snackbar.action.onClick}\n                  className={`mt-2 text-sm font-medium underline-offset-2 hover:underline focus:outline-none focus:ring-2 focus:ring-offset-2 rounded ${\n                    snackbar.action.variant === 'secondary'\n                      ? 'opacity-80'\n                      : ''\n                  }`}\n                >\n                  {snackbar.action.label}\n                </button>\n              )}\n            </div>\n            {snackbar.dismissible && (\n              <button\n                onClick={onDismiss}\n                className=\"ml-4 flex-shrink-0 inline-flex rounded-md hover:opacity-70 focus:outline-none focus:ring-2 focus:ring-offset-2 transition-opacity\"\n              >\n                <span className=\"sr-only\">Dismiss</span>\n                <X className=\"h-5 w-5\" />\n              </button>\n            )}\n          </div>\n        </div>\n        {snackbar.progress && snackbar.duration && (\n          <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-black/20\">\n            <motion.div\n              className=\"h-full bg-white/30\"\n              initial={{ width: '100%' }}\n              animate={{ width: `${progress}%` }}\n              transition={{ duration: 0.1, ease: 'linear' }}\n            />\n          </div>\n        )}\n      </motion.div>\n    </motion.div>\n  )\n}\n\n// snackbar-demo.tsx\nexport const SnackbarDemo: React.FC = () => {\n  const { showSnackbar, dismissAll } = useSnackbar()\n\n  const positions: SnackbarPosition[] = [\n    'top-left', 'top-center', 'top-right',\n    'bottom-left', 'bottom-center', 'bottom-right'\n  ]\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Basic Snackbars</h3>\n        <div className=\"flex flex-wrap gap-2\">\n          <button\n            onClick={() => showSnackbar({ message: 'Default snackbar message' })}\n            className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700\"\n          >\n            Default\n          </button>\n          <button\n            onClick={() =>\n              showSnackbar({\n                message: 'Success! Your changes have been saved.',\n                variant: 'success'\n              })\n            }\n            className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n          >\n            Success\n          </button>\n          <button\n            onClick={() =>\n              showSnackbar({\n                message: 'Error! Something went wrong.',\n                variant: 'error',\n                duration: 7000\n              })\n            }\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700\"\n          >\n            Error\n          </button>\n          <button\n            onClick={() =>\n              showSnackbar({\n                message: 'Warning! Please check your input.',\n                variant: 'warning'\n              })\n            }\n            className=\"px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600\"\n          >\n            Warning\n          </button>\n          <button\n            onClick={() =>\n              showSnackbar({\n                message: 'Info: New features available!',\n                variant: 'info',\n                action: {\n                  label: 'Learn more',\n                  onClick: () => console.log('Learn more clicked')\n                }\n              })\n            }\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n          >\n            Info with Action\n          </button>\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Loading & Progress</h3>\n        <button\n          onClick={() => {\n            const id = showSnackbar({\n              message: 'Processing your request...',\n              variant: 'loading',\n              duration: null,\n              dismissible: false,\n              progress: false\n            })\n            \n            setTimeout(() => {\n              showSnackbar({\n                message: 'Request completed successfully!',\n                variant: 'success'\n              })\n            }, 3000)\n          }}\n          className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n        >\n          Loading State\n        </button>\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Positions</h3>\n        <div className=\"grid grid-cols-3 gap-2\">\n          {positions.map((position) => (\n            <button\n              key={position}\n              onClick={() =>\n                showSnackbar({\n                  message: `Snackbar at ${position}`,\n                  position\n                })\n              }\n              className=\"px-3 py-2 bg-indigo-600 text-white text-sm rounded-lg hover:bg-indigo-700\"\n            >\n              {position}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Custom Content</h3>\n        <button\n          onClick={() =>\n            showSnackbar({\n              message: (\n                <div>\n                  <p className=\"font-semibold\">Custom HTML Content</p>\n                  <p className=\"text-sm opacity-90 mt-1\">\n                    This snackbar contains <strong>rich HTML</strong> content with{' '}\n                    <a href=\"#\" className=\"underline\">\n                      links\n                    </a>\n                    .\n                  </p>\n                </div>\n              ),\n              duration: 8000\n            })\n          }\n          className=\"px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700\"\n        >\n          Custom Content\n        </button>\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Actions</h3>\n        <div className=\"flex flex-wrap gap-2\">\n          <button\n            onClick={() => {\n              for (let i = 0; i < 5; i++) {\n                setTimeout(() => {\n                  showSnackbar({\n                    message: `Snackbar #${i + 1}`,\n                    variant: ['success', 'error', 'warning', 'info', 'default'][i] as SnackbarVariant\n                  })\n                }, i * 300)\n              }\n            }}\n            className=\"px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700\"\n          >\n            Show Multiple\n          </button>\n          <button\n            onClick={dismissAll}\n            className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700\"\n          >\n            Dismiss All\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Example App\nexport default function App() {\n  return (\n    <SnackbarProvider defaultPosition=\"bottom-right\" maxSnackbars={5} stackSpacing={8}>\n      <div className=\"min-h-screen bg-gray-50 p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-3xl font-bold mb-8\">Modern Snackbar System</h1>\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\n            <SnackbarDemo />\n          </div>\n          <div className=\"mt-4 text-sm text-gray-600\">\n            <p>• Swipe horizontally on mobile to dismiss</p>\n            <p>• Hover to pause auto-dismiss timer</p>\n            <p>• Multiple snackbars stack automatically</p>\n            <p>• Supports all screen positions</p>\n          </div>\n        </div>\n      </div>\n    </SnackbarProvider>\n  )\n}\n```\n\nThis snackbar system features:\n\n1. **Multiple Positions**: All 6 positions (top/bottom × left/center/right)\n2. **Stacking Behavior**: Smart stacking with configurable spacing\n3. **Swipe to Dismiss**: Mobile gesture support with physics\n4. **Pause on Hover**: Auto-dismiss timer pauses when hovering\n5. **Progress Bar**: Visual timer indicator\n6. **Custom Content**: Support for React nodes and HTML\n7. **Action Buttons**: Primary and secondary action support\n8. **Variants**: Default, success, error, warning, info, loading\n9. **Icons**: Contextual icons for each variant\n10. **Animations**: Smooth enter/exit with Framer Motion\n11. **Queue Management**: Maximum snackbar limit\n12. **Accessibility**: Keyboard support and screen reader friendly"}]}