{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible dashboard components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, responsive design, and modern patterns."}, {"role": "user", "content": "Create a modern analytics dashboard with stats cards, charts, and recent activity. Include dark mode support."}, {"role": "assistant", "content": "```tsx\nimport React, { useState } from 'react'\nimport { motion } from 'framer-motion'\nimport { TrendingUp, TrendingDown, Users, DollarSign, ShoppingCart, Activity, Moon, Sun, MoreVertical, Download, Filter } from 'lucide-react'\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'\n\ninterface StatCard {\n  title: string\n  value: string\n  change: number\n  icon: React.ReactNode\n  color: string\n}\n\ninterface ActivityItem {\n  id: string\n  user: string\n  action: string\n  timestamp: string\n  avatar: string\n}\n\nconst revenueData = [\n  { month: 'Jan', revenue: 4000 },\n  { month: 'Feb', revenue: 3000 },\n  { month: 'Mar', revenue: 5000 },\n  { month: 'Apr', revenue: 4500 },\n  { month: 'May', revenue: 6000 },\n  { month: 'Jun', revenue: 5500 }\n]\n\nconst categoryData = [\n  { name: 'Electronics', value: 35, color: '#3B82F6' },\n  { name: 'Clothing', value: 25, color: '#8B5CF6' },\n  { name: 'Food', value: 20, color: '#10B981' },\n  { name: 'Books', value: 15, color: '#F59E0B' },\n  { name: 'Other', value: 5, color: '#EF4444' }\n]\n\nconst trafficData = [\n  { day: 'Mon', visits: 2400 },\n  { day: 'Tue', visits: 1398 },\n  { day: 'Wed', visits: 3800 },\n  { day: 'Thu', visits: 3908 },\n  { day: 'Fri', visits: 4800 },\n  { day: 'Sat', visits: 3800 },\n  { day: 'Sun', visits: 4300 }\n]\n\nexport function AnalyticsDashboard() {\n  const [darkMode, setDarkMode] = useState(false)\n  const [dateRange, setDateRange] = useState('Last 7 days')\n\n  const statCards: StatCard[] = [\n    {\n      title: 'Total Revenue',\n      value: '$48,574',\n      change: 12.5,\n      icon: <DollarSign className=\"w-6 h-6\" />,\n      color: 'bg-blue-500'\n    },\n    {\n      title: 'Total Users',\n      value: '3,842',\n      change: 8.2,\n      icon: <Users className=\"w-6 h-6\" />,\n      color: 'bg-purple-500'\n    },\n    {\n      title: 'Total Orders',\n      value: '1,245',\n      change: -3.1,\n      icon: <ShoppingCart className=\"w-6 h-6\" />,\n      color: 'bg-green-500'\n    },\n    {\n      title: 'Active Sessions',\n      value: '589',\n      change: 15.7,\n      icon: <Activity className=\"w-6 h-6\" />,\n      color: 'bg-orange-500'\n    }\n  ]\n\n  const recentActivity: ActivityItem[] = [\n    {\n      id: '1',\n      user: 'Sarah Johnson',\n      action: 'purchased Premium Plan',\n      timestamp: '2 minutes ago',\n      avatar: 'https://i.pravatar.cc/150?img=1'\n    },\n    {\n      id: '2',\n      user: 'Mike Chen',\n      action: 'updated profile settings',\n      timestamp: '15 minutes ago',\n      avatar: 'https://i.pravatar.cc/150?img=2'\n    },\n    {\n      id: '3',\n      user: 'Emma Wilson',\n      action: 'completed onboarding',\n      timestamp: '1 hour ago',\n      avatar: 'https://i.pravatar.cc/150?img=3'\n    },\n    {\n      id: '4',\n      user: 'James Brown',\n      action: 'uploaded 3 documents',\n      timestamp: '3 hours ago',\n      avatar: 'https://i.pravatar.cc/150?img=4'\n    }\n  ]\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>\n      {/* Header */}\n      <header className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-b`}>\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>\n                Analytics Dashboard\n              </h1>\n              <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'} mt-1`}>\n                Welcome back! Here's what's happening with your business today.\n              </p>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <select\n                value={dateRange}\n                onChange={(e) => setDateRange(e.target.value)}\n                className={`px-4 py-2 rounded-lg border ${darkMode\n                  ? 'bg-gray-700 border-gray-600 text-white'\n                  : 'bg-white border-gray-300 text-gray-900'\n                } focus:outline-none focus:ring-2 focus:ring-blue-500`}\n              >\n                <option>Last 7 days</option>\n                <option>Last 30 days</option>\n                <option>Last 90 days</option>\n                <option>Custom range</option>\n              </select>\n              <button\n                onClick={() => setDarkMode(!darkMode)}\n                className={`p-2 rounded-lg ${darkMode\n                  ? 'bg-gray-700 text-yellow-400 hover:bg-gray-600'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                } transition-colors`}\n              >\n                {darkMode ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-6\">\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {statCards.map((stat, index) => (\n            <motion.div\n              key={stat.title}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-lg p-6`}\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`${stat.color} bg-opacity-20 p-3 rounded-xl`}>\n                  <div className={`${stat.color} bg-opacity-100 text-white rounded-lg p-2`}>\n                    {stat.icon}\n                  </div>\n                </div>\n                <button className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'} transition-colors`}>\n                  <MoreVertical className={`w-5 h-5 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`} />\n                </button>\n              </div>\n              <h3 className={`text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                {stat.title}\n              </h3>\n              <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'} mt-2`}>\n                {stat.value}\n              </p>\n              <div className=\"flex items-center gap-2 mt-4\">\n                <div className={`flex items-center gap-1 text-sm font-medium ${\n                  stat.change > 0 ? 'text-green-500' : 'text-red-500'\n                }`}>\n                  {stat.change > 0 ? (\n                    <TrendingUp className=\"w-4 h-4\" />\n                  ) : (\n                    <TrendingDown className=\"w-4 h-4\" />\n                  )}\n                  {Math.abs(stat.change)}%\n                </div>\n                <span className={`text-sm ${darkMode ? 'text-gray-500' : 'text-gray-600'}`}>\n                  vs last period\n                </span>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n\n        {/* Charts Row */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Revenue Chart */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-lg p-6`}\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className={`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>\n                Revenue Overview\n              </h3>\n              <button className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'} transition-colors`}>\n                <Download className={`w-5 h-5 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`} />\n              </button>\n            </div>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={revenueData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke={darkMode ? '#374151' : '#E5E7EB'} />\n                <XAxis dataKey=\"month\" stroke={darkMode ? '#9CA3AF' : '#6B7280'} />\n                <YAxis stroke={darkMode ? '#9CA3AF' : '#6B7280'} />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: darkMode ? '#1F2937' : '#FFFFFF',\n                    borderColor: darkMode ? '#374151' : '#E5E7EB',\n                    borderRadius: '0.5rem'\n                  }}\n                  labelStyle={{ color: darkMode ? '#F3F4F6' : '#111827' }}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"revenue\"\n                  stroke=\"#3B82F6\"\n                  strokeWidth={3}\n                  dot={{ fill: '#3B82F6', r: 6 }}\n                  activeDot={{ r: 8 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </motion.div>\n\n          {/* Traffic Chart */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.5 }}\n            className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-lg p-6`}\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className={`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>\n                Weekly Traffic\n              </h3>\n              <button className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'} transition-colors`}>\n                <Filter className={`w-5 h-5 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`} />\n              </button>\n            </div>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={trafficData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke={darkMode ? '#374151' : '#E5E7EB'} />\n                <XAxis dataKey=\"day\" stroke={darkMode ? '#9CA3AF' : '#6B7280'} />\n                <YAxis stroke={darkMode ? '#9CA3AF' : '#6B7280'} />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: darkMode ? '#1F2937' : '#FFFFFF',\n                    borderColor: darkMode ? '#374151' : '#E5E7EB',\n                    borderRadius: '0.5rem'\n                  }}\n                  labelStyle={{ color: darkMode ? '#F3F4F6' : '#111827' }}\n                />\n                <Bar\n                  dataKey=\"visits\"\n                  fill=\"#8B5CF6\"\n                  radius={[8, 8, 0, 0]}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </motion.div>\n        </div>\n\n        {/* Bottom Row */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Category Distribution */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.6 }}\n            className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-lg p-6`}\n          >\n            <h3 className={`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-900'} mb-6`}>\n              Sales by Category\n            </h3>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <PieChart>\n                <Pie\n                  data={categoryData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {categoryData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: darkMode ? '#1F2937' : '#FFFFFF',\n                    borderColor: darkMode ? '#374151' : '#E5E7EB',\n                    borderRadius: '0.5rem'\n                  }}\n                  labelStyle={{ color: darkMode ? '#F3F4F6' : '#111827' }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n            <div className=\"mt-4 space-y-2\">\n              {categoryData.map((category) => (\n                <div key={category.name} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-3 h-3 rounded-full\"\n                      style={{ backgroundColor: category.color }}\n                    />\n                    <span className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      {category.name}\n                    </span>\n                  </div>\n                  <span className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    {category.value}%\n                  </span>\n                </div>\n              ))}\n            </div>\n          </motion.div>\n\n          {/* Recent Activity */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.7 }}\n            className={`lg:col-span-2 ${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-lg p-6`}\n          >\n            <h3 className={`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-900'} mb-6`}>\n              Recent Activity\n            </h3>\n            <div className=\"space-y-4\">\n              {recentActivity.map((activity, index) => (\n                <motion.div\n                  key={activity.id}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: 0.7 + index * 0.1 }}\n                  className={`flex items-center gap-4 p-4 rounded-xl ${\n                    darkMode ? 'bg-gray-700/50' : 'bg-gray-50'\n                  } hover:bg-opacity-80 transition-colors`}\n                >\n                  <img\n                    src={activity.avatar}\n                    alt={activity.user}\n                    className=\"w-10 h-10 rounded-full\"\n                  />\n                  <div className=\"flex-1\">\n                    <p className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {activity.user}\n                    </p>\n                    <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {activity.action}\n                    </p>\n                  </div>\n                  <span className={`text-sm ${darkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                    {activity.timestamp}\n                  </span>\n                </motion.div>\n              ))}\n            </div>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible dashboard components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, responsive design, and modern patterns."}, {"role": "user", "content": "Build a project management dashboard with kanban board, task statistics, team members, and project timeline."}, {"role": "assistant", "content": "```tsx\nimport React, { useState } from 'react'\nimport { motion, AnimatePresence, Reorder } from 'framer-motion'\nimport { Plus, MoreHorizontal, Clock, CheckCircle, AlertCircle, Calendar, Users, TrendingUp, Filter, Search } from 'lucide-react'\n\ninterface Task {\n  id: string\n  title: string\n  description: string\n  assignee: TeamMember\n  priority: 'low' | 'medium' | 'high'\n  dueDate: string\n  labels: string[]\n}\n\ninterface Column {\n  id: string\n  title: string\n  tasks: Task[]\n  color: string\n}\n\ninterface TeamMember {\n  id: string\n  name: string\n  avatar: string\n  role: string\n  status: 'online' | 'offline' | 'busy'\n}\n\ninterface ProjectMilestone {\n  id: string\n  title: string\n  date: string\n  completed: boolean\n}\n\nconst teamMembers: TeamMember[] = [\n  { id: '1', name: 'Sarah Chen', avatar: 'https://i.pravatar.cc/150?img=1', role: 'Project Manager', status: 'online' },\n  { id: '2', name: 'Mike Johnson', avatar: 'https://i.pravatar.cc/150?img=2', role: 'Developer', status: 'online' },\n  { id: '3', name: 'Emily Davis', avatar: 'https://i.pravatar.cc/150?img=3', role: 'Designer', status: 'busy' },\n  { id: '4', name: 'Tom Wilson', avatar: 'https://i.pravatar.cc/150?img=4', role: 'Developer', status: 'offline' },\n  { id: '5', name: 'Lisa Anderson', avatar: 'https://i.pravatar.cc/150?img=5', role: 'QA Engineer', status: 'online' }\n]\n\nconst initialColumns: Column[] = [\n  {\n    id: 'todo',\n    title: 'To Do',\n    color: '#6B7280',\n    tasks: [\n      {\n        id: '1',\n        title: 'Design new landing page',\n        description: 'Create mockups for the new marketing landing page',\n        assignee: teamMembers[2],\n        priority: 'high',\n        dueDate: '2024-03-25',\n        labels: ['design', 'marketing']\n      },\n      {\n        id: '2',\n        title: 'Implement user authentication',\n        description: 'Add OAuth2 integration for Google and GitHub',\n        assignee: teamMembers[1],\n        priority: 'high',\n        dueDate: '2024-03-28',\n        labels: ['backend', 'security']\n      }\n    ]\n  },\n  {\n    id: 'progress',\n    title: 'In Progress',\n    color: '#3B82F6',\n    tasks: [\n      {\n        id: '3',\n        title: 'Refactor dashboard components',\n        description: 'Optimize performance and improve code structure',\n        assignee: teamMembers[3],\n        priority: 'medium',\n        dueDate: '2024-03-26',\n        labels: ['frontend', 'refactoring']\n      }\n    ]\n  },\n  {\n    id: 'review',\n    title: 'In Review',\n    color: '#F59E0B',\n    tasks: [\n      {\n        id: '4',\n        title: 'API documentation',\n        description: 'Document all REST API endpoints',\n        assignee: teamMembers[1],\n        priority: 'low',\n        dueDate: '2024-03-24',\n        labels: ['documentation']\n      }\n    ]\n  },\n  {\n    id: 'done',\n    title: 'Done',\n    color: '#10B981',\n    tasks: [\n      {\n        id: '5',\n        title: 'Setup CI/CD pipeline',\n        description: 'Configure GitHub Actions for automated deployment',\n        assignee: teamMembers[3],\n        priority: 'medium',\n        dueDate: '2024-03-22',\n        labels: ['devops']\n      }\n    ]\n  }\n]\n\nconst milestones: ProjectMilestone[] = [\n  { id: '1', title: 'Project Kickoff', date: '2024-03-01', completed: true },\n  { id: '2', title: 'Alpha Release', date: '2024-03-15', completed: true },\n  { id: '3', title: 'Beta Release', date: '2024-04-01', completed: false },\n  { id: '4', title: 'Final Launch', date: '2024-04-15', completed: false }\n]\n\nexport function ProjectManagementDashboard() {\n  const [columns, setColumns] = useState(initialColumns)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [selectedPriority, setSelectedPriority] = useState<string>('all')\n  const [showNewTaskModal, setShowNewTaskModal] = useState(false)\n  const [selectedColumn, setSelectedColumn] = useState<string>('')\n\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return\n\n    const { source, destination } = result\n    const sourceColumn = columns.find(col => col.id === source.droppableId)\n    const destColumn = columns.find(col => col.id === destination.droppableId)\n\n    if (!sourceColumn || !destColumn) return\n\n    const sourceTasks = [...sourceColumn.tasks]\n    const destTasks = sourceColumn === destColumn ? sourceTasks : [...destColumn.tasks]\n    const [removed] = sourceTasks.splice(source.index, 1)\n    destTasks.splice(destination.index, 0, removed)\n\n    setColumns(columns.map(col => {\n      if (col.id === source.droppableId) {\n        return { ...col, tasks: sourceTasks }\n      }\n      if (col.id === destination.droppableId) {\n        return { ...col, tasks: destTasks }\n      }\n      return col\n    }))\n  }\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-red-600 bg-red-50 border-red-200'\n      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200'\n      case 'low': return 'text-green-600 bg-green-50 border-green-200'\n      default: return 'text-gray-600 bg-gray-50 border-gray-200'\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'online': return 'bg-green-500'\n      case 'busy': return 'bg-yellow-500'\n      case 'offline': return 'bg-gray-400'\n      default: return 'bg-gray-400'\n    }\n  }\n\n  const totalTasks = columns.reduce((acc, col) => acc + col.tasks.length, 0)\n  const completedTasks = columns.find(col => col.id === 'done')?.tasks.length || 0\n  const inProgressTasks = columns.find(col => col.id === 'progress')?.tasks.length || 0\n  const completionRate = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Project Dashboard</h1>\n              <p className=\"text-sm text-gray-600 mt-1\">Web Platform Redesign</p>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search tasks...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n              <button className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n                <Plus className=\"w-5 h-5\" />\n                New Task\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-6\">\n        {/* Stats Row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-3 bg-blue-50 rounded-lg\">\n                <CheckCircle className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <span className=\"text-sm font-medium text-green-600\">+12%</span>\n            </div>\n            <h3 className=\"text-2xl font-bold text-gray-900\">{completionRate}%</h3>\n            <p className=\"text-sm text-gray-600 mt-1\">Completion Rate</p>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-3 bg-purple-50 rounded-lg\">\n                <TrendingUp className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <span className=\"text-sm font-medium text-gray-600\">{totalTasks}</span>\n            </div>\n            <h3 className=\"text-2xl font-bold text-gray-900\">{inProgressTasks}</h3>\n            <p className=\"text-sm text-gray-600 mt-1\">In Progress</p>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-3 bg-green-50 rounded-lg\">\n                <Users className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <span className=\"text-sm font-medium text-gray-600\">Active</span>\n            </div>\n            <h3 className=\"text-2xl font-bold text-gray-900\">{teamMembers.length}</h3>\n            <p className=\"text-sm text-gray-600 mt-1\">Team Members</p>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-3 bg-orange-50 rounded-lg\">\n                <Clock className=\"w-6 h-6 text-orange-600\" />\n              </div>\n              <span className=\"text-sm font-medium text-red-600\">2 overdue</span>\n            </div>\n            <h3 className=\"text-2xl font-bold text-gray-900\">14 days</h3>\n            <p className=\"text-sm text-gray-600 mt-1\">Until Beta</p>\n          </motion.div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Kanban Board */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Task Board</h2>\n                <div className=\"flex items-center gap-2\">\n                  <select\n                    value={selectedPriority}\n                    onChange={(e) => setSelectedPriority(e.target.value)}\n                    className=\"px-3 py-1.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"all\">All Priorities</option>\n                    <option value=\"high\">High Priority</option>\n                    <option value=\"medium\">Medium Priority</option>\n                    <option value=\"low\">Low Priority</option>\n                  </select>\n                  <button className=\"p-1.5 hover:bg-gray-100 rounded-lg transition-colors\">\n                    <Filter className=\"w-5 h-5 text-gray-600\" />\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                {columns.map((column) => (\n                  <div key={column.id} className=\"bg-gray-50 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: column.color }}\n                        />\n                        <h3 className=\"font-medium text-gray-900\">{column.title}</h3>\n                        <span className=\"text-sm text-gray-500\">({column.tasks.length})</span>\n                      </div>\n                      <button className=\"p-1 hover:bg-gray-200 rounded transition-colors\">\n                        <Plus className=\"w-4 h-4 text-gray-600\" />\n                      </button>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      {column.tasks.map((task) => (\n                        <motion.div\n                          key={task.id}\n                          layout\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          className=\"bg-white rounded-lg p-4 shadow-sm border border-gray-200 cursor-pointer hover:shadow-md transition-shadow\"\n                        >\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <h4 className=\"text-sm font-medium text-gray-900 flex-1\">\n                              {task.title}\n                            </h4>\n                            <button className=\"p-1 hover:bg-gray-100 rounded transition-colors\">\n                              <MoreHorizontal className=\"w-4 h-4 text-gray-400\" />\n                            </button>\n                          </div>\n                          <p className=\"text-xs text-gray-600 mb-3\">{task.description}</p>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className={`text-xs px-2 py-1 rounded-full border ${getPriorityColor(task.priority)}`}>\n                                {task.priority}\n                              </span>\n                              <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                                <Calendar className=\"w-3 h-3\" />\n                                {new Date(task.dueDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                              </div>\n                            </div>\n                            <img\n                              src={task.assignee.avatar}\n                              alt={task.assignee.name}\n                              className=\"w-6 h-6 rounded-full\"\n                              title={task.assignee.name}\n                            />\n                          </div>\n                          {task.labels.length > 0 && (\n                            <div className=\"flex flex-wrap gap-1 mt-3\">\n                              {task.labels.map((label) => (\n                                <span\n                                  key={label}\n                                  className=\"text-xs px-2 py-0.5 bg-gray-100 text-gray-600 rounded\"\n                                >\n                                  {label}\n                                </span>\n                              ))}\n                            </div>\n                          )}\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Team Members */}\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Team Members</h3>\n              <div className=\"space-y-3\">\n                {teamMembers.map((member) => (\n                  <div key={member.id} className=\"flex items-center gap-3\">\n                    <div className=\"relative\">\n                      <img\n                        src={member.avatar}\n                        alt={member.name}\n                        className=\"w-10 h-10 rounded-full\"\n                      />\n                      <div className={`absolute bottom-0 right-0 w-3 h-3 rounded-full border-2 border-white ${getStatusColor(member.status)}`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-gray-900\">{member.name}</p>\n                      <p className=\"text-xs text-gray-500\">{member.role}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Project Timeline */}\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Project Timeline</h3>\n              <div className=\"space-y-4\">\n                {milestones.map((milestone, index) => (\n                  <div key={milestone.id} className=\"flex items-start gap-3\">\n                    <div className=\"relative\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        milestone.completed ? 'bg-green-100' : 'bg-gray-100'\n                      }`}>\n                        {milestone.completed ? (\n                          <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                        ) : (\n                          <div className=\"w-2 h-2 rounded-full bg-gray-400\" />\n                        )}\n                      </div>\n                      {index < milestones.length - 1 && (\n                        <div className={`absolute top-8 left-1/2 -translate-x-1/2 w-0.5 h-8 ${\n                          milestone.completed ? 'bg-green-300' : 'bg-gray-300'\n                        }`} />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className={`text-sm font-medium ${\n                        milestone.completed ? 'text-gray-900' : 'text-gray-600'\n                      }`}>\n                        {milestone.title}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {new Date(milestone.date).toLocaleDateString('en-US', {\n                          month: 'long',\n                          day: 'numeric',\n                          year: 'numeric'\n                        })}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible dashboard components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, responsive design, and modern patterns."}, {"role": "user", "content": "Create a financial dashboard with portfolio overview, asset allocation chart, transaction history, and market trends."}, {"role": "assistant", "content": "```tsx\nimport React, { useState } from 'react'\nimport { motion } from 'framer-motion'\nimport { TrendingUp, TrendingDown, DollarSign, PieChart, Activity, ArrowUpRight, ArrowDownLeft, Calendar, Filter, Download, Bell, Briefcase } from 'lucide-react'\nimport { LineChart, Line, AreaChart, Area, PieChart as RechartsPieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts'\n\ninterface Asset {\n  symbol: string\n  name: string\n  amount: number\n  value: number\n  change: number\n  changePercent: number\n  allocation: number\n}\n\ninterface Transaction {\n  id: string\n  type: 'buy' | 'sell' | 'dividend'\n  asset: string\n  amount: number\n  price: number\n  total: number\n  date: string\n  status: 'completed' | 'pending'\n}\n\ninterface MarketData {\n  time: string\n  value: number\n}\n\nconst portfolioValue = 125420.89\nconst totalGain = 15420.89\nconst totalGainPercent = 14.2\nconst todayChange = 1245.67\nconst todayChangePercent = 1.02\n\nconst assets: Asset[] = [\n  { symbol: 'AAPL', name: 'Apple Inc.', amount: 50, value: 8750, change: 125, changePercent: 1.45, allocation: 25 },\n  { symbol: 'GOOGL', name: 'Alphabet Inc.', amount: 10, value: 14200, change: -89, changePercent: -0.62, allocation: 35 },\n  { symbol: 'MSFT', name: 'Microsoft Corp.', amount: 30, value: 10500, change: 210, changePercent: 2.04, allocation: 20 },\n  { symbol: 'AMZN', name: 'Amazon.com Inc.', amount: 15, value: 5250, change: 45, changePercent: 0.86, allocation: 15 },\n  { symbol: 'TSLA', name: 'Tesla Inc.', amount: 5, value: 1250, change: -30, changePercent: -2.34, allocation: 5 }\n]\n\nconst transactions: Transaction[] = [\n  { id: '1', type: 'buy', asset: 'AAPL', amount: 10, price: 175, total: 1750, date: '2024-03-20', status: 'completed' },\n  { id: '2', type: 'sell', asset: 'GOOGL', amount: 5, price: 142, total: 710, date: '2024-03-19', status: 'completed' },\n  { id: '3', type: 'dividend', asset: 'MSFT', amount: 30, price: 0.68, total: 20.40, date: '2024-03-18', status: 'completed' },\n  { id: '4', type: 'buy', asset: 'AMZN', amount: 15, price: 178, total: 2670, date: '2024-03-17', status: 'pending' },\n  { id: '5', type: 'sell', asset: 'TSLA', amount: 3, price: 165, total: 495, date: '2024-03-16', status: 'completed' }\n]\n\nconst marketData: MarketData[] = [\n  { time: '09:00', value: 124000 },\n  { time: '10:00', value: 124300 },\n  { time: '11:00', value: 124800 },\n  { time: '12:00', value: 125100 },\n  { time: '13:00', value: 124900 },\n  { time: '14:00', value: 125200 },\n  { time: '15:00', value: 125420 }\n]\n\nconst monthlyPerformance = [\n  { month: 'Jan', portfolio: 110000, market: 108000 },\n  { month: 'Feb', portfolio: 115000, market: 112000 },\n  { month: 'Mar', portfolio: 118000, market: 115000 },\n  { month: 'Apr', portfolio: 122000, market: 119000 },\n  { month: 'May', portfolio: 125420, market: 122000 }\n]\n\nconst allocationData = assets.map(asset => ({\n  name: asset.symbol,\n  value: asset.allocation,\n  amount: asset.value\n}))\n\nconst COLORS = ['#3B82F6', '#8B5CF6', '#10B981', '#F59E0B', '#EF4444']\n\nexport function FinancialDashboard() {\n  const [timeRange, setTimeRange] = useState('1D')\n  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null)\n\n  const getChangeColor = (change: number) => {\n    return change >= 0 ? 'text-green-600' : 'text-red-600'\n  }\n\n  const getChangeIcon = (change: number) => {\n    return change >= 0 ? <TrendingUp className=\"w-4 h-4\" /> : <TrendingDown className=\"w-4 h-4\" />\n  }\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'buy': return <ArrowDownLeft className=\"w-4 h-4 text-green-600\" />\n      case 'sell': return <ArrowUpRight className=\"w-4 h-4 text-red-600\" />\n      case 'dividend': return <DollarSign className=\"w-4 h-4 text-blue-600\" />\n      default: return null\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Portfolio Dashboard</h1>\n              <p className=\"text-sm text-gray-600 mt-1\">Track your investments in real-time</p>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <button className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\">\n                <Bell className=\"w-5 h-5 text-gray-600\" />\n              </button>\n              <button className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n                <Briefcase className=\"w-5 h-5\" />\n                Add Investment\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-6\">\n        {/* Portfolio Summary */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"lg:col-span-2 bg-gradient-to-br from-blue-600 to-purple-600 rounded-2xl shadow-xl p-6 text-white\"\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <p className=\"text-blue-100 text-sm font-medium\">Total Portfolio Value</p>\n                <h2 className=\"text-4xl font-bold mt-2\">${portfolioValue.toLocaleString()}</h2>\n              </div>\n              <div className=\"p-3 bg-white/20 rounded-xl backdrop-blur-sm\">\n                <PieChart className=\"w-8 h-8 text-white\" />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-blue-100 text-sm\">Total Gain/Loss</p>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <span className=\"text-xl font-semibold\">+${totalGain.toLocaleString()}</span>\n                  <span className=\"text-sm bg-white/20 px-2 py-0.5 rounded-full\">+{totalGainPercent}%</span>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-blue-100 text-sm\">Today's Change</p>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <span className=\"text-xl font-semibold\">+${todayChange.toLocaleString()}</span>\n                  <span className=\"text-sm bg-white/20 px-2 py-0.5 rounded-full\">+{todayChangePercent}%</span>\n                </div>\n              </div>\n            </div>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"bg-white rounded-2xl shadow-sm border border-gray-200 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-sm font-medium text-gray-600\">Best Performer</h3>\n              <TrendingUp className=\"w-4 h-4 text-green-600\" />\n            </div>\n            <p className=\"text-2xl font-bold text-gray-900\">MSFT</p>\n            <p className=\"text-sm text-gray-600 mt-1\">Microsoft Corp.</p>\n            <div className=\"flex items-center gap-2 mt-3\">\n              <span className=\"text-green-600 font-semibold\">+2.04%</span>\n              <span className=\"text-sm text-gray-500\">Today</span>\n            </div>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-white rounded-2xl shadow-sm border border-gray-200 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-sm font-medium text-gray-600\">Market Status</h3>\n              <Activity className=\"w-4 h-4 text-blue-600\" />\n            </div>\n            <p className=\"text-2xl font-bold text-gray-900\">Open</p>\n            <p className=\"text-sm text-gray-600 mt-1\">NYSE & NASDAQ</p>\n            <div className=\"flex items-center gap-2 mt-3\">\n              <span className=\"text-blue-600 font-semibold\">5h 32m</span>\n              <span className=\"text-sm text-gray-500\">Until close</span>\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          {/* Portfolio Performance */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"lg:col-span-2 bg-white rounded-2xl shadow-sm border border-gray-200 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Portfolio Performance</h3>\n              <div className=\"flex items-center gap-2\">\n                {['1D', '1W', '1M', '3M', '1Y'].map((range) => (\n                  <button\n                    key={range}\n                    onClick={() => setTimeRange(range)}\n                    className={`px-3 py-1 text-sm rounded-lg transition-colors ${\n                      timeRange === range\n                        ? 'bg-blue-600 text-white'\n                        : 'text-gray-600 hover:bg-gray-100'\n                    }`}\n                  >\n                    {range}\n                  </button>\n                ))}\n              </div>\n            </div>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <AreaChart data={marketData}>\n                <defs>\n                  <linearGradient id=\"colorValue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0}/>\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n                <XAxis dataKey=\"time\" stroke=\"#6B7280\" />\n                <YAxis stroke=\"#6B7280\" />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: '#FFFFFF',\n                    border: '1px solid #E5E7EB',\n                    borderRadius: '0.5rem'\n                  }}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke=\"#3B82F6\"\n                  fillOpacity={1}\n                  fill=\"url(#colorValue)\"\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </motion.div>\n\n          {/* Asset Allocation */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            className=\"bg-white rounded-2xl shadow-sm border border-gray-200 p-6\"\n          >\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">Asset Allocation</h3>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <RechartsPieChart>\n                <Pie\n                  data={allocationData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {allocationData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </RechartsPieChart>\n            </ResponsiveContainer>\n            <div className=\"mt-4 space-y-2\">\n              {allocationData.map((item, index) => (\n                <div key={item.name} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-3 h-3 rounded-full\"\n                      style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                    />\n                    <span className=\"text-sm text-gray-700\">{item.name}</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"text-sm font-medium text-gray-900\">{item.value}%</span>\n                    <span className=\"text-xs text-gray-500 ml-2\">${item.amount.toLocaleString()}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Assets and Transactions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Assets List */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.5 }}\n            className=\"bg-white rounded-2xl shadow-sm border border-gray-200 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Your Assets</h3>\n              <button className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\">\n                View All\n              </button>\n            </div>\n            <div className=\"space-y-4\">\n              {assets.map((asset) => (\n                <div\n                  key={asset.symbol}\n                  className=\"flex items-center justify-between p-4 rounded-xl border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer\"\n                  onClick={() => setSelectedAsset(asset)}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-bold text-gray-700\">{asset.symbol.slice(0, 2)}</span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{asset.symbol}</p>\n                      <p className=\"text-sm text-gray-600\">{asset.amount} shares</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium text-gray-900\">${asset.value.toLocaleString()}</p>\n                    <div className={`flex items-center justify-end gap-1 text-sm ${getChangeColor(asset.change)}`}>\n                      {getChangeIcon(asset.change)}\n                      <span>{asset.changePercent > 0 ? '+' : ''}{asset.changePercent}%</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </motion.div>\n\n          {/* Recent Transactions */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.6 }}\n            className=\"bg-white rounded-2xl shadow-sm border border-gray-200 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Recent Transactions</h3>\n              <div className=\"flex items-center gap-2\">\n                <button className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\">\n                  <Filter className=\"w-4 h-4 text-gray-600\" />\n                </button>\n                <button className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\">\n                  <Download className=\"w-4 h-4 text-gray-600\" />\n                </button>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              {transactions.map((transaction) => (\n                <div\n                  key={transaction.id}\n                  className=\"flex items-center justify-between p-3 rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-gray-100 rounded-lg\">\n                      {getTransactionIcon(transaction.type)}\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900 capitalize\">\n                        {transaction.type} {transaction.asset}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">\n                        {transaction.amount} shares @ ${transaction.price}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium text-gray-900\">\n                      {transaction.type === 'sell' ? '+' : '-'}${transaction.total.toLocaleString()}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      {new Date(transaction.date).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Monthly Performance Comparison */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.7 }}\n          className=\"mt-6 bg-white rounded-2xl shadow-sm border border-gray-200 p-6\"\n        >\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Portfolio vs Market</h3>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 bg-blue-600 rounded-full\" />\n                <span className=\"text-sm text-gray-600\">Portfolio</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 bg-gray-400 rounded-full\" />\n                <span className=\"text-sm text-gray-600\">S&P 500</span>\n              </div>\n            </div>\n          </div>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={monthlyPerformance}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n              <XAxis dataKey=\"month\" stroke=\"#6B7280\" />\n              <YAxis stroke=\"#6B7280\" />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#FFFFFF',\n                  border: '1px solid #E5E7EB',\n                  borderRadius: '0.5rem'\n                }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"portfolio\"\n                stroke=\"#3B82F6\"\n                strokeWidth={3}\n                dot={{ fill: '#3B82F6', r: 4 }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"market\"\n                stroke=\"#9CA3AF\"\n                strokeWidth={3}\n                dot={{ fill: '#9CA3AF', r: 4 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </motion.div>\n      </div>\n    </div>\n  )\n}\n```"}]}