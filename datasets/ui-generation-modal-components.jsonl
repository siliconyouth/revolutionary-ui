{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible modal and dialog components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, animations, focus management, and modern patterns."}, {"role": "user", "content": "Create a modern modal system with different sizes, animations, nested modals support, and keyboard shortcuts. Include confirmation dialogs and image lightbox."}, {"role": "assistant", "content": "```tsx\nimport React, { useState, useEffect, useRef, createContext, useContext } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { X, AlertTriangle, CheckCircle, Info, AlertCircle, Maximize2, Minimize2, ChevronLeft, ChevronRight, Download, Share2, Trash2 } from 'lucide-react'\nimport { createPortal } from 'react-dom'\n\ninterface ModalContextType {\n  openModals: string[]\n  openModal: (id: string) => void\n  closeModal: (id: string) => void\n  closeAllModals: () => void\n}\n\nconst ModalContext = createContext<ModalContextType>({\n  openModals: [],\n  openModal: () => {},\n  closeModal: () => {},\n  closeAllModals: () => {}\n})\n\nexport const useModal = () => useContext(ModalContext)\n\nexport function ModalProvider({ children }: { children: React.ReactNode }) {\n  const [openModals, setOpenModals] = useState<string[]>([])\n\n  const openModal = (id: string) => {\n    setOpenModals(prev => [...prev, id])\n  }\n\n  const closeModal = (id: string) => {\n    setOpenModals(prev => prev.filter(modalId => modalId !== id))\n  }\n\n  const closeAllModals = () => {\n    setOpenModals([])\n  }\n\n  return (\n    <ModalContext.Provider value={{ openModals, openModal, closeModal, closeAllModals }}>\n      {children}\n    </ModalContext.Provider>\n  )\n}\n\ninterface ModalProps {\n  id: string\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'\n  closeOnOverlayClick?: boolean\n  closeOnEsc?: boolean\n  showCloseButton?: boolean\n  className?: string\n  children: React.ReactNode\n}\n\nexport function Modal({\n  id,\n  isOpen,\n  onClose,\n  title,\n  description,\n  size = 'md',\n  closeOnOverlayClick = true,\n  closeOnEsc = true,\n  showCloseButton = true,\n  className = '',\n  children\n}: ModalProps) {\n  const modalRef = useRef<HTMLDivElement>(null)\n  const previousActiveElement = useRef<HTMLElement | null>(null)\n  const { openModals } = useModal()\n  const modalIndex = openModals.indexOf(id)\n  const isTopModal = modalIndex === openModals.length - 1\n\n  useEffect(() => {\n    if (isOpen) {\n      previousActiveElement.current = document.activeElement as HTMLElement\n      modalRef.current?.focus()\n    } else {\n      previousActiveElement.current?.focus()\n    }\n  }, [isOpen])\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isOpen || !isTopModal) return\n      \n      if (e.key === 'Escape' && closeOnEsc) {\n        onClose()\n      }\n\n      // Trap focus within modal\n      if (e.key === 'Tab') {\n        const focusableElements = modalRef.current?.querySelectorAll(\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        ) as NodeListOf<HTMLElement>\n        \n        if (focusableElements && focusableElements.length > 0) {\n          const firstElement = focusableElements[0]\n          const lastElement = focusableElements[focusableElements.length - 1]\n\n          if (e.shiftKey && document.activeElement === firstElement) {\n            e.preventDefault()\n            lastElement.focus()\n          } else if (!e.shiftKey && document.activeElement === lastElement) {\n            e.preventDefault()\n            firstElement.focus()\n          }\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [isOpen, closeOnEsc, onClose, isTopModal])\n\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl',\n    full: 'max-w-full mx-4'\n  }\n\n  if (!isOpen) return null\n\n  return createPortal(\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"fixed inset-0 z-50 flex items-center justify-center p-4\"\n        style={{ zIndex: 50 + modalIndex * 10 }}\n      >\n        {/* Overlay */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={closeOnOverlayClick ? onClose : undefined}\n          className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          ref={modalRef}\n          initial={{ opacity: 0, scale: 0.95, y: 20 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.95, y: 20 }}\n          transition={{ type: 'spring', duration: 0.3 }}\n          className={`relative w-full ${sizeClasses[size]} bg-white rounded-2xl shadow-2xl ${className}`}\n          tabIndex={-1}\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-labelledby={title ? `${id}-title` : undefined}\n          aria-describedby={description ? `${id}-description` : undefined}\n        >\n          {/* Header */}\n          {(title || showCloseButton) && (\n            <div className=\"flex items-start justify-between p-6 border-b border-gray-200\">\n              <div>\n                {title && (\n                  <h2 id={`${id}-title`} className=\"text-xl font-semibold text-gray-900\">\n                    {title}\n                  </h2>\n                )}\n                {description && (\n                  <p id={`${id}-description`} className=\"mt-1 text-sm text-gray-600\">\n                    {description}\n                  </p>\n                )}\n              </div>\n              {showCloseButton && (\n                <button\n                  onClick={onClose}\n                  className=\"p-2 -mt-2 -mr-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n                  aria-label=\"Close modal\"\n                >\n                  <X className=\"w-5 h-5\" />\n                </button>\n              )}\n            </div>\n          )}\n\n          {/* Content */}\n          <div className=\"p-6\">\n            {children}\n          </div>\n        </motion.div>\n      </motion.div>\n    </AnimatePresence>,\n    document.body\n  )\n}\n\ninterface ConfirmDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  onConfirm: () => void\n  title: string\n  message: string\n  confirmText?: string\n  cancelText?: string\n  type?: 'info' | 'warning' | 'danger' | 'success'\n  loading?: boolean\n}\n\nexport function ConfirmDialog({\n  isOpen,\n  onClose,\n  onConfirm,\n  title,\n  message,\n  confirmText = 'Confirm',\n  cancelText = 'Cancel',\n  type = 'info',\n  loading = false\n}: ConfirmDialogProps) {\n  const icons = {\n    info: <Info className=\"w-6 h-6 text-blue-600\" />,\n    warning: <AlertTriangle className=\"w-6 h-6 text-yellow-600\" />,\n    danger: <AlertCircle className=\"w-6 h-6 text-red-600\" />,\n    success: <CheckCircle className=\"w-6 h-6 text-green-600\" />\n  }\n\n  const buttonColors = {\n    info: 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500',\n    warning: 'bg-yellow-600 hover:bg-yellow-700 focus:ring-yellow-500',\n    danger: 'bg-red-600 hover:bg-red-700 focus:ring-red-500',\n    success: 'bg-green-600 hover:bg-green-700 focus:ring-green-500'\n  }\n\n  return (\n    <Modal\n      id=\"confirm-dialog\"\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"sm\"\n      showCloseButton={false}\n      closeOnOverlayClick={!loading}\n      closeOnEsc={!loading}\n    >\n      <div className=\"flex gap-4\">\n        <div className=\"flex-shrink-0 p-3 bg-gray-100 rounded-full\">\n          {icons[type]}\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n          <p className=\"mt-2 text-sm text-gray-600\">{message}</p>\n          \n          <div className=\"flex gap-3 mt-6\">\n            <button\n              onClick={onConfirm}\n              disabled={loading}\n              className={`px-4 py-2 text-sm font-medium text-white rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed ${buttonColors[type]}`}\n            >\n              {loading ? (\n                <span className=\"flex items-center gap-2\">\n                  <motion.div\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                    className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full\"\n                  />\n                  Processing...\n                </span>\n              ) : (\n                confirmText\n              )}\n            </button>\n            <button\n              onClick={onClose}\n              disabled={loading}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {cancelText}\n            </button>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  )\n}\n\ninterface ImageLightboxProps {\n  images: string[]\n  currentIndex: number\n  isOpen: boolean\n  onClose: () => void\n  onNavigate?: (index: number) => void\n  showThumbnails?: boolean\n}\n\nexport function ImageLightbox({\n  images,\n  currentIndex,\n  isOpen,\n  onClose,\n  onNavigate,\n  showThumbnails = true\n}: ImageLightboxProps) {\n  const [isFullscreen, setIsFullscreen] = useState(false)\n  const [imageIndex, setImageIndex] = useState(currentIndex)\n  const [isZoomed, setIsZoomed] = useState(false)\n  const imageRef = useRef<HTMLImageElement>(null)\n\n  useEffect(() => {\n    setImageIndex(currentIndex)\n  }, [currentIndex])\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isOpen) return\n\n      switch (e.key) {\n        case 'ArrowLeft':\n          navigatePrevious()\n          break\n        case 'ArrowRight':\n          navigateNext()\n          break\n        case 'f':\n          toggleFullscreen()\n          break\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [isOpen, imageIndex, images.length])\n\n  const navigatePrevious = () => {\n    const newIndex = imageIndex > 0 ? imageIndex - 1 : images.length - 1\n    setImageIndex(newIndex)\n    onNavigate?.(newIndex)\n  }\n\n  const navigateNext = () => {\n    const newIndex = imageIndex < images.length - 1 ? imageIndex + 1 : 0\n    setImageIndex(newIndex)\n    onNavigate?.(newIndex)\n  }\n\n  const toggleFullscreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen()\n      setIsFullscreen(true)\n    } else {\n      document.exitFullscreen()\n      setIsFullscreen(false)\n    }\n  }\n\n  const handleDownload = () => {\n    const link = document.createElement('a')\n    link.href = images[imageIndex]\n    link.download = `image-${imageIndex + 1}.jpg`\n    link.click()\n  }\n\n  if (!isOpen) return null\n\n  return createPortal(\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"fixed inset-0 z-50 bg-black flex flex-col\"\n      >\n        {/* Header */}\n        <div className=\"absolute top-0 left-0 right-0 z-10 flex items-center justify-between p-4 bg-gradient-to-b from-black/50 to-transparent\">\n          <div className=\"flex items-center gap-4\">\n            <span className=\"text-white font-medium\">\n              {imageIndex + 1} / {images.length}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={handleDownload}\n              className=\"p-2 text-white hover:bg-white/20 rounded-lg transition-colors\"\n              title=\"Download image\"\n            >\n              <Download className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={() => setIsZoomed(!isZoomed)}\n              className=\"p-2 text-white hover:bg-white/20 rounded-lg transition-colors\"\n              title=\"Toggle zoom\"\n            >\n              {isZoomed ? <Minimize2 className=\"w-5 h-5\" /> : <Maximize2 className=\"w-5 h-5\" />}\n            </button>\n            <button\n              onClick={toggleFullscreen}\n              className=\"p-2 text-white hover:bg-white/20 rounded-lg transition-colors\"\n              title=\"Toggle fullscreen (F)\"\n            >\n              <Maximize2 className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={onClose}\n              className=\"p-2 text-white hover:bg-white/20 rounded-lg transition-colors\"\n              title=\"Close (Esc)\"\n            >\n              <X className=\"w-5 h-5\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Main Image */}\n        <div className=\"flex-1 flex items-center justify-center relative\">\n          <button\n            onClick={navigatePrevious}\n            className=\"absolute left-4 p-3 text-white bg-black/50 hover:bg-black/70 rounded-full transition-colors z-10\"\n            title=\"Previous image (←)\"\n          >\n            <ChevronLeft className=\"w-6 h-6\" />\n          </button>\n\n          <motion.img\n            key={imageIndex}\n            ref={imageRef}\n            src={images[imageIndex]}\n            alt={`Image ${imageIndex + 1}`}\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n            transition={{ duration: 0.3 }}\n            className={`max-w-full max-h-full object-contain ${isZoomed ? 'cursor-zoom-out' : 'cursor-zoom-in'}`}\n            style={{ transform: isZoomed ? 'scale(1.5)' : 'scale(1)' }}\n            onClick={() => setIsZoomed(!isZoomed)}\n          />\n\n          <button\n            onClick={navigateNext}\n            className=\"absolute right-4 p-3 text-white bg-black/50 hover:bg-black/70 rounded-full transition-colors z-10\"\n            title=\"Next image (→)\"\n          >\n            <ChevronRight className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {/* Thumbnails */}\n        {showThumbnails && (\n          <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/50 to-transparent p-4\">\n            <div className=\"flex gap-2 justify-center overflow-x-auto\">\n              {images.map((image, index) => (\n                <button\n                  key={index}\n                  onClick={() => {\n                    setImageIndex(index)\n                    onNavigate?.(index)\n                  }}\n                  className={`flex-shrink-0 w-16 h-16 rounded-lg overflow-hidden transition-all ${\n                    index === imageIndex\n                      ? 'ring-2 ring-white opacity-100'\n                      : 'opacity-60 hover:opacity-100'\n                  }`}\n                >\n                  <img\n                    src={image}\n                    alt={`Thumbnail ${index + 1}`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n      </motion.div>\n    </AnimatePresence>,\n    document.body\n  )\n}\n\n// Example usage component\nexport function ModalSystemExample() {\n  const [showBasicModal, setShowBasicModal] = useState(false)\n  const [showNestedModal, setShowNestedModal] = useState(false)\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false)\n  const [showLightbox, setShowLightbox] = useState(false)\n  const [confirmLoading, setConfirmLoading] = useState(false)\n  const [modalSize, setModalSize] = useState<'sm' | 'md' | 'lg' | 'xl'>('md')\n\n  const sampleImages = [\n    'https://images.unsplash.com/photo-1682687220742-aba13b6e50ba?w=1200',\n    'https://images.unsplash.com/photo-1682687221038-404cb8830901?w=1200',\n    'https://images.unsplash.com/photo-1682687220067-dced9a881b56?w=1200',\n    'https://images.unsplash.com/photo-1682687221248-3116ba6ab483?w=1200'\n  ]\n\n  const handleConfirm = async () => {\n    setConfirmLoading(true)\n    await new Promise(resolve => setTimeout(resolve, 2000))\n    setConfirmLoading(false)\n    setShowConfirmDialog(false)\n  }\n\n  return (\n    <ModalProvider>\n      <div className=\"p-8 max-w-4xl mx-auto space-y-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Modal System</h1>\n          <p className=\"text-gray-600\">Advanced modal components with animations and keyboard support</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Basic Modal Examples */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Modal Sizes</h3>\n            <div className=\"space-y-3\">\n              {(['sm', 'md', 'lg', 'xl'] as const).map((size) => (\n                <button\n                  key={size}\n                  onClick={() => {\n                    setModalSize(size)\n                    setShowBasicModal(true)\n                  }}\n                  className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  Open {size.toUpperCase()} Modal\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Dialog Examples */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Dialogs</h3>\n            <div className=\"space-y-3\">\n              <button\n                onClick={() => setShowConfirmDialog(true)}\n                className=\"w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n              >\n                Danger Confirmation\n              </button>\n              <button\n                onClick={() => setShowLightbox(true)}\n                className=\"w-full px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n              >\n                Open Image Lightbox\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Basic Modal */}\n        <Modal\n          id=\"basic-modal\"\n          isOpen={showBasicModal}\n          onClose={() => setShowBasicModal(false)}\n          title=\"Modal Example\"\n          description=\"This is a basic modal with different size options\"\n          size={modalSize}\n        >\n          <div className=\"space-y-4\">\n            <p className=\"text-gray-600\">\n              This modal demonstrates the {modalSize.toUpperCase()} size variant. You can close it by:\n            </p>\n            <ul className=\"list-disc list-inside space-y-1 text-sm text-gray-600\">\n              <li>Clicking the X button</li>\n              <li>Pressing the Escape key</li>\n              <li>Clicking outside the modal</li>\n            </ul>\n            \n            <button\n              onClick={() => setShowNestedModal(true)}\n              className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n            >\n              Open Nested Modal\n            </button>\n          </div>\n        </Modal>\n\n        {/* Nested Modal */}\n        <Modal\n          id=\"nested-modal\"\n          isOpen={showNestedModal}\n          onClose={() => setShowNestedModal(false)}\n          title=\"Nested Modal\"\n          size=\"sm\"\n        >\n          <p className=\"text-gray-600\">\n            This is a nested modal. It appears on top of the parent modal.\n          </p>\n        </Modal>\n\n        {/* Confirm Dialog */}\n        <ConfirmDialog\n          isOpen={showConfirmDialog}\n          onClose={() => setShowConfirmDialog(false)}\n          onConfirm={handleConfirm}\n          title=\"Delete Account\"\n          message=\"Are you sure you want to delete your account? This action cannot be undone.\"\n          type=\"danger\"\n          confirmText=\"Delete Account\"\n          loading={confirmLoading}\n        />\n\n        {/* Image Lightbox */}\n        <ImageLightbox\n          images={sampleImages}\n          currentIndex={0}\n          isOpen={showLightbox}\n          onClose={() => setShowLightbox(false)}\n        />\n      </div>\n    </ModalProvider>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible modal and dialog components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, animations, focus management, and modern patterns."}, {"role": "user", "content": "Build a command palette modal with search, keyboard navigation, recent items, categories, and action shortcuts. Include fuzzy search."}, {"role": "assistant", "content": "```tsx\nimport React, { useState, useEffect, useRef, useMemo } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { Search, Command, ArrowRight, Clock, Star, FileText, Settings, Users, Package, BarChart3, Home, Mail, Calendar, Hash, Zap, Code, Database, Globe, Lock, Sparkles } from 'lucide-react'\nimport { createPortal } from 'react-dom'\n\ninterface CommandItem {\n  id: string\n  title: string\n  description?: string\n  category: string\n  icon: React.ReactNode\n  shortcut?: string[]\n  action: () => void\n  keywords?: string[]\n  recent?: boolean\n  starred?: boolean\n}\n\ninterface CommandCategory {\n  id: string\n  name: string\n  icon: React.ReactNode\n}\n\nconst categories: CommandCategory[] = [\n  { id: 'navigation', name: 'Navigation', icon: <Home className=\"w-4 h-4\" /> },\n  { id: 'actions', name: 'Actions', icon: <Zap className=\"w-4 h-4\" /> },\n  { id: 'workspace', name: 'Workspace', icon: <Package className=\"w-4 h-4\" /> },\n  { id: 'team', name: 'Team', icon: <Users className=\"w-4 h-4\" /> },\n  { id: 'settings', name: 'Settings', icon: <Settings className=\"w-4 h-4\" /> }\n]\n\nconst allCommands: CommandItem[] = [\n  // Navigation\n  { id: 'home', title: 'Go to Home', category: 'navigation', icon: <Home className=\"w-4 h-4\" />, shortcut: ['G', 'H'], action: () => console.log('Go to home'), keywords: ['dashboard', 'main'] },\n  { id: 'analytics', title: 'Analytics Dashboard', category: 'navigation', icon: <BarChart3 className=\"w-4 h-4\" />, shortcut: ['G', 'A'], action: () => console.log('Go to analytics'), recent: true },\n  { id: 'messages', title: 'Messages', description: '12 unread', category: 'navigation', icon: <Mail className=\"w-4 h-4\" />, shortcut: ['G', 'M'], action: () => console.log('Go to messages'), starred: true },\n  { id: 'calendar', title: 'Calendar', category: 'navigation', icon: <Calendar className=\"w-4 h-4\" />, shortcut: ['G', 'C'], action: () => console.log('Go to calendar') },\n  \n  // Actions\n  { id: 'create-project', title: 'Create New Project', category: 'actions', icon: <Sparkles className=\"w-4 h-4\" />, shortcut: ['⌘', 'N'], action: () => console.log('Create project'), starred: true },\n  { id: 'search-code', title: 'Search Code', category: 'actions', icon: <Code className=\"w-4 h-4\" />, shortcut: ['⌘', 'P'], action: () => console.log('Search code'), recent: true },\n  { id: 'run-query', title: 'Run Database Query', category: 'actions', icon: <Database className=\"w-4 h-4\" />, shortcut: ['⌘', 'Enter'], action: () => console.log('Run query') },\n  { id: 'deploy', title: 'Deploy to Production', description: 'Last deployed 2 days ago', category: 'actions', icon: <Globe className=\"w-4 h-4\" />, action: () => console.log('Deploy') },\n  \n  // Workspace\n  { id: 'switch-workspace', title: 'Switch Workspace', category: 'workspace', icon: <Package className=\"w-4 h-4\" />, shortcut: ['⌘', 'S'], action: () => console.log('Switch workspace') },\n  { id: 'workspace-settings', title: 'Workspace Settings', category: 'workspace', icon: <Settings className=\"w-4 h-4\" />, action: () => console.log('Workspace settings') },\n  { id: 'billing', title: 'Billing & Usage', description: 'Pro plan - $29/month', category: 'workspace', icon: <Hash className=\"w-4 h-4\" />, action: () => console.log('Billing') },\n  \n  // Team\n  { id: 'invite-member', title: 'Invite Team Member', category: 'team', icon: <Users className=\"w-4 h-4\" />, shortcut: ['⌘', 'I'], action: () => console.log('Invite member') },\n  { id: 'team-settings', title: 'Team Settings', category: 'team', icon: <Settings className=\"w-4 h-4\" />, action: () => console.log('Team settings') },\n  { id: 'permissions', title: 'Manage Permissions', category: 'team', icon: <Lock className=\"w-4 h-4\" />, action: () => console.log('Manage permissions') },\n  \n  // Settings\n  { id: 'preferences', title: 'Preferences', category: 'settings', icon: <Settings className=\"w-4 h-4\" />, shortcut: ['⌘', ','], action: () => console.log('Preferences'), recent: true },\n  { id: 'keyboard-shortcuts', title: 'Keyboard Shortcuts', category: 'settings', icon: <Command className=\"w-4 h-4\" />, shortcut: ['?'], action: () => console.log('Shortcuts') },\n  { id: 'documentation', title: 'Documentation', category: 'settings', icon: <FileText className=\"w-4 h-4\" />, action: () => console.log('Documentation') }\n]\n\ninterface CommandPaletteProps {\n  isOpen: boolean\n  onClose: () => void\n  commands?: CommandItem[]\n}\n\n// Simple fuzzy search implementation\nfunction fuzzySearch(query: string, text: string): boolean {\n  const pattern = query.split('').map(char => `${char}.*`).join('')\n  const regex = new RegExp(pattern, 'i')\n  return regex.test(text)\n}\n\nfunction highlightMatch(text: string, query: string): React.ReactNode {\n  if (!query) return text\n  \n  const parts: React.ReactNode[] = []\n  const lowerText = text.toLowerCase()\n  const lowerQuery = query.toLowerCase()\n  let lastIndex = 0\n  \n  for (const char of lowerQuery) {\n    const index = lowerText.indexOf(char, lastIndex)\n    if (index === -1) break\n    \n    if (index > lastIndex) {\n      parts.push(text.slice(lastIndex, index))\n    }\n    parts.push(\n      <span key={index} className=\"font-semibold text-blue-600\">\n        {text[index]}\n      </span>\n    )\n    lastIndex = index + 1\n  }\n  \n  if (lastIndex < text.length) {\n    parts.push(text.slice(lastIndex))\n  }\n  \n  return <>{parts}</>\n}\n\nexport function CommandPalette({ isOpen, onClose, commands = allCommands }: CommandPaletteProps) {\n  const [query, setQuery] = useState('')\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const listRef = useRef<HTMLDivElement>(null)\n  const itemRefs = useRef<(HTMLButtonElement | null)[]>([])\n\n  // Filter and sort commands\n  const filteredCommands = useMemo(() => {\n    let filtered = commands\n\n    // Filter by category if selected\n    if (selectedCategory) {\n      filtered = filtered.filter(cmd => cmd.category === selectedCategory)\n    }\n\n    // Filter by search query\n    if (query) {\n      filtered = filtered.filter(cmd => {\n        const searchText = `${cmd.title} ${cmd.description || ''} ${cmd.keywords?.join(' ') || ''}`\n        return fuzzySearch(query, searchText)\n      })\n    }\n\n    // Sort by relevance (starred, recent, then alphabetical)\n    filtered.sort((a, b) => {\n      if (a.starred && !b.starred) return -1\n      if (!a.starred && b.starred) return 1\n      if (a.recent && !b.recent) return -1\n      if (!a.recent && b.recent) return 1\n      return a.title.localeCompare(b.title)\n    })\n\n    return filtered\n  }, [commands, query, selectedCategory])\n\n  // Group commands by category\n  const groupedCommands = useMemo(() => {\n    const groups: Record<string, CommandItem[]> = {}\n    \n    // Add special groups\n    const starred = filteredCommands.filter(cmd => cmd.starred)\n    const recent = filteredCommands.filter(cmd => cmd.recent && !cmd.starred)\n    const other = filteredCommands.filter(cmd => !cmd.recent && !cmd.starred)\n    \n    if (starred.length > 0) groups['Starred'] = starred\n    if (recent.length > 0) groups['Recent'] = recent\n    \n    // Group remaining by category\n    if (!selectedCategory && query.length === 0) {\n      categories.forEach(cat => {\n        const categoryCommands = other.filter(cmd => cmd.category === cat.id)\n        if (categoryCommands.length > 0) {\n          groups[cat.name] = categoryCommands\n        }\n      })\n    } else {\n      if (other.length > 0) groups['Results'] = other\n    }\n    \n    return groups\n  }, [filteredCommands, selectedCategory, query])\n\n  // Calculate total items for navigation\n  const totalItems = filteredCommands.length\n\n  useEffect(() => {\n    if (isOpen) {\n      setQuery('')\n      setSelectedIndex(0)\n      setSelectedCategory(null)\n      setTimeout(() => inputRef.current?.focus(), 100)\n    }\n  }, [isOpen])\n\n  useEffect(() => {\n    setSelectedIndex(0)\n  }, [query, selectedCategory])\n\n  useEffect(() => {\n    // Scroll selected item into view\n    if (itemRefs.current[selectedIndex]) {\n      itemRefs.current[selectedIndex]?.scrollIntoView({\n        block: 'nearest',\n        behavior: 'smooth'\n      })\n    }\n  }, [selectedIndex])\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isOpen) return\n\n      switch (e.key) {\n        case 'ArrowDown':\n          e.preventDefault()\n          setSelectedIndex(prev => (prev + 1) % totalItems)\n          break\n        case 'ArrowUp':\n          e.preventDefault()\n          setSelectedIndex(prev => (prev - 1 + totalItems) % totalItems)\n          break\n        case 'Enter':\n          e.preventDefault()\n          if (filteredCommands[selectedIndex]) {\n            filteredCommands[selectedIndex].action()\n            onClose()\n          }\n          break\n        case 'Escape':\n          e.preventDefault()\n          if (query) {\n            setQuery('')\n          } else if (selectedCategory) {\n            setSelectedCategory(null)\n          } else {\n            onClose()\n          }\n          break\n        case 'Tab':\n          e.preventDefault()\n          // Tab through categories\n          if (!selectedCategory) {\n            setSelectedCategory(categories[0].id)\n          } else {\n            const currentIndex = categories.findIndex(cat => cat.id === selectedCategory)\n            const nextIndex = (currentIndex + 1) % categories.length\n            setSelectedCategory(categories[nextIndex].id)\n          }\n          break\n      }\n\n      // Handle keyboard shortcuts\n      if (e.metaKey || e.ctrlKey) {\n        const key = e.key.toUpperCase()\n        const matchingCommand = filteredCommands.find(cmd => \n          cmd.shortcut?.includes('⌘') && cmd.shortcut?.includes(key)\n        )\n        if (matchingCommand) {\n          e.preventDefault()\n          matchingCommand.action()\n          onClose()\n        }\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [isOpen, filteredCommands, selectedIndex, totalItems, query, selectedCategory, onClose])\n\n  if (!isOpen) return null\n\n  let currentIndex = 0\n\n  return createPortal(\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"fixed inset-0 z-50 flex items-start justify-center pt-[20vh] px-4\"\n      >\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\n          onClick={onClose}\n        />\n\n        {/* Command Palette */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95, y: -20 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.95, y: -20 }}\n          transition={{ duration: 0.2 }}\n          className=\"relative w-full max-w-2xl bg-white rounded-2xl shadow-2xl overflow-hidden\"\n        >\n          {/* Search Header */}\n          <div className=\"border-b border-gray-200\">\n            <div className=\"flex items-center px-4 py-3\">\n              <Search className=\"w-5 h-5 text-gray-400 mr-3\" />\n              <input\n                ref={inputRef}\n                type=\"text\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                placeholder=\"Type a command or search...\"\n                className=\"flex-1 text-lg bg-transparent outline-none placeholder-gray-400\"\n              />\n              <kbd className=\"hidden sm:block px-2 py-1 text-xs text-gray-500 bg-gray-100 rounded\">ESC</kbd>\n            </div>\n            \n            {/* Category Pills */}\n            <div className=\"flex items-center gap-2 px-4 pb-3 overflow-x-auto\">\n              <button\n                onClick={() => setSelectedCategory(null)}\n                className={`px-3 py-1 text-sm rounded-full transition-colors whitespace-nowrap ${\n                  !selectedCategory\n                    ? 'bg-blue-100 text-blue-700'\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                }`}\n              >\n                All\n              </button>\n              {categories.map(category => (\n                <button\n                  key={category.id}\n                  onClick={() => setSelectedCategory(category.id)}\n                  className={`flex items-center gap-1.5 px-3 py-1 text-sm rounded-full transition-colors whitespace-nowrap ${\n                    selectedCategory === category.id\n                      ? 'bg-blue-100 text-blue-700'\n                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                  }`}\n                >\n                  {category.icon}\n                  {category.name}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Results */}\n          <div ref={listRef} className=\"max-h-[400px] overflow-y-auto\">\n            {Object.keys(groupedCommands).length === 0 ? (\n              <div className=\"px-4 py-8 text-center text-gray-500\">\n                <p className=\"text-lg font-medium\">No results found</p>\n                <p className=\"text-sm mt-1\">Try adjusting your search or filters</p>\n              </div>\n            ) : (\n              <div className=\"py-2\">\n                {Object.entries(groupedCommands).map(([groupName, groupCommands]) => (\n                  <div key={groupName}>\n                    <div className=\"px-4 py-2 text-xs font-semibold text-gray-500 uppercase flex items-center gap-2\">\n                      {groupName === 'Starred' && <Star className=\"w-3 h-3\" />}\n                      {groupName === 'Recent' && <Clock className=\"w-3 h-3\" />}\n                      {groupName}\n                    </div>\n                    {groupCommands.map((command) => {\n                      const isSelected = currentIndex === selectedIndex\n                      const index = currentIndex++\n                      \n                      return (\n                        <button\n                          key={command.id}\n                          ref={el => itemRefs.current[index] = el}\n                          onClick={() => {\n                            command.action()\n                            onClose()\n                          }}\n                          onMouseEnter={() => setSelectedIndex(index)}\n                          className={`w-full flex items-center gap-3 px-4 py-3 text-left transition-colors ${\n                            isSelected\n                              ? 'bg-blue-50 text-blue-900'\n                              : 'hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className={`flex-shrink-0 p-2 rounded-lg ${\n                            isSelected ? 'bg-blue-100' : 'bg-gray-100'\n                          }`}>\n                            {command.icon}\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"font-medium\">\n                              {highlightMatch(command.title, query)}\n                            </p>\n                            {command.description && (\n                              <p className=\"text-sm text-gray-500 truncate\">\n                                {command.description}\n                              </p>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex items-center gap-2\">\n                            {command.starred && (\n                              <Star className=\"w-4 h-4 text-yellow-500 fill-yellow-500\" />\n                            )}\n                            {command.shortcut && (\n                              <div className=\"hidden sm:flex items-center gap-1\">\n                                {command.shortcut.map((key, i) => (\n                                  <kbd\n                                    key={i}\n                                    className=\"px-2 py-1 text-xs text-gray-500 bg-gray-100 rounded\"\n                                  >\n                                    {key}\n                                  </kbd>\n                                ))}\n                              </div>\n                            )}\n                            <ArrowRight className={`w-4 h-4 transition-opacity ${\n                              isSelected ? 'opacity-100' : 'opacity-0'\n                            }`} />\n                          </div>\n                        </button>\n                      )\n                    })}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className=\"border-t border-gray-200 px-4 py-3 flex items-center justify-between text-xs text-gray-500\">\n            <div className=\"flex items-center gap-4\">\n              <span className=\"flex items-center gap-1\">\n                <kbd className=\"px-1.5 py-0.5 bg-gray-100 rounded\">↑↓</kbd>\n                Navigate\n              </span>\n              <span className=\"flex items-center gap-1\">\n                <kbd className=\"px-1.5 py-0.5 bg-gray-100 rounded\">⏎</kbd>\n                Select\n              </span>\n              <span className=\"flex items-center gap-1\">\n                <kbd className=\"px-1.5 py-0.5 bg-gray-100 rounded\">⇥</kbd>\n                Categories\n              </span>\n            </div>\n            <span>\n              {filteredCommands.length} commands\n            </span>\n          </div>\n        </motion.div>\n      </motion.div>\n    </AnimatePresence>,\n    document.body\n  )\n}\n\n// Hook for easy command palette usage\nexport function useCommandPalette() {\n  const [isOpen, setIsOpen] = useState(false)\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n        e.preventDefault()\n        setIsOpen(true)\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [])\n\n  return {\n    isOpen,\n    open: () => setIsOpen(true),\n    close: () => setIsOpen(false),\n    toggle: () => setIsOpen(prev => !prev)\n  }\n}\n\n// Example usage component\nexport function CommandPaletteExample() {\n  const { isOpen, open, close } = useCommandPalette()\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Command Palette</h1>\n          <p className=\"text-gray-600 mb-8\">\n            A powerful command palette with search, categories, and keyboard navigation.\n          </p>\n          \n          <div className=\"space-y-4\">\n            <button\n              onClick={open}\n              className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium\"\n            >\n              Open Command Palette\n            </button>\n            \n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span>Or press</span>\n              <kbd className=\"px-2 py-1 bg-gray-100 rounded text-xs\">⌘</kbd>\n              <kbd className=\"px-2 py-1 bg-gray-100 rounded text-xs\">K</kbd>\n            </div>\n          </div>\n          \n          <div className=\"mt-12 space-y-4\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Features</h2>\n            <ul className=\"space-y-2 text-sm text-gray-600\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Fuzzy search with highlighted matches</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Category filtering and navigation</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Keyboard shortcuts for quick actions</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Recent and starred commands</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Full keyboard navigation support</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Smooth animations and transitions</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      \n      <CommandPalette isOpen={isOpen} onClose={close} />\n    </div>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible modal and dialog components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, animations, focus management, and modern patterns."}, {"role": "user", "content": "Create a sheet/drawer component that slides from different directions, with gesture support, multiple stops, and responsive behavior. Include examples for mobile navigation and filters."}, {"role": "assistant", "content": "```tsx\nimport React, { useState, useRef, useEffect, TouchEvent } from 'react'\nimport { motion, useMotionValue, useAnimation, useTransform, PanInfo } from 'framer-motion'\nimport { X, Menu, Filter, ChevronDown, Search, Star, MapPin, Calendar, DollarSign, Users, Wifi, Car, Coffee } from 'lucide-react'\nimport { createPortal } from 'react-dom'\n\ntype SheetDirection = 'left' | 'right' | 'top' | 'bottom'\ntype SheetSize = 'content' | 'sm' | 'md' | 'lg' | 'xl' | 'full'\n\ninterface SheetProps {\n  isOpen: boolean\n  onClose: () => void\n  direction?: SheetDirection\n  size?: SheetSize\n  title?: string\n  description?: string\n  children: React.ReactNode\n  closeOnOverlayClick?: boolean\n  showHandle?: boolean\n  snapPoints?: number[]\n  defaultSnapPoint?: number\n  className?: string\n}\n\nexport function Sheet({\n  isOpen,\n  onClose,\n  direction = 'bottom',\n  size = 'md',\n  title,\n  description,\n  children,\n  closeOnOverlayClick = true,\n  showHandle = true,\n  snapPoints = [],\n  defaultSnapPoint = 0,\n  className = ''\n}: SheetProps) {\n  const [currentSnapPoint, setCurrentSnapPoint] = useState(defaultSnapPoint)\n  const sheetRef = useRef<HTMLDivElement>(null)\n  const dragY = useMotionValue(0)\n  const dragX = useMotionValue(0)\n  const controls = useAnimation()\n\n  // Size mappings\n  const sizeClasses = {\n    content: '',\n    sm: direction === 'left' || direction === 'right' ? 'w-80' : 'h-1/3',\n    md: direction === 'left' || direction === 'right' ? 'w-96' : 'h-1/2',\n    lg: direction === 'left' || direction === 'right' ? 'w-[32rem]' : 'h-2/3',\n    xl: direction === 'left' || direction === 'right' ? 'w-[40rem]' : 'h-3/4',\n    full: direction === 'left' || direction === 'right' ? 'w-full' : 'h-full'\n  }\n\n  // Direction-specific styles\n  const directionStyles = {\n    left: 'left-0 top-0 h-full',\n    right: 'right-0 top-0 h-full',\n    top: 'top-0 left-0 w-full',\n    bottom: 'bottom-0 left-0 w-full'\n  }\n\n  // Animation variants\n  const variants = {\n    hidden: {\n      x: direction === 'left' ? '-100%' : direction === 'right' ? '100%' : 0,\n      y: direction === 'top' ? '-100%' : direction === 'bottom' ? '100%' : 0,\n      transition: { type: 'spring', damping: 30, stiffness: 300 }\n    },\n    visible: {\n      x: 0,\n      y: 0,\n      transition: { type: 'spring', damping: 30, stiffness: 300 }\n    }\n  }\n\n  // Calculate drag constraints based on direction and snap points\n  const getDragConstraints = () => {\n    if (snapPoints.length === 0) {\n      return direction === 'bottom' || direction === 'right' \n        ? { [direction === 'bottom' ? 'top' : 'left']: 0 }\n        : { [direction === 'top' ? 'bottom' : 'right']: 0 }\n    }\n\n    const sheetHeight = sheetRef.current?.offsetHeight || 0\n    const sheetWidth = sheetRef.current?.offsetWidth || 0\n    \n    if (direction === 'bottom') {\n      return {\n        top: -(sheetHeight * (1 - snapPoints[snapPoints.length - 1])),\n        bottom: 0\n      }\n    }\n    \n    // Add constraints for other directions as needed\n    return {}\n  }\n\n  const handleDragEnd = (_: any, info: PanInfo) => {\n    const threshold = 50\n    const velocity = direction === 'bottom' || direction === 'top' ? info.velocity.y : info.velocity.x\n    const distance = direction === 'bottom' || direction === 'top' ? info.offset.y : info.offset.x\n\n    // Close sheet if dragged beyond threshold\n    if (direction === 'bottom' && (distance > threshold || velocity > 500)) {\n      onClose()\n      return\n    }\n    if (direction === 'top' && (distance < -threshold || velocity < -500)) {\n      onClose()\n      return\n    }\n    if (direction === 'right' && (distance > threshold || velocity > 500)) {\n      onClose()\n      return\n    }\n    if (direction === 'left' && (distance < -threshold || velocity < -500)) {\n      onClose()\n      return\n    }\n\n    // Snap to points if available\n    if (snapPoints.length > 0 && direction === 'bottom') {\n      const sheetHeight = sheetRef.current?.offsetHeight || 0\n      const currentPosition = -dragY.get() / sheetHeight\n      \n      // Find closest snap point\n      let closestPoint = 0\n      let closestDistance = Infinity\n      \n      snapPoints.forEach((point, index) => {\n        const distance = Math.abs(currentPosition - (1 - point))\n        if (distance < closestDistance) {\n          closestDistance = distance\n          closestPoint = index\n        }\n      })\n      \n      setCurrentSnapPoint(closestPoint)\n      const targetY = -sheetHeight * (1 - snapPoints[closestPoint])\n      controls.start({ y: targetY })\n    } else {\n      // Reset position\n      controls.start({ x: 0, y: 0 })\n    }\n  }\n\n  useEffect(() => {\n    if (isOpen && snapPoints.length > 0 && direction === 'bottom') {\n      const sheetHeight = sheetRef.current?.offsetHeight || 0\n      const targetY = -sheetHeight * (1 - snapPoints[currentSnapPoint])\n      controls.start({ y: targetY })\n    }\n  }, [isOpen, currentSnapPoint, snapPoints, direction, controls])\n\n  if (!isOpen) return null\n\n  return createPortal(\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"fixed inset-0 z-50\"\n    >\n      {/* Overlay */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        onClick={closeOnOverlayClick ? onClose : undefined}\n        className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\n      />\n\n      {/* Sheet */}\n      <motion.div\n        ref={sheetRef}\n        variants={variants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        exit=\"hidden\"\n        drag={direction === 'bottom' || direction === 'top' ? 'y' : 'x'}\n        dragConstraints={getDragConstraints()}\n        dragElastic={0.2}\n        onDragEnd={handleDragEnd}\n        style={{ x: dragX, y: dragY }}\n        className={`\n          fixed bg-white shadow-2xl\n          ${directionStyles[direction]}\n          ${sizeClasses[size]}\n          ${direction === 'bottom' || direction === 'top' ? 'rounded-t-2xl' : ''}\n          ${direction === 'left' ? 'rounded-r-2xl' : ''}\n          ${direction === 'right' ? 'rounded-l-2xl' : ''}\n          ${className}\n        `}\n      >\n        {/* Handle for mobile */}\n        {showHandle && (direction === 'bottom' || direction === 'top') && (\n          <div className=\"flex justify-center pt-3 pb-2\">\n            <div className=\"w-12 h-1 bg-gray-300 rounded-full\" />\n          </div>\n        )}\n\n        {/* Header */}\n        {(title || description) && (\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                {title && <h2 className=\"text-xl font-semibold text-gray-900\">{title}</h2>}\n                {description && <p className=\"mt-1 text-sm text-gray-600\">{description}</p>}\n              </div>\n              <button\n                onClick={onClose}\n                className=\"p-2 -mt-2 -mr-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Content */}\n        <div className=\"overflow-y-auto h-full\">\n          {children}\n        </div>\n      </motion.div>\n    </motion.div>,\n    document.body\n  )\n}\n\n// Mobile Navigation Sheet Example\nexport function MobileNavigationSheet({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) {\n  const menuItems = [\n    { icon: <Home className=\"w-5 h-5\" />, label: 'Home', href: '/' },\n    { icon: <Search className=\"w-5 h-5\" />, label: 'Search', href: '/search' },\n    { icon: <Star className=\"w-5 h-5\" />, label: 'Favorites', href: '/favorites', badge: 3 },\n    { icon: <Calendar className=\"w-5 h-5\" />, label: 'Bookings', href: '/bookings' },\n    { icon: <Users className=\"w-5 h-5\" />, label: 'Profile', href: '/profile' }\n  ]\n\n  return (\n    <Sheet\n      isOpen={isOpen}\n      onClose={onClose}\n      direction=\"left\"\n      size=\"sm\"\n      showHandle={false}\n    >\n      <div className=\"h-full flex flex-col\">\n        {/* User Profile */}\n        <div className=\"p-6 bg-gradient-to-br from-blue-600 to-purple-600 text-white\">\n          <div className=\"flex items-center gap-4\">\n            <img\n              src=\"https://i.pravatar.cc/150?img=1\"\n              alt=\"User\"\n              className=\"w-16 h-16 rounded-full border-3 border-white/20\"\n            />\n            <div>\n              <h3 className=\"font-semibold text-lg\">John Doe</h3>\n              <p className=\"text-sm opacity-90\">john.doe@example.com</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 py-4\">\n          {menuItems.map((item) => (\n            <a\n              key={item.label}\n              href={item.href}\n              className=\"flex items-center gap-4 px-6 py-3 hover:bg-gray-50 transition-colors\"\n            >\n              <span className=\"text-gray-600\">{item.icon}</span>\n              <span className=\"flex-1 font-medium text-gray-900\">{item.label}</span>\n              {item.badge && (\n                <span className=\"px-2 py-0.5 text-xs bg-red-500 text-white rounded-full\">\n                  {item.badge}\n                </span>\n              )}\n            </a>\n          ))}\n        </nav>\n\n        {/* Footer */}\n        <div className=\"p-6 border-t border-gray-200\">\n          <button className=\"w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors font-medium\">\n            Sign Out\n          </button>\n        </div>\n      </div>\n    </Sheet>\n  )\n}\n\n// Filter Sheet Example\nexport function FilterSheet({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) {\n  const [priceRange, setPriceRange] = useState([0, 1000])\n  const [selectedAmenities, setSelectedAmenities] = useState<string[]>([])\n  const [rating, setRating] = useState(0)\n\n  const amenities = [\n    { id: 'wifi', icon: <Wifi className=\"w-4 h-4\" />, label: 'WiFi' },\n    { id: 'parking', icon: <Car className=\"w-4 h-4\" />, label: 'Parking' },\n    { id: 'breakfast', icon: <Coffee className=\"w-4 h-4\" />, label: 'Breakfast' },\n    { id: 'pool', icon: <Users className=\"w-4 h-4\" />, label: 'Pool' }\n  ]\n\n  const toggleAmenity = (id: string) => {\n    setSelectedAmenities(prev => \n      prev.includes(id) ? prev.filter(a => a !== id) : [...prev, id]\n    )\n  }\n\n  return (\n    <Sheet\n      isOpen={isOpen}\n      onClose={onClose}\n      direction=\"bottom\"\n      size=\"content\"\n      title=\"Filters\"\n      snapPoints={[0.5, 0.9]}\n      defaultSnapPoint={0}\n    >\n      <div className=\"p-6 space-y-6\">\n        {/* Price Range */}\n        <div>\n          <h3 className=\"font-semibold text-gray-900 mb-4\">Price Range</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">$0</span>\n              <span className=\"text-sm text-gray-600\">$1000+</span>\n            </div>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"1000\"\n              value={priceRange[1]}\n              onChange={(e) => setPriceRange([priceRange[0], parseInt(e.target.value)])}\n              className=\"w-full\"\n            />\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex-1\">\n                <label className=\"text-sm text-gray-600\">Min Price</label>\n                <div className=\"flex items-center gap-1 mt-1\">\n                  <DollarSign className=\"w-4 h-4 text-gray-400\" />\n                  <input\n                    type=\"number\"\n                    value={priceRange[0]}\n                    onChange={(e) => setPriceRange([parseInt(e.target.value), priceRange[1]])}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex-1\">\n                <label className=\"text-sm text-gray-600\">Max Price</label>\n                <div className=\"flex items-center gap-1 mt-1\">\n                  <DollarSign className=\"w-4 h-4 text-gray-400\" />\n                  <input\n                    type=\"number\"\n                    value={priceRange[1]}\n                    onChange={(e) => setPriceRange([priceRange[0], parseInt(e.target.value)])}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Rating */}\n        <div>\n          <h3 className=\"font-semibold text-gray-900 mb-4\">Minimum Rating</h3>\n          <div className=\"flex gap-2\">\n            {[1, 2, 3, 4, 5].map((value) => (\n              <button\n                key={value}\n                onClick={() => setRating(value)}\n                className=\"p-2 transition-colors\"\n              >\n                <Star\n                  className={`w-6 h-6 ${\n                    value <= rating\n                      ? 'fill-yellow-400 text-yellow-400'\n                      : 'text-gray-300'\n                  }`}\n                />\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Amenities */}\n        <div>\n          <h3 className=\"font-semibold text-gray-900 mb-4\">Amenities</h3>\n          <div className=\"grid grid-cols-2 gap-3\">\n            {amenities.map((amenity) => (\n              <button\n                key={amenity.id}\n                onClick={() => toggleAmenity(amenity.id)}\n                className={`\n                  flex items-center gap-3 p-3 rounded-lg border-2 transition-all\n                  ${selectedAmenities.includes(amenity.id)\n                    ? 'border-blue-500 bg-blue-50 text-blue-700'\n                    : 'border-gray-200 hover:border-gray-300'\n                  }\n                `}\n              >\n                {amenity.icon}\n                <span className=\"font-medium\">{amenity.label}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex gap-3 pt-4\">\n          <button\n            onClick={() => {\n              setPriceRange([0, 1000])\n              setSelectedAmenities([])\n              setRating(0)\n            }}\n            className=\"flex-1 px-4 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors font-medium\"\n          >\n            Clear All\n          </button>\n          <button\n            onClick={onClose}\n            className=\"flex-1 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium\"\n          >\n            Apply Filters\n          </button>\n        </div>\n      </div>\n    </Sheet>\n  )\n}\n\n// Example usage component\nexport function SheetExample() {\n  const [showMobileNav, setShowMobileNav] = useState(false)\n  const [showFilters, setShowFilters] = useState(false)\n  const [showInfo, setShowInfo] = useState(false)\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center gap-4\">\n              <button\n                onClick={() => setShowMobileNav(true)}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors lg:hidden\"\n              >\n                <Menu className=\"w-6 h-6\" />\n              </button>\n              <h1 className=\"text-xl font-semibold\">Sheet Components</h1>\n            </div>\n            <button\n              onClick={() => setShowFilters(true)}\n              className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              <Filter className=\"w-5 h-5\" />\n              Filters\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid gap-6\">\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Sheet/Drawer Examples</h2>\n            <div className=\"space-y-4\">\n              <button\n                onClick={() => setShowInfo(true)}\n                className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\"\n              >\n                Open Info Sheet (Right)\n              </button>\n              <p className=\"text-sm text-gray-600\">\n                Try the mobile navigation (menu icon) and filters button in the header!\n              </p>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">Features</h3>\n            <ul className=\"space-y-2 text-sm text-gray-600\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Slides from any direction (top, bottom, left, right)</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Gesture support with drag to dismiss</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Multiple snap points for bottom sheets</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Responsive sizing options</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Smooth spring animations</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 mt-0.5\">✓</span>\n                <span>Keyboard accessible</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </main>\n\n      {/* Sheets */}\n      <MobileNavigationSheet isOpen={showMobileNav} onClose={() => setShowMobileNav(false)} />\n      <FilterSheet isOpen={showFilters} onClose={() => setShowFilters(false)} />\n      \n      <Sheet\n        isOpen={showInfo}\n        onClose={() => setShowInfo(false)}\n        direction=\"right\"\n        size=\"md\"\n        title=\"Information Panel\"\n        description=\"This sheet slides in from the right\"\n      >\n        <div className=\"p-6 space-y-6\">\n          <div>\n            <h3 className=\"font-semibold text-gray-900 mb-2\">About Sheets</h3>\n            <p className=\"text-gray-600\">\n              Sheet components provide a flexible way to display temporary content that slides in from the edges of the screen.\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Use Cases</h3>\n            <ul className=\"space-y-2 text-gray-600\">\n              <li>• Mobile navigation menus</li>\n              <li>• Filter panels</li>\n              <li>• Settings drawers</li>\n              <li>• Quick actions</li>\n              <li>• Information panels</li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Location Details</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start gap-3\">\n                <MapPin className=\"w-5 h-5 text-gray-400 mt-0.5\" />\n                <div>\n                  <p className=\"font-medium\">123 Example Street</p>\n                  <p className=\"text-sm text-gray-600\">San Francisco, CA 94105</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Calendar className=\"w-5 h-5 text-gray-400 mt-0.5\" />\n                <div>\n                  <p className=\"font-medium\">Open Hours</p>\n                  <p className=\"text-sm text-gray-600\">Mon-Fri: 9AM-6PM</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Sheet>\n    </div>\n  )\n}\n```"}]}