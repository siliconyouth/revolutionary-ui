{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible navigation components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, responsive design, animations, and modern patterns."}, {"role": "user", "content": "Create a modern responsive navbar with dropdown menus, search, notifications, user profile menu, and mobile sidebar. Include dark mode toggle."}, {"role": "assistant", "content": "```tsx\nimport React, { useState, useRef, useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { Menu, X, Search, Bell, User, ChevronDown, Sun, Moon, Settings, LogOut, HelpCircle, Shield, CreditCard, Home, FileText, BarChart3, Users as UsersIcon, Package, MessageSquare } from 'lucide-react'\n\ninterface NavItem {\n  label: string\n  href: string\n  icon?: React.ReactNode\n  children?: NavItem[]\n  badge?: number\n}\n\ninterface Notification {\n  id: string\n  title: string\n  message: string\n  time: string\n  read: boolean\n  type: 'info' | 'success' | 'warning' | 'error'\n}\n\nconst navItems: NavItem[] = [\n  { label: 'Dashboard', href: '/', icon: <Home className=\"w-4 h-4\" /> },\n  {\n    label: 'Products',\n    href: '/products',\n    icon: <Package className=\"w-4 h-4\" />,\n    children: [\n      { label: 'All Products', href: '/products/all' },\n      { label: 'Categories', href: '/products/categories' },\n      { label: 'Inventory', href: '/products/inventory', badge: 3 },\n      { label: 'Add New', href: '/products/new' }\n    ]\n  },\n  {\n    label: 'Analytics',\n    href: '/analytics',\n    icon: <BarChart3 className=\"w-4 h-4\" />,\n    children: [\n      { label: 'Overview', href: '/analytics/overview' },\n      { label: 'Reports', href: '/analytics/reports' },\n      { label: 'Real-time', href: '/analytics/realtime' }\n    ]\n  },\n  { label: 'Customers', href: '/customers', icon: <UsersIcon className=\"w-4 h-4\" />, badge: 12 },\n  { label: 'Messages', href: '/messages', icon: <MessageSquare className=\"w-4 h-4\" />, badge: 5 },\n  { label: 'Documentation', href: '/docs', icon: <FileText className=\"w-4 h-4\" /> }\n]\n\nconst notifications: Notification[] = [\n  { id: '1', title: 'New order received', message: 'Order #12345 has been placed', time: '5m ago', read: false, type: 'success' },\n  { id: '2', title: 'Payment processed', message: 'Payment for invoice #67890 received', time: '1h ago', read: false, type: 'info' },\n  { id: '3', title: 'Low stock alert', message: 'Product \"Wireless Mouse\" is running low', time: '2h ago', read: true, type: 'warning' },\n  { id: '4', title: 'System update', message: 'System maintenance scheduled for tonight', time: '3h ago', read: true, type: 'info' }\n]\n\nconst userMenuItems = [\n  { label: 'Profile', icon: <User className=\"w-4 h-4\" />, href: '/profile' },\n  { label: 'Settings', icon: <Settings className=\"w-4 h-4\" />, href: '/settings' },\n  { label: 'Billing', icon: <CreditCard className=\"w-4 h-4\" />, href: '/billing' },\n  { label: 'Security', icon: <Shield className=\"w-4 h-4\" />, href: '/security' },\n  { label: 'Help Center', icon: <HelpCircle className=\"w-4 h-4\" />, href: '/help' },\n  { label: 'Log Out', icon: <LogOut className=\"w-4 h-4\" />, href: '/logout' }\n]\n\nexport function ResponsiveNavbar() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)\n  const [activeDropdown, setActiveDropdown] = useState<string | null>(null)\n  const [isSearchOpen, setIsSearchOpen] = useState(false)\n  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false)\n  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(false)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [unreadCount, setUnreadCount] = useState(notifications.filter(n => !n.read).length)\n  \n  const dropdownRef = useRef<HTMLDivElement>(null)\n  const searchRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setActiveDropdown(null)\n        setIsNotificationsOpen(false)\n        setIsUserMenuOpen(false)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => document.removeEventListener('mousedown', handleClickOutside)\n  }, [])\n\n  useEffect(() => {\n    if (isSearchOpen && searchRef.current) {\n      searchRef.current.focus()\n    }\n  }, [isSearchOpen])\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault()\n    console.log('Search:', searchQuery)\n    setSearchQuery('')\n    setIsSearchOpen(false)\n  }\n\n  const markNotificationAsRead = (id: string) => {\n    // In a real app, this would update the backend\n    setUnreadCount(prev => Math.max(0, prev - 1))\n  }\n\n  const getNotificationIcon = (type: Notification['type']) => {\n    const colors = {\n      info: 'text-blue-500',\n      success: 'text-green-500',\n      warning: 'text-yellow-500',\n      error: 'text-red-500'\n    }\n    return `w-2 h-2 rounded-full ${colors[type]} bg-current`\n  }\n\n  return (\n    <nav className={`sticky top-0 z-50 ${isDarkMode ? 'bg-gray-900' : 'bg-white'} border-b ${isDarkMode ? 'border-gray-800' : 'border-gray-200'} transition-colors duration-200`}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo and Desktop Nav */}\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}\n              >\n                Logo\n              </motion.div>\n            </div>\n            \n            {/* Desktop Navigation */}\n            <div className=\"hidden md:block ml-10\">\n              <div className=\"flex items-baseline space-x-1\">\n                {navItems.map((item) => (\n                  <div key={item.label} className=\"relative\" ref={dropdownRef}>\n                    <button\n                      onClick={() => item.children ? setActiveDropdown(activeDropdown === item.label ? null : item.label) : null}\n                      className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors flex items-center gap-2 ${\n                        isDarkMode\n                          ? 'text-gray-300 hover:text-white hover:bg-gray-800'\n                          : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'\n                      }`}\n                    >\n                      {item.icon}\n                      {item.label}\n                      {item.badge && (\n                        <span className=\"ml-1 px-2 py-0.5 text-xs bg-red-500 text-white rounded-full\">\n                          {item.badge}\n                        </span>\n                      )}\n                      {item.children && (\n                        <ChevronDown className={`w-4 h-4 transition-transform ${activeDropdown === item.label ? 'rotate-180' : ''}`} />\n                      )}\n                    </button>\n                    \n                    {/* Dropdown Menu */}\n                    <AnimatePresence>\n                      {item.children && activeDropdown === item.label && (\n                        <motion.div\n                          initial={{ opacity: 0, y: -10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          exit={{ opacity: 0, y: -10 }}\n                          transition={{ duration: 0.2 }}\n                          className={`absolute left-0 mt-2 w-56 rounded-xl shadow-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'} ring-1 ring-black ring-opacity-5`}\n                        >\n                          <div className=\"py-2\">\n                            {item.children.map((child) => (\n                              <a\n                                key={child.label}\n                                href={child.href}\n                                className={`block px-4 py-2 text-sm transition-colors flex items-center justify-between ${\n                                  isDarkMode\n                                    ? 'text-gray-300 hover:text-white hover:bg-gray-700'\n                                    : 'text-gray-700 hover:text-gray-900 hover:bg-gray-50'\n                                }`}\n                              >\n                                {child.label}\n                                {child.badge && (\n                                  <span className=\"ml-2 px-2 py-0.5 text-xs bg-red-500 text-white rounded-full\">\n                                    {child.badge}\n                                  </span>\n                                )}\n                              </a>\n                            ))}\n                          </div>\n                        </motion.div>\n                      )}\n                    </AnimatePresence>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Right Side Items */}\n          <div className=\"flex items-center gap-2\">\n            {/* Search */}\n            <AnimatePresence>\n              {isSearchOpen ? (\n                <motion.form\n                  initial={{ width: 0, opacity: 0 }}\n                  animate={{ width: 'auto', opacity: 1 }}\n                  exit={{ width: 0, opacity: 0 }}\n                  onSubmit={handleSearch}\n                  className=\"flex items-center\"\n                >\n                  <input\n                    ref={searchRef}\n                    type=\"text\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    placeholder=\"Search...\"\n                    className={`px-4 py-2 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                      isDarkMode\n                        ? 'bg-gray-800 text-white placeholder-gray-400'\n                        : 'bg-gray-100 text-gray-900 placeholder-gray-500'\n                    }`}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setIsSearchOpen(false)}\n                    className={`ml-2 p-2 rounded-lg transition-colors ${\n                      isDarkMode ? 'hover:bg-gray-800 text-gray-400' : 'hover:bg-gray-100 text-gray-600'\n                    }`}\n                  >\n                    <X className=\"w-5 h-5\" />\n                  </button>\n                </motion.form>\n              ) : (\n                <button\n                  onClick={() => setIsSearchOpen(true)}\n                  className={`p-2 rounded-lg transition-colors ${\n                    isDarkMode ? 'hover:bg-gray-800 text-gray-400' : 'hover:bg-gray-100 text-gray-600'\n                  }`}\n                >\n                  <Search className=\"w-5 h-5\" />\n                </button>\n              )}\n            </AnimatePresence>\n\n            {/* Dark Mode Toggle */}\n            <button\n              onClick={() => setIsDarkMode(!isDarkMode)}\n              className={`p-2 rounded-lg transition-colors ${\n                isDarkMode ? 'hover:bg-gray-800 text-gray-400' : 'hover:bg-gray-100 text-gray-600'\n              }`}\n            >\n              <AnimatePresence mode=\"wait\">\n                {isDarkMode ? (\n                  <motion.div\n                    key=\"moon\"\n                    initial={{ rotate: -90, opacity: 0 }}\n                    animate={{ rotate: 0, opacity: 1 }}\n                    exit={{ rotate: 90, opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <Moon className=\"w-5 h-5\" />\n                  </motion.div>\n                ) : (\n                  <motion.div\n                    key=\"sun\"\n                    initial={{ rotate: 90, opacity: 0 }}\n                    animate={{ rotate: 0, opacity: 1 }}\n                    exit={{ rotate: -90, opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <Sun className=\"w-5 h-5\" />\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </button>\n\n            {/* Notifications */}\n            <div className=\"relative\" ref={dropdownRef}>\n              <button\n                onClick={() => setIsNotificationsOpen(!isNotificationsOpen)}\n                className={`relative p-2 rounded-lg transition-colors ${\n                  isDarkMode ? 'hover:bg-gray-800 text-gray-400' : 'hover:bg-gray-100 text-gray-600'\n                }`}\n              >\n                <Bell className=\"w-5 h-5\" />\n                {unreadCount > 0 && (\n                  <span className=\"absolute top-0 right-0 transform translate-x-1/2 -translate-y-1/2 px-2 py-0.5 text-xs bg-red-500 text-white rounded-full\">\n                    {unreadCount}\n                  </span>\n                )}\n              </button>\n              \n              <AnimatePresence>\n                {isNotificationsOpen && (\n                  <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    className={`absolute right-0 mt-2 w-80 rounded-xl shadow-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'} ring-1 ring-black ring-opacity-5`}\n                  >\n                    <div className=\"p-4 border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}\">\n                      <h3 className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>Notifications</h3>\n                    </div>\n                    <div className=\"max-h-96 overflow-y-auto\">\n                      {notifications.map((notification) => (\n                        <div\n                          key={notification.id}\n                          onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n                          className={`p-4 border-b transition-colors cursor-pointer ${\n                            isDarkMode\n                              ? `border-gray-700 ${notification.read ? 'bg-gray-800' : 'bg-gray-750'} hover:bg-gray-700`\n                              : `border-gray-100 ${notification.read ? 'bg-white' : 'bg-blue-50'} hover:bg-gray-50`\n                          }`}\n                        >\n                          <div className=\"flex items-start gap-3\">\n                            <div className={getNotificationIcon(notification.type)} />\n                            <div className=\"flex-1\">\n                              <p className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                                {notification.title}\n                              </p>\n                              <p className={`text-sm mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                                {notification.message}\n                              </p>\n                              <p className={`text-xs mt-2 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                                {notification.time}\n                              </p>\n                            </div>\n                            {!notification.read && (\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"p-4\">\n                      <a\n                        href=\"/notifications\"\n                        className={`block text-center text-sm font-medium ${isDarkMode ? 'text-blue-400 hover:text-blue-300' : 'text-blue-600 hover:text-blue-700'}`}\n                      >\n                        View all notifications\n                      </a>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n\n            {/* User Menu */}\n            <div className=\"relative ml-3\" ref={dropdownRef}>\n              <button\n                onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}\n                className={`flex items-center gap-2 p-2 rounded-lg transition-colors ${\n                  isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'\n                }`}\n              >\n                <img\n                  className=\"w-8 h-8 rounded-full\"\n                  src=\"https://i.pravatar.cc/150?img=1\"\n                  alt=\"User\"\n                />\n                <ChevronDown className={`w-4 h-4 transition-transform ${isUserMenuOpen ? 'rotate-180' : ''} ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`} />\n              </button>\n              \n              <AnimatePresence>\n                {isUserMenuOpen && (\n                  <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    className={`absolute right-0 mt-2 w-56 rounded-xl shadow-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'} ring-1 ring-black ring-opacity-5`}\n                  >\n                    <div className={`p-4 border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                      <p className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>John Doe</p>\n                      <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>john.doe@example.com</p>\n                    </div>\n                    <div className=\"py-2\">\n                      {userMenuItems.map((item, index) => (\n                        <React.Fragment key={item.label}>\n                          {index === userMenuItems.length - 1 && (\n                            <div className={`my-2 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`} />\n                          )}\n                          <a\n                            href={item.href}\n                            className={`block px-4 py-2 text-sm transition-colors flex items-center gap-3 ${\n                              isDarkMode\n                                ? 'text-gray-300 hover:text-white hover:bg-gray-700'\n                                : 'text-gray-700 hover:text-gray-900 hover:bg-gray-50'\n                            }`}\n                          >\n                            {item.icon}\n                            {item.label}\n                          </a>\n                        </React.Fragment>\n                      ))}\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n\n            {/* Mobile menu button */}\n            <button\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className={`md:hidden p-2 rounded-lg transition-colors ${\n                isDarkMode ? 'hover:bg-gray-800 text-gray-400' : 'hover:bg-gray-100 text-gray-600'\n              }`}\n            >\n              {isMobileMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Sidebar */}\n      <AnimatePresence>\n        {isMobileMenuOpen && (\n          <motion.div\n            initial={{ x: '-100%' }}\n            animate={{ x: 0 }}\n            exit={{ x: '-100%' }}\n            transition={{ type: 'tween', duration: 0.3 }}\n            className={`fixed inset-y-0 left-0 w-64 ${isDarkMode ? 'bg-gray-900' : 'bg-white'} shadow-xl z-50 md:hidden`}\n          >\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-8\">\n                <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>Logo</div>\n                <button\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  className={`p-2 rounded-lg transition-colors ${\n                    isDarkMode ? 'hover:bg-gray-800 text-gray-400' : 'hover:bg-gray-100 text-gray-600'\n                  }`}\n                >\n                  <X className=\"w-6 h-6\" />\n                </button>\n              </div>\n              \n              <nav className=\"space-y-1\">\n                {navItems.map((item) => (\n                  <div key={item.label}>\n                    <a\n                      href={item.href}\n                      className={`flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                        isDarkMode\n                          ? 'text-gray-300 hover:text-white hover:bg-gray-800'\n                          : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'\n                      }`}\n                    >\n                      {item.icon}\n                      {item.label}\n                      {item.badge && (\n                        <span className=\"ml-auto px-2 py-0.5 text-xs bg-red-500 text-white rounded-full\">\n                          {item.badge}\n                        </span>\n                      )}\n                    </a>\n                    {item.children && (\n                      <div className=\"ml-8 mt-1 space-y-1\">\n                        {item.children.map((child) => (\n                          <a\n                            key={child.label}\n                            href={child.href}\n                            className={`block px-3 py-2 rounded-lg text-sm transition-colors ${\n                              isDarkMode\n                                ? 'text-gray-400 hover:text-white hover:bg-gray-800'\n                                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                            }`}\n                          >\n                            {child.label}\n                            {child.badge && (\n                              <span className=\"ml-2 px-2 py-0.5 text-xs bg-red-500 text-white rounded-full\">\n                                {child.badge}\n                              </span>\n                            )}\n                          </a>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </nav>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Mobile Menu Overlay */}\n      <AnimatePresence>\n        {isMobileMenuOpen && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={() => setIsMobileMenuOpen(false)}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          />\n        )}\n      </AnimatePresence>\n    </nav>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible navigation components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, responsive design, animations, and modern patterns."}, {"role": "user", "content": "Build a vertical sidebar navigation with collapsible sections, nested items, tooltips for collapsed state, and custom scrollbar. Include workspace switcher."}, {"role": "assistant", "content": "```tsx\nimport React, { useState, useRef, useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { ChevronDown, ChevronRight, Home, BarChart3, Users, Settings, Package, FileText, MessageSquare, Calendar, Shield, CreditCard, HelpCircle, Plus, Search, Bell, Menu, LogOut, Briefcase, Building2, Check } from 'lucide-react'\n\ninterface MenuItem {\n  id: string\n  label: string\n  icon: React.ReactNode\n  href?: string\n  badge?: number | string\n  children?: MenuItem[]\n  disabled?: boolean\n}\n\ninterface Workspace {\n  id: string\n  name: string\n  icon: string\n  plan: 'free' | 'pro' | 'enterprise'\n}\n\nconst workspaces: Workspace[] = [\n  { id: '1', name: 'Acme Corporation', icon: '🏢', plan: 'enterprise' },\n  { id: '2', name: 'Personal Projects', icon: '👤', plan: 'free' },\n  { id: '3', name: 'Startup Inc.', icon: '🚀', plan: 'pro' },\n  { id: '4', name: 'Design Studio', icon: '🎨', plan: 'pro' }\n]\n\nconst menuItems: MenuItem[] = [\n  {\n    id: 'dashboard',\n    label: 'Dashboard',\n    icon: <Home className=\"w-5 h-5\" />,\n    href: '/dashboard'\n  },\n  {\n    id: 'analytics',\n    label: 'Analytics',\n    icon: <BarChart3 className=\"w-5 h-5\" />,\n    children: [\n      { id: 'overview', label: 'Overview', icon: <BarChart3 className=\"w-4 h-4\" />, href: '/analytics/overview' },\n      { id: 'reports', label: 'Reports', icon: <FileText className=\"w-4 h-4\" />, href: '/analytics/reports', badge: '3' },\n      { id: 'insights', label: 'Insights', icon: <Shield className=\"w-4 h-4\" />, href: '/analytics/insights' }\n    ]\n  },\n  {\n    id: 'team',\n    label: 'Team',\n    icon: <Users className=\"w-5 h-5\" />,\n    badge: '12',\n    children: [\n      { id: 'members', label: 'Members', icon: <Users className=\"w-4 h-4\" />, href: '/team/members' },\n      { id: 'roles', label: 'Roles & Permissions', icon: <Shield className=\"w-4 h-4\" />, href: '/team/roles' },\n      { id: 'invites', label: 'Pending Invites', icon: <MessageSquare className=\"w-4 h-4\" />, href: '/team/invites', badge: '2' }\n    ]\n  },\n  {\n    id: 'projects',\n    label: 'Projects',\n    icon: <Briefcase className=\"w-5 h-5\" />,\n    children: [\n      { id: 'active', label: 'Active Projects', icon: <Package className=\"w-4 h-4\" />, href: '/projects/active', badge: '8' },\n      { id: 'archived', label: 'Archived', icon: <FileText className=\"w-4 h-4\" />, href: '/projects/archived' },\n      { id: 'templates', label: 'Templates', icon: <Building2 className=\"w-4 h-4\" />, href: '/projects/templates' }\n    ]\n  },\n  {\n    id: 'calendar',\n    label: 'Calendar',\n    icon: <Calendar className=\"w-5 h-5\" />,\n    href: '/calendar',\n    badge: 'New'\n  },\n  {\n    id: 'messages',\n    label: 'Messages',\n    icon: <MessageSquare className=\"w-5 h-5\" />,\n    href: '/messages',\n    badge: '5'\n  },\n  {\n    id: 'billing',\n    label: 'Billing',\n    icon: <CreditCard className=\"w-5 h-5\" />,\n    href: '/billing',\n    disabled: true\n  },\n  {\n    id: 'settings',\n    label: 'Settings',\n    icon: <Settings className=\"w-5 h-5\" />,\n    children: [\n      { id: 'general', label: 'General', icon: <Settings className=\"w-4 h-4\" />, href: '/settings/general' },\n      { id: 'security', label: 'Security', icon: <Shield className=\"w-4 h-4\" />, href: '/settings/security' },\n      { id: 'notifications', label: 'Notifications', icon: <Bell className=\"w-4 h-4\" />, href: '/settings/notifications' }\n    ]\n  }\n]\n\nconst bottomMenuItems: MenuItem[] = [\n  {\n    id: 'help',\n    label: 'Help & Support',\n    icon: <HelpCircle className=\"w-5 h-5\" />,\n    href: '/help'\n  },\n  {\n    id: 'logout',\n    label: 'Log Out',\n    icon: <LogOut className=\"w-5 h-5\" />,\n    href: '/logout'\n  }\n]\n\nexport function VerticalSidebar() {\n  const [isCollapsed, setIsCollapsed] = useState(false)\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set(['analytics', 'team']))\n  const [activeItem, setActiveItem] = useState('dashboard')\n  const [showWorkspaceMenu, setShowWorkspaceMenu] = useState(false)\n  const [selectedWorkspace, setSelectedWorkspace] = useState(workspaces[0])\n  const [searchQuery, setSearchQuery] = useState('')\n  const [showTooltip, setShowTooltip] = useState<string | null>(null)\n  \n  const sidebarRef = useRef<HTMLDivElement>(null)\n  const workspaceMenuRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (workspaceMenuRef.current && !workspaceMenuRef.current.contains(event.target as Node)) {\n        setShowWorkspaceMenu(false)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => document.removeEventListener('mousedown', handleClickOutside)\n  }, [])\n\n  const toggleExpanded = (itemId: string) => {\n    const newExpanded = new Set(expandedItems)\n    if (newExpanded.has(itemId)) {\n      newExpanded.delete(itemId)\n    } else {\n      newExpanded.add(itemId)\n    }\n    setExpandedItems(newExpanded)\n  }\n\n  const handleItemClick = (itemId: string, hasChildren: boolean) => {\n    if (hasChildren) {\n      toggleExpanded(itemId)\n    } else {\n      setActiveItem(itemId)\n    }\n  }\n\n  const filterMenuItems = (items: MenuItem[], query: string): MenuItem[] => {\n    if (!query) return items\n    \n    return items.reduce((acc: MenuItem[], item) => {\n      const matchesLabel = item.label.toLowerCase().includes(query.toLowerCase())\n      const filteredChildren = item.children ? filterMenuItems(item.children, query) : []\n      \n      if (matchesLabel || filteredChildren.length > 0) {\n        acc.push({\n          ...item,\n          children: filteredChildren.length > 0 ? filteredChildren : item.children\n        })\n      }\n      \n      return acc\n    }, [])\n  }\n\n  const filteredMenuItems = filterMenuItems(menuItems, searchQuery)\n\n  const renderMenuItem = (item: MenuItem, isNested = false) => {\n    const isExpanded = expandedItems.has(item.id)\n    const isActive = activeItem === item.id || item.children?.some(child => activeItem === child.id)\n    const hasChildren = item.children && item.children.length > 0\n\n    return (\n      <div key={item.id}>\n        <motion.div\n          className=\"relative\"\n          onHoverStart={() => isCollapsed && !isNested && setShowTooltip(item.id)}\n          onHoverEnd={() => setShowTooltip(null)}\n        >\n          <button\n            onClick={() => handleItemClick(item.id, !!hasChildren)}\n            disabled={item.disabled}\n            className={`\n              w-full flex items-center gap-3 px-3 py-2.5 rounded-lg transition-all duration-200\n              ${isNested ? 'text-sm' : ''}\n              ${isActive\n                ? 'bg-blue-50 text-blue-600 font-medium'\n                : 'text-gray-700 hover:bg-gray-100'\n              }\n              ${item.disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n              ${isCollapsed && !isNested ? 'justify-center' : ''}\n            `}\n          >\n            <span className={`flex-shrink-0 ${isNested ? 'ml-3' : ''}`}>\n              {item.icon}\n            </span>\n            \n            {!isCollapsed && (\n              <>\n                <span className=\"flex-1 text-left truncate\">{item.label}</span>\n                \n                {item.badge && (\n                  <span className={`\n                    px-2 py-0.5 text-xs rounded-full flex-shrink-0\n                    ${typeof item.badge === 'number' || !isNaN(Number(item.badge))\n                      ? 'bg-red-100 text-red-600'\n                      : 'bg-blue-100 text-blue-600'\n                    }\n                  `}>\n                    {item.badge}\n                  </span>\n                )}\n                \n                {hasChildren && (\n                  <motion.span\n                    animate={{ rotate: isExpanded ? 180 : 0 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <ChevronDown className=\"w-4 h-4\" />\n                  </motion.span>\n                )}\n              </>\n            )}\n            \n            {isCollapsed && item.badge && (\n              <span className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full\" />\n            )}\n          </button>\n          \n          {/* Tooltip for collapsed state */}\n          <AnimatePresence>\n            {isCollapsed && showTooltip === item.id && (\n              <motion.div\n                initial={{ opacity: 0, x: -10 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: -10 }}\n                className=\"absolute left-full ml-2 top-1/2 -translate-y-1/2 z-50\"\n              >\n                <div className=\"bg-gray-900 text-white text-sm px-3 py-2 rounded-lg whitespace-nowrap\">\n                  {item.label}\n                  {item.badge && (\n                    <span className=\"ml-2 px-2 py-0.5 text-xs bg-white/20 rounded-full\">\n                      {item.badge}\n                    </span>\n                  )}\n                  <div className=\"absolute top-1/2 -left-1 -translate-y-1/2 w-2 h-2 bg-gray-900 rotate-45\" />\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n        \n        {/* Nested Items */}\n        <AnimatePresence>\n          {hasChildren && isExpanded && !isCollapsed && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: 'auto', opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"overflow-hidden\"\n            >\n              <div className=\"ml-3 mt-1 space-y-1\">\n                {item.children.map(child => renderMenuItem(child, true))}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    )\n  }\n\n  return (\n    <div\n      ref={sidebarRef}\n      className={`\n        h-screen bg-white border-r border-gray-200 flex flex-col transition-all duration-300\n        ${isCollapsed ? 'w-20' : 'w-64'}\n      `}\n    >\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          {!isCollapsed ? (\n            <div className=\"relative\" ref={workspaceMenuRef}>\n              <button\n                onClick={() => setShowWorkspaceMenu(!showWorkspaceMenu)}\n                className=\"w-full flex items-center gap-3 p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium\">\n                  {selectedWorkspace.icon}\n                </div>\n                <div className=\"flex-1 text-left\">\n                  <p className=\"text-sm font-medium text-gray-900 truncate\">\n                    {selectedWorkspace.name}\n                  </p>\n                  <p className=\"text-xs text-gray-500 capitalize\">\n                    {selectedWorkspace.plan} plan\n                  </p>\n                </div>\n                <ChevronDown className=\"w-4 h-4 text-gray-400\" />\n              </button>\n              \n              {/* Workspace Menu */}\n              <AnimatePresence>\n                {showWorkspaceMenu && (\n                  <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    className=\"absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden z-50\"\n                  >\n                    <div className=\"p-2\">\n                      <p className=\"px-3 py-2 text-xs font-medium text-gray-500 uppercase\">Workspaces</p>\n                      {workspaces.map((workspace) => (\n                        <button\n                          key={workspace.id}\n                          onClick={() => {\n                            setSelectedWorkspace(workspace)\n                            setShowWorkspaceMenu(false)\n                          }}\n                          className=\"w-full flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-gray-100 transition-colors\"\n                        >\n                          <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium text-sm\">\n                            {workspace.icon}\n                          </div>\n                          <div className=\"flex-1 text-left\">\n                            <p className=\"text-sm font-medium text-gray-900\">\n                              {workspace.name}\n                            </p>\n                            <p className=\"text-xs text-gray-500 capitalize\">\n                              {workspace.plan} plan\n                            </p>\n                          </div>\n                          {selectedWorkspace.id === workspace.id && (\n                            <Check className=\"w-4 h-4 text-blue-600\" />\n                          )}\n                        </button>\n                      ))}\n                    </div>\n                    <div className=\"border-t border-gray-200 p-2\">\n                      <button className=\"w-full flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-gray-100 transition-colors\">\n                        <div className=\"w-8 h-8 rounded-lg border-2 border-dashed border-gray-300 flex items-center justify-center\">\n                          <Plus className=\"w-4 h-4 text-gray-400\" />\n                        </div>\n                        <span className=\"text-sm font-medium text-gray-700\">Create workspace</span>\n                      </button>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          ) : (\n            <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium\">\n              {selectedWorkspace.icon}\n            </div>\n          )}\n          \n          <button\n            onClick={() => setIsCollapsed(!isCollapsed)}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <Menu className=\"w-5 h-5 text-gray-600\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Search */}\n      {!isCollapsed && (\n        <div className=\"p-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 bg-gray-100 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white\"\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Menu Items */}\n      <div className=\"flex-1 overflow-y-auto custom-scrollbar px-3 py-2\">\n        <nav className=\"space-y-1\">\n          {filteredMenuItems.map(item => renderMenuItem(item))}\n        </nav>\n      </div>\n\n      {/* Bottom Menu */}\n      <div className=\"border-t border-gray-200 p-3\">\n        <nav className=\"space-y-1\">\n          {bottomMenuItems.map(item => renderMenuItem(item))}\n        </nav>\n        \n        {/* User Profile */}\n        <div className={`mt-4 flex items-center gap-3 p-3 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer ${isCollapsed ? 'justify-center' : ''}`}>\n          <img\n            src=\"https://i.pravatar.cc/150?img=1\"\n            alt=\"User\"\n            className=\"w-8 h-8 rounded-full\"\n          />\n          {!isCollapsed && (\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-900\">John Doe</p>\n              <p className=\"text-xs text-gray-500\">john@example.com</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Custom Scrollbar Styles */}\n      <style jsx>{`\n        .custom-scrollbar::-webkit-scrollbar {\n          width: 6px;\n        }\n        .custom-scrollbar::-webkit-scrollbar-track {\n          background: transparent;\n        }\n        .custom-scrollbar::-webkit-scrollbar-thumb {\n          background: #e5e7eb;\n          border-radius: 3px;\n        }\n        .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n          background: #d1d5db;\n        }\n      `}</style>\n    </div>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible navigation components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, responsive design, animations, and modern patterns."}, {"role": "user", "content": "Create a breadcrumb navigation component with dropdown menus for long paths, keyboard navigation, and mobile-responsive design."}, {"role": "assistant", "content": "```tsx\nimport React, { useState, useRef, useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { ChevronRight, Home, MoreHorizontal, ChevronDown, Folder, File, Clock, Star } from 'lucide-react'\n\ninterface BreadcrumbItem {\n  id: string\n  label: string\n  href: string\n  icon?: React.ReactNode\n  children?: BreadcrumbItem[]\n  metadata?: {\n    lastModified?: string\n    starred?: boolean\n    description?: string\n  }\n}\n\ninterface BreadcrumbProps {\n  items: BreadcrumbItem[]\n  maxItems?: number\n  onNavigate?: (item: BreadcrumbItem) => void\n}\n\nconst sampleBreadcrumbs: BreadcrumbItem[] = [\n  {\n    id: 'home',\n    label: 'Home',\n    href: '/',\n    icon: <Home className=\"w-4 h-4\" />\n  },\n  {\n    id: 'documents',\n    label: 'Documents',\n    href: '/documents',\n    icon: <Folder className=\"w-4 h-4\" />,\n    children: [\n      { id: 'recent', label: 'Recent', href: '/documents/recent', icon: <Clock className=\"w-4 h-4\" /> },\n      { id: 'starred', label: 'Starred', href: '/documents/starred', icon: <Star className=\"w-4 h-4\" /> },\n      { id: 'shared', label: 'Shared with me', href: '/documents/shared', icon: <Folder className=\"w-4 h-4\" /> }\n    ]\n  },\n  {\n    id: 'projects',\n    label: 'Projects',\n    href: '/documents/projects',\n    icon: <Folder className=\"w-4 h-4\" />,\n    children: [\n      { id: 'project-alpha', label: 'Project Alpha', href: '/documents/projects/alpha' },\n      { id: 'project-beta', label: 'Project Beta', href: '/documents/projects/beta' },\n      { id: 'project-gamma', label: 'Project Gamma', href: '/documents/projects/gamma' }\n    ]\n  },\n  {\n    id: 'q4-planning',\n    label: 'Q4 Planning',\n    href: '/documents/projects/q4-planning',\n    icon: <Folder className=\"w-4 h-4\" />,\n    children: [\n      { id: 'roadmap', label: 'Roadmap', href: '/documents/projects/q4-planning/roadmap' },\n      { id: 'budget', label: 'Budget', href: '/documents/projects/q4-planning/budget' },\n      { id: 'timeline', label: 'Timeline', href: '/documents/projects/q4-planning/timeline' }\n    ]\n  },\n  {\n    id: 'reports',\n    label: 'Reports',\n    href: '/documents/projects/q4-planning/reports',\n    icon: <Folder className=\"w-4 h-4\" />,\n    metadata: {\n      lastModified: '2 hours ago',\n      starred: true\n    }\n  },\n  {\n    id: 'final-report',\n    label: 'Final Report.pdf',\n    href: '/documents/projects/q4-planning/reports/final-report.pdf',\n    icon: <File className=\"w-4 h-4\" />,\n    metadata: {\n      lastModified: '30 minutes ago',\n      description: 'Q4 2024 Financial Report'\n    }\n  }\n]\n\nexport function BreadcrumbNavigation({ \n  items = sampleBreadcrumbs, \n  maxItems = 4,\n  onNavigate \n}: BreadcrumbProps) {\n  const [activeDropdown, setActiveDropdown] = useState<string | null>(null)\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n  const [isMobile, setIsMobile] = useState(false)\n  const dropdownRefs = useRef<Record<string, HTMLDivElement>>({})\n  const breadcrumbRefs = useRef<Record<string, HTMLButtonElement>>({})\n\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 640)\n    }\n    checkMobile()\n    window.addEventListener('resize', checkMobile)\n    return () => window.removeEventListener('resize', checkMobile)\n  }, [])\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const isClickInside = Object.values(dropdownRefs.current).some(ref => \n        ref && ref.contains(event.target as Node)\n      )\n      if (!isClickInside) {\n        setActiveDropdown(null)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => document.removeEventListener('mousedown', handleClickOutside)\n  }, [])\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!items.length) return\n\n      switch (e.key) {\n        case 'ArrowLeft':\n          e.preventDefault()\n          setFocusedIndex(prev => Math.max(0, prev - 1))\n          break\n        case 'ArrowRight':\n          e.preventDefault()\n          setFocusedIndex(prev => Math.min(items.length - 1, prev + 1))\n          break\n        case 'Enter':\n        case ' ':\n          if (focusedIndex >= 0 && focusedIndex < items.length) {\n            e.preventDefault()\n            const item = getVisibleItems()[focusedIndex]\n            if (item) {\n              handleItemClick(item)\n            }\n          }\n          break\n        case 'Escape':\n          setActiveDropdown(null)\n          setFocusedIndex(-1)\n          break\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [focusedIndex, items])\n\n  useEffect(() => {\n    if (focusedIndex >= 0) {\n      const visibleItems = getVisibleItems()\n      const item = visibleItems[focusedIndex]\n      if (item && breadcrumbRefs.current[item.id]) {\n        breadcrumbRefs.current[item.id].focus()\n      }\n    }\n  }, [focusedIndex])\n\n  const getVisibleItems = () => {\n    if (isMobile && items.length > 2) {\n      return [items[0], { id: 'ellipsis', label: '...', href: '#' }, items[items.length - 1]]\n    }\n    \n    if (items.length <= maxItems) {\n      return items\n    }\n\n    const firstItem = items[0]\n    const lastItems = items.slice(-(maxItems - 2))\n    return [firstItem, { id: 'ellipsis', label: '...', href: '#' }, ...lastItems]\n  }\n\n  const getCollapsedItems = () => {\n    if (isMobile && items.length > 2) {\n      return items.slice(1, -1)\n    }\n    \n    if (items.length <= maxItems) {\n      return []\n    }\n    \n    return items.slice(1, -(maxItems - 2))\n  }\n\n  const handleItemClick = (item: BreadcrumbItem) => {\n    if (item.id === 'ellipsis') {\n      setActiveDropdown('ellipsis')\n    } else if (item.children && item.children.length > 0) {\n      setActiveDropdown(activeDropdown === item.id ? null : item.id)\n    } else {\n      if (onNavigate) {\n        onNavigate(item)\n      } else {\n        console.log('Navigate to:', item.href)\n      }\n      setActiveDropdown(null)\n    }\n  }\n\n  const renderBreadcrumbItem = (item: BreadcrumbItem, index: number, isLast: boolean) => {\n    const isActive = activeDropdown === item.id\n    const isEllipsis = item.id === 'ellipsis'\n    const collapsedItems = getCollapsedItems()\n\n    return (\n      <React.Fragment key={item.id}>\n        <li className=\"flex items-center\">\n          <div className=\"relative\" ref={el => { if (el) dropdownRefs.current[item.id] = el }}>\n            <motion.button\n              ref={el => { if (el) breadcrumbRefs.current[item.id] = el }}\n              onClick={() => handleItemClick(item)}\n              onFocus={() => setFocusedIndex(index)}\n              onBlur={() => setFocusedIndex(-1)}\n              className={`\n                flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-all\n                ${isLast && !isEllipsis\n                  ? 'text-gray-900 bg-gray-100 cursor-default'\n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500'\n                }\n                ${focusedIndex === index ? 'ring-2 ring-blue-500' : ''}\n              `}\n              whileHover={!isLast ? { scale: 1.02 } : {}}\n              whileTap={!isLast ? { scale: 0.98 } : {}}\n            >\n              {item.icon && <span className=\"flex-shrink-0\">{item.icon}</span>}\n              <span className={`${isMobile && !isEllipsis ? 'max-w-[100px] truncate' : ''}`}>\n                {isEllipsis ? <MoreHorizontal className=\"w-4 h-4\" /> : item.label}\n              </span>\n              {item.children && item.children.length > 0 && !isEllipsis && (\n                <ChevronDown className={`w-3 h-3 transition-transform ${isActive ? 'rotate-180' : ''}`} />\n              )}\n              {item.metadata?.starred && (\n                <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n              )}\n            </motion.button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {isActive && (item.children || isEllipsis) && (\n                <motion.div\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -10 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"absolute top-full left-0 mt-2 w-64 bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden z-50\"\n                >\n                  <div className=\"max-h-80 overflow-y-auto\">\n                    {isEllipsis ? (\n                      <div className=\"py-2\">\n                        {collapsedItems.map((collapsedItem, idx) => (\n                          <button\n                            key={collapsedItem.id}\n                            onClick={() => {\n                              handleItemClick(collapsedItem)\n                              setActiveDropdown(null)\n                            }}\n                            className=\"w-full flex items-center gap-3 px-4 py-2.5 text-left hover:bg-gray-50 transition-colors\"\n                          >\n                            <span className=\"flex-shrink-0 text-gray-400\">\n                              {collapsedItem.icon || <Folder className=\"w-4 h-4\" />}\n                            </span>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium text-gray-900 truncate\">\n                                {collapsedItem.label}\n                              </p>\n                              <p className=\"text-xs text-gray-500\">in {items[idx].label}</p>\n                            </div>\n                            <ChevronRight className=\"w-4 h-4 text-gray-400 flex-shrink-0\" />\n                          </button>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"py-2\">\n                        <div className=\"px-4 py-2 border-b border-gray-100\">\n                          <p className=\"text-xs font-medium text-gray-500 uppercase\">Navigate to</p>\n                        </div>\n                        {item.children?.map((child) => (\n                          <button\n                            key={child.id}\n                            onClick={() => {\n                              if (onNavigate) {\n                                onNavigate(child)\n                              } else {\n                                console.log('Navigate to:', child.href)\n                              }\n                              setActiveDropdown(null)\n                            }}\n                            className=\"w-full flex items-center gap-3 px-4 py-2.5 text-left hover:bg-gray-50 transition-colors\"\n                          >\n                            <span className=\"flex-shrink-0 text-gray-400\">\n                              {child.icon || <Folder className=\"w-4 h-4\" />}\n                            </span>\n                            <span className=\"text-sm font-medium text-gray-900\">\n                              {child.label}\n                            </span>\n                          </button>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                  {item.metadata && (\n                    <div className=\"px-4 py-3 bg-gray-50 border-t border-gray-100\">\n                      {item.metadata.lastModified && (\n                        <p className=\"text-xs text-gray-500 flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          Modified {item.metadata.lastModified}\n                        </p>\n                      )}\n                      {item.metadata.description && (\n                        <p className=\"text-xs text-gray-600 mt-1\">\n                          {item.metadata.description}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        </li>\n        \n        {!isLast && (\n          <li className=\"flex items-center px-2\">\n            <ChevronRight className=\"w-4 h-4 text-gray-400\" />\n          </li>\n        )}\n      </React.Fragment>\n    )\n  }\n\n  const visibleItems = getVisibleItems()\n\n  return (\n    <nav aria-label=\"Breadcrumb\" className=\"w-full\">\n      <motion.ol \n        className=\"flex items-center flex-wrap\"\n        initial={{ opacity: 0, y: -10 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        {visibleItems.map((item, index) => \n          renderBreadcrumbItem(item, index, index === visibleItems.length - 1)\n        )}\n      </motion.ol>\n      \n      {/* Mobile Indicator */}\n      {isMobile && items.length > 2 && (\n        <motion.p \n          className=\"text-xs text-gray-500 mt-2 ml-3\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.3 }}\n        >\n          {items.length - 2} more items\n        </motion.p>\n      )}\n    </nav>\n  )\n}\n\n// Example usage component\nexport function BreadcrumbExample() {\n  const handleNavigate = (item: BreadcrumbItem) => {\n    console.log('Navigating to:', item)\n    // In a real app, you would use your router here\n    // e.g., router.push(item.href)\n  }\n\n  return (\n    <div className=\"p-8 bg-gray-50 min-h-screen\">\n      <div className=\"max-w-6xl mx-auto space-y-8\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Breadcrumb Navigation</h1>\n          <p className=\"text-gray-600 mb-6\">Navigate through nested paths with dropdown menus and keyboard support</p>\n        </div>\n        \n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n          <BreadcrumbNavigation \n            items={sampleBreadcrumbs} \n            maxItems={4}\n            onNavigate={handleNavigate}\n          />\n        </div>\n        \n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Features</h2>\n          <ul className=\"space-y-2 text-sm text-gray-600\">\n            <li className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-0.5\">✓</span>\n              <span>Responsive design with mobile optimization</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-0.5\">✓</span>\n              <span>Dropdown menus for child navigation</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-0.5\">✓</span>\n              <span>Keyboard navigation (Arrow keys, Enter, Escape)</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-0.5\">✓</span>\n              <span>Collapsible long paths with ellipsis menu</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-0.5\">✓</span>\n              <span>Metadata display (last modified, descriptions)</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-0.5\">✓</span>\n              <span>Icon support and visual indicators</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n```"}]}