{"prompt": "Create a modern pricing card component with monthly/yearly toggle, three tiers (Basic, Pro, Enterprise), gradient backgrounds for the recommended tier, and smooth animations", "completion": "import React, { useState } from 'react';\n\ninterface PricingTier {\n  id: string;\n  name: string;\n  monthlyPrice: number;\n  yearlyPrice: number;\n  description: string;\n  features: string[];\n  recommended?: boolean;\n  buttonText: string;\n  buttonVariant?: 'primary' | 'secondary' | 'outline';\n}\n\ninterface PricingCardsProps {\n  tiers: PricingTier[];\n  onSelectPlan?: (tierId: string, billingPeriod: 'monthly' | 'yearly') => void;\n}\n\nexport const PricingCards: React.FC<PricingCardsProps> = ({ tiers, onSelectPlan }) => {\n  const [isYearly, setIsYearly] = useState(false);\n  const [hoveredTier, setHoveredTier] = useState<string | null>(null);\n\n  const handleSelectPlan = (tierId: string) => {\n    onSelectPlan?.(tierId, isYearly ? 'yearly' : 'monthly');\n  };\n\n  const calculateSavings = (monthlyPrice: number, yearlyPrice: number) => {\n    const yearlyCost = monthlyPrice * 12;\n    const savings = yearlyCost - yearlyPrice;\n    const savingsPercentage = Math.round((savings / yearlyCost) * 100);\n    return { amount: savings, percentage: savingsPercentage };\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      {/* Billing Toggle */}\n      <div className=\"flex items-center justify-center mb-12\">\n        <span className={`mr-3 text-lg font-medium transition-colors duration-200 ${\n          !isYearly ? 'text-gray-900' : 'text-gray-500'\n        }`}>\n          Monthly billing\n        </span>\n        <button\n          onClick={() => setIsYearly(!isYearly)}\n          className=\"relative inline-flex h-7 w-14 items-center rounded-full bg-gray-200 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\"\n          role=\"switch\"\n          aria-checked={isYearly}\n          aria-label=\"Toggle between monthly and yearly billing\"\n        >\n          <span className={`inline-block h-5 w-5 transform rounded-full bg-white shadow-lg transition-transform duration-300 ${\n            isYearly ? 'translate-x-7' : 'translate-x-1'\n          }`} />\n        </button>\n        <span className={`ml-3 text-lg font-medium transition-colors duration-200 ${\n          isYearly ? 'text-gray-900' : 'text-gray-500'\n        }`}>\n          Yearly billing\n          <span className=\"ml-2 inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800\">\n            Save 20%\n          </span>\n        </span>\n      </div>\n\n      {/* Pricing Cards */}\n      <div className=\"grid grid-cols-1 gap-8 md:grid-cols-3 md:gap-6 lg:gap-8\">\n        {tiers.map((tier) => {\n          const currentPrice = isYearly ? tier.yearlyPrice : tier.monthlyPrice;\n          const period = isYearly ? 'year' : 'month';\n          const savings = calculateSavings(tier.monthlyPrice, tier.yearlyPrice);\n          const isHovered = hoveredTier === tier.id;\n\n          return (\n            <div\n              key={tier.id}\n              onMouseEnter={() => setHoveredTier(tier.id)}\n              onMouseLeave={() => setHoveredTier(null)}\n              className={`relative rounded-2xl transition-all duration-300 ${\n                tier.recommended\n                  ? 'scale-105'\n                  : isHovered ? 'scale-102' : 'scale-100'\n              }`}\n            >\n              {/* Recommended Badge */}\n              {tier.recommended && (\n                <div className=\"absolute -top-5 left-0 right-0 flex justify-center\">\n                  <span className=\"inline-flex items-center rounded-full bg-gradient-to-r from-purple-600 to-blue-600 px-4 py-1 text-sm font-semibold text-white shadow-lg\">\n                    <svg className=\"mr-1.5 h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" clipRule=\"evenodd\" />\n                    </svg>\n                    Most Popular\n                  </span>\n                </div>\n              )}\n\n              {/* Card */}\n              <div className={`h-full rounded-2xl p-8 shadow-xl transition-all duration-300 ${\n                tier.recommended\n                  ? 'bg-gradient-to-br from-purple-600 via-purple-700 to-blue-700 text-white'\n                  : 'bg-white hover:shadow-2xl'\n              }`}>\n                {/* Header */}\n                <div className=\"mb-8\">\n                  <h3 className={`text-2xl font-bold ${\n                    tier.recommended ? 'text-white' : 'text-gray-900'\n                  }`}>\n                    {tier.name}\n                  </h3>\n                  <p className={`mt-2 text-sm ${\n                    tier.recommended ? 'text-purple-100' : 'text-gray-500'\n                  }`}>\n                    {tier.description}\n                  </p>\n                </div>\n\n                {/* Pricing */}\n                <div className=\"mb-8\">\n                  <div className=\"flex items-baseline\">\n                    <span className={`text-5xl font-extrabold tracking-tight ${\n                      tier.recommended ? 'text-white' : 'text-gray-900'\n                    }`}>\n                      ${currentPrice}\n                    </span>\n                    <span className={`ml-2 text-lg ${\n                      tier.recommended ? 'text-purple-100' : 'text-gray-500'\n                    }`}>\n                      /{period}\n                    </span>\n                  </div>\n                  {isYearly && savings.amount > 0 && (\n                    <p className={`mt-2 text-sm ${\n                      tier.recommended ? 'text-purple-100' : 'text-green-600'\n                    }`}>\n                      Save ${savings.amount} per year ({savings.percentage}% off)\n                    </p>\n                  )}\n                </div>\n\n                {/* Features */}\n                <ul className=\"mb-8 space-y-4\">\n                  {tier.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <svg\n                        className={`h-5 w-5 shrink-0 ${\n                          tier.recommended ? 'text-purple-200' : 'text-green-500'\n                        }`}\n                        fill=\"currentColor\"\n                        viewBox=\"0 0 20 20\"\n                      >\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                      </svg>\n                      <span className={`ml-3 text-base ${\n                        tier.recommended ? 'text-white' : 'text-gray-700'\n                      }`}>\n                        {feature}\n                      </span>\n                    </li>\n                  ))}\n                </ul>\n\n                {/* CTA Button */}\n                <button\n                  onClick={() => handleSelectPlan(tier.id)}\n                  className={`w-full rounded-lg px-6 py-3 text-base font-semibold transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n                    tier.recommended\n                      ? 'bg-white text-purple-700 hover:bg-gray-50 focus:ring-white transform hover:scale-105'\n                      : tier.buttonVariant === 'primary'\n                      ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 focus:ring-purple-500 transform hover:scale-105'\n                      : 'border-2 border-gray-300 text-gray-700 hover:border-gray-400 hover:bg-gray-50 focus:ring-gray-500'\n                  }`}\n                  aria-label={`Select ${tier.name} plan for $${currentPrice} per ${period}`}\n                >\n                  {tier.buttonText}\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Additional Info */}\n      <div className=\"mt-12 text-center\">\n        <p className=\"text-sm text-gray-500\">\n          All plans include 14-day free trial • No credit card required • Cancel anytime\n        </p>\n      </div>\n    </div>\n  );\n};\n\n// Example usage:\nexport const PricingSection = () => {\n  const pricingTiers: PricingTier[] = [\n    {\n      id: 'basic',\n      name: 'Basic',\n      monthlyPrice: 29,\n      yearlyPrice: 278,\n      description: 'Perfect for individuals and small projects',\n      features: [\n        'Up to 5 projects',\n        '1,000 API calls/month',\n        'Basic analytics',\n        'Email support',\n        '48-hour response time'\n      ],\n      buttonText: 'Start free trial',\n      buttonVariant: 'outline'\n    },\n    {\n      id: 'pro',\n      name: 'Pro',\n      monthlyPrice: 79,\n      yearlyPrice: 758,\n      description: 'Ideal for growing teams and businesses',\n      features: [\n        'Unlimited projects',\n        '50,000 API calls/month',\n        'Advanced analytics & insights',\n        'Priority email & chat support',\n        '1-hour response time',\n        'Custom integrations',\n        'Team collaboration tools'\n      ],\n      recommended: true,\n      buttonText: 'Start free trial',\n      buttonVariant: 'primary'\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise',\n      monthlyPrice: 199,\n      yearlyPrice: 1910,\n      description: 'For large-scale operations and custom needs',\n      features: [\n        'Everything in Pro',\n        'Unlimited API calls',\n        'Custom analytics dashboards',\n        'Dedicated account manager',\n        '24/7 phone support',\n        'SLA guarantee',\n        'On-premise deployment option',\n        'Advanced security features'\n      ],\n      buttonText: 'Contact sales',\n      buttonVariant: 'outline'\n    }\n  ];\n\n  return (\n    <PricingCards\n      tiers={pricingTiers}\n      onSelectPlan={(tierId, period) => {\n        console.log(`Selected plan: ${tierId} - ${period}`);\n      }}\n    />\n  );\n};", "metadata": {"componentType": "pricing", "framework": "React", "complexity": "moderate", "tags": ["pricing", "toggle", "gradient", "animation", "recommended"]}}
{"prompt": "Build a simple pricing component with two plans side by side, highlighting the premium plan with a shadow and badge", "completion": "import React from 'react';\n\ninterface PricingPlan {\n  name: string;\n  price: number;\n  features: string[];\n  isPremium?: boolean;\n}\n\ninterface SimplePricingProps {\n  plans: PricingPlan[];\n  onSelectPlan?: (planName: string) => void;\n}\n\nexport const SimplePricing: React.FC<SimplePricingProps> = ({ plans, onSelectPlan }) => {\n  return (\n    <div className=\"max-w-4xl mx-auto p-8\">\n      <div className=\"text-center mb-10\">\n        <h2 className=\"text-3xl font-bold text-gray-900\">Choose Your Plan</h2>\n        <p className=\"mt-3 text-lg text-gray-600\">Select the perfect plan for your needs</p>\n      </div>\n      \n      <div className=\"grid md:grid-cols-2 gap-8\">\n        {plans.map((plan) => (\n          <div\n            key={plan.name}\n            className={`relative bg-white rounded-xl p-8 ${\n              plan.isPremium\n                ? 'shadow-2xl ring-2 ring-purple-500'\n                : 'shadow-lg hover:shadow-xl transition-shadow'\n            }`}\n          >\n            {plan.isPremium && (\n              <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                <span className=\"bg-purple-500 text-white px-4 py-1 rounded-full text-sm font-semibold\">\n                  RECOMMENDED\n                </span>\n              </div>\n            )}\n            \n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n              <div className=\"text-5xl font-bold text-gray-900\">\n                ${plan.price}\n                <span className=\"text-lg text-gray-500 font-normal\">/month</span>\n              </div>\n            </div>\n            \n            <ul className=\"space-y-3 mb-8\">\n              {plan.features.map((feature, index) => (\n                <li key={index} className=\"flex items-center\">\n                  <svg className=\"w-5 h-5 text-green-500 mr-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span className=\"text-gray-700\">{feature}</span>\n                </li>\n              ))}\n            </ul>\n            \n            <button\n              onClick={() => onSelectPlan?.(plan.name)}\n              className={`w-full py-3 px-6 rounded-lg font-semibold transition-colors ${\n                plan.isPremium\n                  ? 'bg-purple-600 text-white hover:bg-purple-700'\n                  : 'bg-gray-100 text-gray-900 hover:bg-gray-200'\n              }`}\n            >\n              Get Started\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Example usage:\nexport const PricingExample = () => {\n  const plans: PricingPlan[] = [\n    {\n      name: 'Starter',\n      price: 9,\n      features: [\n        '10 Projects',\n        'Basic Support',\n        '2GB Storage',\n        'Analytics'\n      ]\n    },\n    {\n      name: 'Professional',\n      price: 29,\n      features: [\n        'Unlimited Projects',\n        'Priority Support',\n        '100GB Storage',\n        'Advanced Analytics',\n        'Team Collaboration',\n        'Custom Integrations'\n      ],\n      isPremium: true\n    }\n  ];\n  \n  return <SimplePricing plans={plans} onSelectPlan={(plan) => console.log(`Selected: ${plan}`)} />;\n};", "metadata": {"componentType": "pricing", "framework": "React", "complexity": "simple", "tags": ["pricing", "cards", "shadow", "badge"]}}
{"prompt": "Create a pricing table component with feature comparison matrix, showing what's included in each plan with checkmarks and x marks", "completion": "import React from 'react';\n\ninterface Feature {\n  name: string;\n  description?: string;\n  includedIn: string[];\n}\n\ninterface Plan {\n  id: string;\n  name: string;\n  price: number;\n  period: string;\n  description: string;\n  highlighted?: boolean;\n}\n\ninterface PricingTableProps {\n  plans: Plan[];\n  features: Feature[];\n  onSelectPlan?: (planId: string) => void;\n}\n\nexport const PricingTable: React.FC<PricingTableProps> = ({ plans, features, onSelectPlan }) => {\n  const isFeatureIncluded = (feature: Feature, planId: string): boolean => {\n    return feature.includedIn.includes(planId);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Compare Plans</h2>\n        <p className=\"text-xl text-gray-600\">Choose the perfect plan for your business needs</p>\n      </div>\n\n      {/* Pricing Table */}\n      <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            {/* Table Header with Plans */}\n            <thead>\n              <tr>\n                <th className=\"sticky left-0 bg-white z-10 px-6 py-8 text-left\">\n                  <span className=\"sr-only\">Feature comparison</span>\n                </th>\n                {plans.map((plan) => (\n                  <th\n                    key={plan.id}\n                    className={`px-6 py-8 text-center ${\n                      plan.highlighted\n                        ? 'bg-gradient-to-b from-purple-50 to-purple-100'\n                        : 'bg-gray-50'\n                    }`}\n                  >\n                    <div className=\"space-y-4\">\n                      {plan.highlighted && (\n                        <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-600 text-white\">\n                          Most Popular\n                        </span>\n                      )}\n                      <h3 className=\"text-2xl font-bold text-gray-900\">{plan.name}</h3>\n                      <p className=\"text-sm text-gray-600\">{plan.description}</p>\n                      <div className=\"text-4xl font-bold text-gray-900\">\n                        ${plan.price}\n                        <span className=\"text-base font-normal text-gray-600\">/{plan.period}</span>\n                      </div>\n                      <button\n                        onClick={() => onSelectPlan?.(plan.id)}\n                        className={`w-full px-6 py-3 rounded-lg font-semibold transition-all duration-200 ${\n                          plan.highlighted\n                            ? 'bg-purple-600 text-white hover:bg-purple-700 transform hover:scale-105'\n                            : 'bg-white border-2 border-gray-300 text-gray-700 hover:border-gray-400'\n                        }`}\n                      >\n                        Get Started\n                      </button>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n\n            {/* Table Body with Features */}\n            <tbody className=\"divide-y divide-gray-200\">\n              <tr>\n                <td colSpan={plans.length + 1} className=\"px-6 py-4 bg-gray-50\">\n                  <h4 className=\"text-sm font-semibold text-gray-900 uppercase tracking-wider\">\n                    Features\n                  </h4>\n                </td>\n              </tr>\n              \n              {features.map((feature, featureIndex) => (\n                <tr key={featureIndex} className=\"hover:bg-gray-50 transition-colors\">\n                  <td className=\"sticky left-0 bg-white z-10 px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">{feature.name}</p>\n                      {feature.description && (\n                        <p className=\"text-xs text-gray-500 mt-1\">{feature.description}</p>\n                      )}\n                    </div>\n                  </td>\n                  \n                  {plans.map((plan) => {\n                    const included = isFeatureIncluded(feature, plan.id);\n                    return (\n                      <td\n                        key={plan.id}\n                        className={`px-6 py-4 text-center ${\n                          plan.highlighted ? 'bg-purple-50/30' : ''\n                        }`}\n                      >\n                        {included ? (\n                          <div className=\"inline-flex items-center justify-center\">\n                            <svg\n                              className=\"h-6 w-6 text-green-500\"\n                              fill=\"none\"\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"3\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                            <span className=\"sr-only\">Included</span>\n                          </div>\n                        ) : (\n                          <div className=\"inline-flex items-center justify-center\">\n                            <svg\n                              className=\"h-5 w-5 text-gray-400\"\n                              fill=\"none\"\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path d=\"M6 18L18 6M6 6l12 12\" />\n                            </svg>\n                            <span className=\"sr-only\">Not included</span>\n                          </div>\n                        )}\n                      </td>\n                    );\n                  })}\n                </tr>\n              ))}\n            </tbody>\n\n            {/* Table Footer */}\n            <tfoot>\n              <tr>\n                <td className=\"sticky left-0 bg-gray-50 z-10 px-6 py-6\">\n                  <span className=\"sr-only\">Choose a plan</span>\n                </td>\n                {plans.map((plan) => (\n                  <td\n                    key={plan.id}\n                    className={`px-6 py-6 text-center ${\n                      plan.highlighted ? 'bg-purple-50' : 'bg-gray-50'\n                    }`}\n                  >\n                    <button\n                      onClick={() => onSelectPlan?.(plan.id)}\n                      className={`px-6 py-2 rounded-lg font-medium transition-all duration-200 ${\n                        plan.highlighted\n                          ? 'bg-purple-600 text-white hover:bg-purple-700'\n                          : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'\n                      }`}\n                    >\n                      Choose {plan.name}\n                    </button>\n                  </td>\n                ))}\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n      </div>\n\n      {/* Additional Information */}\n      <div className=\"mt-12 text-center space-y-4\">\n        <p className=\"text-gray-600\">\n          All plans include SSL certificate, 99.9% uptime guarantee, and 24/7 monitoring\n        </p>\n        <p className=\"text-sm text-gray-500\">\n          Prices shown are billed monthly • Annual billing available with 20% discount\n        </p>\n      </div>\n    </div>\n  );\n};\n\n// Example usage:\nexport const PricingTableExample = () => {\n  const plans: Plan[] = [\n    {\n      id: 'starter',\n      name: 'Starter',\n      price: 19,\n      period: 'month',\n      description: 'Perfect for small projects'\n    },\n    {\n      id: 'professional',\n      name: 'Professional',\n      price: 49,\n      period: 'month',\n      description: 'For growing businesses',\n      highlighted: true\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise',\n      price: 99,\n      period: 'month',\n      description: 'For large organizations'\n    }\n  ];\n\n  const features: Feature[] = [\n    { name: 'Projects', description: 'Number of active projects', includedIn: ['starter', 'professional', 'enterprise'] },\n    { name: 'Storage', description: '10GB per project', includedIn: ['starter', 'professional', 'enterprise'] },\n    { name: 'Team Members', description: 'Collaborate with your team', includedIn: ['professional', 'enterprise'] },\n    { name: 'API Access', description: 'Programmatic access', includedIn: ['professional', 'enterprise'] },\n    { name: 'Advanced Analytics', description: 'Detailed insights', includedIn: ['professional', 'enterprise'] },\n    { name: 'Custom Integrations', includedIn: ['enterprise'] },\n    { name: 'Priority Support', description: '24/7 dedicated support', includedIn: ['enterprise'] },\n    { name: 'SLA Guarantee', description: '99.99% uptime', includedIn: ['enterprise'] },\n    { name: 'Custom Branding', includedIn: ['enterprise'] },\n    { name: 'Audit Logs', description: 'Complete activity history', includedIn: ['professional', 'enterprise'] }\n  ];\n\n  return (\n    <PricingTable\n      plans={plans}\n      features={features}\n      onSelectPlan={(planId) => console.log(`Selected plan: ${planId}`)}\n    />\n  );\n};", "metadata": {"componentType": "pricing", "framework": "React", "complexity": "complex", "tags": ["pricing", "table", "comparison", "matrix", "features"]}}
{"prompt": "Design a minimalist pricing component with a single featured plan, annual discount badge, and money-back guarantee", "completion": "import React, { useState } from 'react';\n\ninterface MinimalPricingProps {\n  productName: string;\n  monthlyPrice: number;\n  annualPrice: number;\n  features: string[];\n  guaranteeDays?: number;\n  onSubscribe?: (billingPeriod: 'monthly' | 'annual') => void;\n}\n\nexport const MinimalPricing: React.FC<MinimalPricingProps> = ({\n  productName,\n  monthlyPrice,\n  annualPrice,\n  features,\n  guaranteeDays = 30,\n  onSubscribe\n}) => {\n  const [isAnnual, setIsAnnual] = useState(true);\n  const currentPrice = isAnnual ? annualPrice : monthlyPrice;\n  const monthlyEquivalent = Math.round(annualPrice / 12);\n  const savings = monthlyPrice * 12 - annualPrice;\n  const savingsPercent = Math.round((savings / (monthlyPrice * 12)) * 100);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-white flex items-center justify-center p-4\">\n      <div className=\"max-w-lg w-full\">\n        {/* Product Name */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">{productName}</h1>\n          <p className=\"text-gray-600\">Everything you need to succeed</p>\n        </div>\n\n        {/* Pricing Card */}\n        <div className=\"bg-white rounded-3xl shadow-2xl overflow-hidden\">\n          {/* Billing Toggle */}\n          <div className=\"bg-gray-50 p-6 border-b border-gray-100\">\n            <div className=\"flex items-center justify-center space-x-4\">\n              <button\n                onClick={() => setIsAnnual(false)}\n                className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${\n                  !isAnnual\n                    ? 'bg-white text-gray-900 shadow-sm'\n                    : 'text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                Monthly\n              </button>\n              <button\n                onClick={() => setIsAnnual(true)}\n                className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 relative ${\n                  isAnnual\n                    ? 'bg-white text-gray-900 shadow-sm'\n                    : 'text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                Annual\n                {isAnnual && (\n                  <span className=\"absolute -top-2 -right-2 bg-green-500 text-white text-xs px-2 py-0.5 rounded-full font-semibold\">\n                    -{savingsPercent}%\n                  </span>\n                )}\n              </button>\n            </div>\n          </div>\n\n          {/* Price Display */}\n          <div className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <div className=\"flex items-baseline justify-center mb-2\">\n                <span className=\"text-6xl font-bold text-gray-900\">\n                  ${isAnnual ? monthlyEquivalent : currentPrice}\n                </span>\n                <span className=\"text-xl text-gray-500 ml-2\">/month</span>\n              </div>\n              {isAnnual && (\n                <div className=\"space-y-1\">\n                  <p className=\"text-sm text-gray-600\">\n                    Billed annually at ${annualPrice}\n                  </p>\n                  <p className=\"text-sm font-medium text-green-600\">\n                    Save ${savings} per year\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Features List */}\n            <div className=\"space-y-4 mb-8\">\n              {features.map((feature, index) => (\n                <div key={index} className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 mt-0.5\">\n                    <svg\n                      className=\"h-5 w-5 text-purple-500\"\n                      fill=\"currentColor\"\n                      viewBox=\"0 0 20 20\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                  </div>\n                  <span className=\"ml-3 text-gray-700\">{feature}</span>\n                </div>\n              ))}\n            </div>\n\n            {/* CTA Button */}\n            <button\n              onClick={() => onSubscribe?.(isAnnual ? 'annual' : 'monthly')}\n              className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-4 px-6 rounded-xl font-semibold text-lg hover:from-purple-700 hover:to-blue-700 transform hover:scale-105 transition-all duration-200 shadow-lg\"\n            >\n              Start Your Free Trial\n            </button>\n\n            {/* Money Back Guarantee */}\n            <div className=\"mt-6 text-center\">\n              <div className=\"inline-flex items-center text-sm text-gray-600\">\n                <svg\n                  className=\"h-5 w-5 text-green-500 mr-2\"\n                  fill=\"none\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                </svg>\n                <span>{guaranteeDays}-day money-back guarantee</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Trust Indicators */}\n        <div className=\"mt-8 text-center space-y-4\">\n          <div className=\"flex items-center justify-center space-x-6 text-sm text-gray-500\">\n            <span className=\"flex items-center\">\n              <svg className=\"h-4 w-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              SSL Secured\n            </span>\n            <span className=\"flex items-center\">\n              <svg className=\"h-4 w-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4z\" />\n                <path fillRule=\"evenodd\" d=\"M18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z\" clipRule=\"evenodd\" />\n              </svg>\n              Secure Payment\n            </span>\n          </div>\n          <p className=\"text-xs text-gray-400\">\n            Cancel anytime • No setup fees • Instant access\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Example usage:\nexport const MinimalPricingExample = () => {\n  return (\n    <MinimalPricing\n      productName=\"Pro Plan\"\n      monthlyPrice={49}\n      annualPrice={470}\n      features={[\n        'Unlimited projects and collaborators',\n        'Advanced analytics and reporting',\n        'Priority 24/7 customer support',\n        'Custom integrations and API access',\n        'Advanced security and compliance',\n        'Dedicated account manager'\n      ]}\n      guaranteeDays={30}\n      onSubscribe={(period) => console.log(`Subscribed: ${period}`)}\n    />\n  );\n};", "metadata": {"componentType": "pricing", "framework": "React", "complexity": "moderate", "tags": ["pricing", "minimal", "discount", "guarantee", "single-plan"]}}
{"prompt": "Create a SaaS pricing component with three tiers, feature tooltips, currency selector, and a slider to show savings based on team size", "completion": "import React, { useState, useRef } from 'react';\n\ninterface Currency {\n  code: string;\n  symbol: string;\n  rate: number; // Conversion rate from USD\n}\n\ninterface PricingTier {\n  id: string;\n  name: string;\n  description: string;\n  basePrice: number; // Base price in USD\n  pricePerUser: number; // Additional price per user in USD\n  features: Array<{\n    name: string;\n    included: boolean;\n    tooltip?: string;\n  }>;\n  recommended?: boolean;\n  maxUsers?: number;\n}\n\ninterface SaaSPricingProps {\n  tiers: PricingTier[];\n  currencies: Currency[];\n  onSelectPlan?: (tierId: string, users: number, currency: string) => void;\n}\n\nexport const SaaSPricing: React.FC<SaaSPricingProps> = ({ tiers, currencies, onSelectPlan }) => {\n  const [selectedCurrency, setSelectedCurrency] = useState<Currency>(currencies[0]);\n  const [teamSize, setTeamSize] = useState(5);\n  const [hoveredFeature, setHoveredFeature] = useState<string | null>(null);\n  const [isAnnual, setIsAnnual] = useState(true);\n\n  const calculatePrice = (tier: PricingTier, users: number, annual: boolean = false) => {\n    const basePrice = tier.basePrice + (tier.pricePerUser * Math.max(0, users - 1));\n    const price = basePrice * selectedCurrency.rate;\n    const finalPrice = annual ? price * 12 * 0.8 : price; // 20% discount for annual\n    return Math.round(finalPrice);\n  };\n\n  const calculateSavings = (monthlyPrice: number) => {\n    const annualPrice = monthlyPrice * 12 * 0.8;\n    return Math.round(monthlyPrice * 12 - annualPrice);\n  };\n\n  const Tooltip: React.FC<{ text: string; children: React.ReactNode }> = ({ text, children }) => {\n    const [show, setShow] = useState(false);\n    const tooltipRef = useRef<HTMLDivElement>(null);\n\n    return (\n      <div className=\"relative inline-block\">\n        <div\n          onMouseEnter={() => setShow(true)}\n          onMouseLeave={() => setShow(false)}\n        >\n          {children}\n        </div>\n        {show && (\n          <div\n            ref={tooltipRef}\n            className=\"absolute z-20 bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg whitespace-nowrap\"\n          >\n            {text}\n            <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 -mt-1\">\n              <div className=\"border-4 border-transparent border-t-gray-900\" />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n          Pricing that scales with your team\n        </h2>\n        <p className=\"text-xl text-gray-600\">\n          Start free, upgrade when you need to. No credit card required.\n        </p>\n      </div>\n\n      {/* Controls */}\n      <div className=\"mb-12 space-y-6\">\n        {/* Currency and Billing Toggle */}\n        <div className=\"flex flex-col sm:flex-row items-center justify-center gap-6\">\n          {/* Currency Selector */}\n          <div className=\"flex items-center gap-2\">\n            <label className=\"text-sm font-medium text-gray-700\">Currency:</label>\n            <select\n              value={selectedCurrency.code}\n              onChange={(e) => {\n                const currency = currencies.find(c => c.code === e.target.value);\n                if (currency) setSelectedCurrency(currency);\n              }}\n              className=\"px-3 py-1.5 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n            >\n              {currencies.map((currency) => (\n                <option key={currency.code} value={currency.code}>\n                  {currency.code} ({currency.symbol})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Billing Toggle */}\n          <div className=\"flex items-center gap-3\">\n            <span className={`text-sm font-medium ${\n              !isAnnual ? 'text-gray-900' : 'text-gray-500'\n            }`}>\n              Monthly\n            </span>\n            <button\n              onClick={() => setIsAnnual(!isAnnual)}\n              className=\"relative inline-flex h-6 w-12 items-center rounded-full bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\"\n              role=\"switch\"\n              aria-checked={isAnnual}\n            >\n              <span className={`inline-block h-4 w-4 transform rounded-full bg-white shadow-lg transition-transform ${\n                isAnnual ? 'translate-x-7' : 'translate-x-1'\n              }`} />\n            </button>\n            <span className={`text-sm font-medium ${\n              isAnnual ? 'text-gray-900' : 'text-gray-500'\n            }`}>\n              Annual\n              <span className=\"ml-1 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                Save 20%\n              </span>\n            </span>\n          </div>\n        </div>\n\n        {/* Team Size Slider */}\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-4\">\n            <label className=\"text-sm font-medium text-gray-700\">\n              Team Size: <span className=\"text-2xl font-bold text-purple-600\">{teamSize}</span> users\n            </label>\n          </div>\n          <div className=\"relative\">\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"50\"\n              value={teamSize}\n              onChange={(e) => setTeamSize(parseInt(e.target.value))}\n              className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-purple-600\"\n            />\n            <div className=\"flex justify-between text-xs text-gray-500 mt-2\">\n              <span>1</span>\n              <span>10</span>\n              <span>20</span>\n              <span>30</span>\n              <span>40</span>\n              <span>50</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Pricing Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-12\">\n        {tiers.map((tier) => {\n          const monthlyPrice = calculatePrice(tier, teamSize, false);\n          const displayPrice = isAnnual ? calculatePrice(tier, teamSize, true) : monthlyPrice;\n          const period = isAnnual ? 'year' : 'month';\n          const perUserPrice = tier.pricePerUser * selectedCurrency.rate;\n          const savings = isAnnual ? calculateSavings(monthlyPrice) : 0;\n\n          return (\n            <div\n              key={tier.id}\n              className={`relative bg-white rounded-2xl shadow-lg transition-all duration-300 ${\n                tier.recommended\n                  ? 'ring-2 ring-purple-600 shadow-xl transform scale-105'\n                  : 'hover:shadow-xl'\n              }`}\n            >\n              {tier.recommended && (\n                <div className=\"absolute -top-4 left-0 right-0 flex justify-center\">\n                  <span className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white px-4 py-1 rounded-full text-sm font-semibold shadow-lg\">\n                    Recommended for teams\n                  </span>\n                </div>\n              )}\n\n              <div className=\"p-8\">\n                {/* Tier Header */}\n                <div className=\"mb-6\">\n                  <h3 className=\"text-2xl font-bold text-gray-900\">{tier.name}</h3>\n                  <p className=\"mt-2 text-gray-600\">{tier.description}</p>\n                </div>\n\n                {/* Pricing */}\n                <div className=\"mb-6\">\n                  <div className=\"flex items-baseline\">\n                    <span className=\"text-5xl font-bold text-gray-900\">\n                      {selectedCurrency.symbol}{displayPrice}\n                    </span>\n                    <span className=\"ml-2 text-gray-600\">/{period}</span>\n                  </div>\n                  <p className=\"mt-2 text-sm text-gray-600\">\n                    {selectedCurrency.symbol}{perUserPrice.toFixed(2)} per additional user\n                  </p>\n                  {isAnnual && savings > 0 && (\n                    <p className=\"mt-1 text-sm font-medium text-green-600\">\n                      Save {selectedCurrency.symbol}{savings} per year\n                    </p>\n                  )}\n                </div>\n\n                {/* Features */}\n                <ul className=\"space-y-3 mb-8\">\n                  {tier.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      {feature.included ? (\n                        <svg className=\"h-5 w-5 text-green-500 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                        </svg>\n                      ) : (\n                        <svg className=\"h-5 w-5 text-gray-300 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                        </svg>\n                      )}\n                      <span className={`ml-3 text-sm ${\n                        feature.included ? 'text-gray-700' : 'text-gray-400'\n                      }`}>\n                        {feature.name}\n                        {feature.tooltip && feature.included && (\n                          <Tooltip text={feature.tooltip}>\n                            <button className=\"ml-1 text-gray-400 hover:text-gray-600\">\n                              <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clipRule=\"evenodd\" />\n                              </svg>\n                            </button>\n                          </Tooltip>\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ul>\n\n                {/* CTA Button */}\n                <button\n                  onClick={() => onSelectPlan?.(tier.id, teamSize, selectedCurrency.code)}\n                  className={`w-full py-3 px-6 rounded-lg font-semibold transition-all duration-200 ${\n                    tier.recommended\n                      ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 transform hover:scale-105'\n                      : 'bg-gray-100 text-gray-900 hover:bg-gray-200'\n                  }`}\n                >\n                  Start free trial\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* FAQ Link */}\n      <div className=\"text-center\">\n        <p className=\"text-gray-600\">\n          Have questions? Check our{' '}\n          <a href=\"#\" className=\"text-purple-600 hover:text-purple-700 font-medium\">\n            pricing FAQ\n          </a>{' '}\n          or{' '}\n          <a href=\"#\" className=\"text-purple-600 hover:text-purple-700 font-medium\">\n            contact sales\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n};\n\n// Example usage:\nexport const SaaSPricingExample = () => {\n  const tiers: PricingTier[] = [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'Perfect for small teams getting started',\n      basePrice: 29,\n      pricePerUser: 5,\n      features: [\n        { name: 'Up to 10 users', included: true },\n        { name: 'Basic analytics', included: true },\n        { name: 'Email support', included: true },\n        { name: 'API access', included: false },\n        { name: 'Advanced integrations', included: false },\n        { name: 'Priority support', included: false }\n      ]\n    },\n    {\n      id: 'professional',\n      name: 'Professional',\n      description: 'For growing teams that need more power',\n      basePrice: 79,\n      pricePerUser: 10,\n      recommended: true,\n      features: [\n        { name: 'Unlimited users', included: true },\n        { name: 'Advanced analytics', included: true, tooltip: 'Includes custom dashboards and reporting' },\n        { name: 'Priority email & chat support', included: true },\n        { name: 'API access', included: true, tooltip: 'Full REST API with 100k calls/month' },\n        { name: 'Advanced integrations', included: true, tooltip: 'Connect with 50+ tools' },\n        { name: 'Custom workflows', included: true }\n      ]\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise',\n      description: 'Advanced features for large organizations',\n      basePrice: 199,\n      pricePerUser: 15,\n      features: [\n        { name: 'Unlimited everything', included: true },\n        { name: 'Custom analytics & ML insights', included: true },\n        { name: 'Dedicated account manager', included: true },\n        { name: 'Unlimited API access', included: true },\n        { name: 'Custom integrations', included: true, tooltip: 'We\\'ll build custom integrations for your tools' },\n        { name: 'SLA & security compliance', included: true, tooltip: 'SOC 2, GDPR, HIPAA compliant' }\n      ]\n    }\n  ];\n\n  const currencies: Currency[] = [\n    { code: 'USD', symbol: '$', rate: 1 },\n    { code: 'EUR', symbol: '€', rate: 0.85 },\n    { code: 'GBP', symbol: '£', rate: 0.73 },\n    { code: 'JPY', symbol: '¥', rate: 110 }\n  ];\n\n  return (\n    <SaaSPricing\n      tiers={tiers}\n      currencies={currencies}\n      onSelectPlan={(tierId, users, currency) => {\n        console.log(`Selected: ${tierId} for ${users} users in ${currency}`);\n      }}\n    />\n  );\n};", "metadata": {"componentType": "pricing", "framework": "React", "complexity": "complex", "tags": ["pricing", "saas", "team-size", "currency", "tooltips", "slider"]}}
{"prompt": "Build a startup-friendly pricing component with a free tier, usage-based pricing visualization, and testimonial integration", "completion": "import React, { useState } from 'react';\n\ninterface UsageTier {\n  limit: number;\n  pricePerUnit: number;\n}\n\ninterface PricingPlan {\n  id: string;\n  name: string;\n  basePrice: number;\n  description: string;\n  features: string[];\n  usageMetric?: {\n    name: string;\n    unit: string;\n    included: number;\n    tiers: UsageTier[];\n  };\n  badge?: string;\n  testimonial?: {\n    quote: string;\n    author: string;\n    role: string;\n    company: string;\n    avatar?: string;\n  };\n}\n\ninterface StartupPricingProps {\n  plans: PricingPlan[];\n  onSelectPlan?: (planId: string) => void;\n}\n\nexport const StartupPricing: React.FC<StartupPricingProps> = ({ plans, onSelectPlan }) => {\n  const [selectedPlanId, setSelectedPlanId] = useState<string>(plans[1]?.id || plans[0].id);\n  const [estimatedUsage, setEstimatedUsage] = useState(1000);\n\n  const calculateUsagePrice = (plan: PricingPlan, usage: number): number => {\n    if (!plan.usageMetric) return 0;\n    \n    const { included, tiers } = plan.usageMetric;\n    if (usage <= included) return 0;\n    \n    let remainingUsage = usage - included;\n    let additionalCost = 0;\n    \n    for (const tier of tiers) {\n      if (remainingUsage <= 0) break;\n      \n      const tierUsage = Math.min(remainingUsage, tier.limit);\n      additionalCost += tierUsage * tier.pricePerUnit;\n      remainingUsage -= tierUsage;\n    }\n    \n    return additionalCost;\n  };\n\n  const selectedPlan = plans.find(p => p.id === selectedPlanId);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-white to-gray-50 py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-5xl font-bold text-gray-900 mb-4\">\n            Simple, transparent pricing\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n            Start free and scale as you grow. No hidden fees, no surprises.\n          </p>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n          {plans.map((plan, index) => (\n            <div\n              key={plan.id}\n              className={`relative bg-white rounded-2xl transition-all duration-300 ${\n                selectedPlanId === plan.id\n                  ? 'shadow-2xl ring-2 ring-blue-500 transform scale-105'\n                  : 'shadow-lg hover:shadow-xl'\n              }`}\n            >\n              {/* Badge */}\n              {plan.badge && (\n                <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                  <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-1 rounded-full text-sm font-semibold\">\n                    {plan.badge}\n                  </span>\n                </div>\n              )}\n\n              <div className=\"p-8\">\n                {/* Plan Header */}\n                <div className=\"mb-6\">\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-600\">{plan.description}</p>\n                </div>\n\n                {/* Pricing */}\n                <div className=\"mb-6\">\n                  <div className=\"flex items-baseline\">\n                    <span className=\"text-5xl font-bold text-gray-900\">\n                      ${plan.basePrice}\n                    </span>\n                    <span className=\"ml-2 text-gray-600\">/month</span>\n                  </div>\n                  {plan.usageMetric && (\n                    <p className=\"mt-2 text-sm text-gray-600\">\n                      Includes {plan.usageMetric.included.toLocaleString()} {plan.usageMetric.unit}\n                    </p>\n                  )}\n                </div>\n\n                {/* Features */}\n                <ul className=\"space-y-3 mb-8\">\n                  {plan.features.map((feature, featureIndex) => (\n                    <li key={featureIndex} className=\"flex items-start\">\n                      <svg\n                        className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\"\n                        fill=\"currentColor\"\n                        viewBox=\"0 0 20 20\"\n                      >\n                        <path\n                          fillRule=\"evenodd\"\n                          d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                          clipRule=\"evenodd\"\n                        />\n                      </svg>\n                      <span className=\"ml-3 text-gray-700\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n\n                {/* CTA Button */}\n                <button\n                  onClick={() => {\n                    setSelectedPlanId(plan.id);\n                    onSelectPlan?.(plan.id);\n                  }}\n                  className={`w-full py-3 px-6 rounded-lg font-semibold transition-all duration-200 ${\n                    plan.basePrice === 0\n                      ? 'bg-gray-900 text-white hover:bg-gray-800'\n                      : selectedPlanId === plan.id\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:shadow-lg transform hover:scale-105'\n                      : 'bg-gray-100 text-gray-900 hover:bg-gray-200'\n                  }`}\n                >\n                  {plan.basePrice === 0 ? 'Start for free' : 'Get started'}\n                </button>\n\n                {/* Testimonial */}\n                {plan.testimonial && (\n                  <div className=\"mt-6 pt-6 border-t border-gray-100\">\n                    <blockquote className=\"text-sm text-gray-600 italic\">\n                      \"{plan.testimonial.quote}\"\n                    </blockquote>\n                    <div className=\"mt-3 flex items-center\">\n                      {plan.testimonial.avatar ? (\n                        <img\n                          src={plan.testimonial.avatar}\n                          alt={plan.testimonial.author}\n                          className=\"h-8 w-8 rounded-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"h-8 w-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white text-sm font-bold\">\n                          {plan.testimonial.author.charAt(0)}\n                        </div>\n                      )}\n                      <div className=\"ml-3\">\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {plan.testimonial.author}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {plan.testimonial.role}, {plan.testimonial.company}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Usage Calculator */}\n        {selectedPlan?.usageMetric && (\n          <div className=\"bg-white rounded-2xl shadow-lg p-8 mb-16\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">\n              Estimate your monthly cost\n            </h3>\n            \n            <div className=\"grid md:grid-cols-2 gap-8\">\n              {/* Slider */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-4\">\n                  Estimated {selectedPlan.usageMetric.name}: \n                  <span className=\"text-2xl font-bold text-blue-600 ml-2\">\n                    {estimatedUsage.toLocaleString()}\n                  </span>\n                  <span className=\"text-gray-600 ml-1\">{selectedPlan.usageMetric.unit}</span>\n                </label>\n                \n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"10000\"\n                  step=\"100\"\n                  value={estimatedUsage}\n                  onChange={(e) => setEstimatedUsage(parseInt(e.target.value))}\n                  className=\"w-full h-3 bg-gray-200 rounded-lg appearance-none cursor-pointer slider\"\n                  style={{\n                    background: `linear-gradient(to right, #3B82F6 0%, #3B82F6 ${estimatedUsage / 100}%, #E5E7EB ${estimatedUsage / 100}%, #E5E7EB 100%)`\n                  }}\n                />\n                \n                <div className=\"flex justify-between text-xs text-gray-500 mt-2\">\n                  <span>0</span>\n                  <span>2,500</span>\n                  <span>5,000</span>\n                  <span>7,500</span>\n                  <span>10,000</span>\n                </div>\n              </div>\n              \n              {/* Cost Breakdown */}\n              <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6\">\n                <h4 className=\"font-semibold text-gray-900 mb-4\">Monthly cost breakdown</h4>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Base plan</span>\n                    <span className=\"font-medium\">${selectedPlan.basePrice}</span>\n                  </div>\n                  \n                  {estimatedUsage > selectedPlan.usageMetric.included && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">\n                        Additional {selectedPlan.usageMetric.unit} \n                        <span className=\"text-sm text-gray-500 ml-1\">\n                          ({(estimatedUsage - selectedPlan.usageMetric.included).toLocaleString()})\n                        </span>\n                      </span>\n                      <span className=\"font-medium\">\n                        ${calculateUsagePrice(selectedPlan, estimatedUsage).toFixed(2)}\n                      </span>\n                    </div>\n                  )}\n                  \n                  <div className=\"pt-3 border-t border-gray-200\">\n                    <div className=\"flex justify-between text-lg font-bold\">\n                      <span>Total estimate</span>\n                      <span className=\"text-blue-600\">\n                        ${(selectedPlan.basePrice + calculateUsagePrice(selectedPlan, estimatedUsage)).toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Trust Badges */}\n        <div className=\"text-center\">\n          <p className=\"text-sm text-gray-600 mb-8\">\n            Trusted by over 10,000 startups worldwide\n          </p>\n          \n          <div className=\"flex flex-wrap justify-center items-center gap-8 mb-8\">\n            {['Startup Inc', 'TechCo', 'Growth Labs', 'Scale Fast', 'Innovate Now'].map((company) => (\n              <div key={company} className=\"text-gray-400 font-semibold text-lg\">\n                {company}\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"flex justify-center gap-6 text-sm text-gray-600\">\n            <span className=\"flex items-center\">\n              <svg className=\"h-5 w-5 text-green-500 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              No credit card required\n            </span>\n            <span className=\"flex items-center\">\n              <svg className=\"h-5 w-5 text-green-500 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              14-day free trial\n            </span>\n            <span className=\"flex items-center\">\n              <svg className=\"h-5 w-5 text-green-500 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              Cancel anytime\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Example usage:\nexport const StartupPricingExample = () => {\n  const plans: PricingPlan[] = [\n    {\n      id: 'free',\n      name: 'Free',\n      basePrice: 0,\n      description: 'Perfect for trying out our service',\n      features: [\n        'Up to 3 projects',\n        '1,000 API calls/month',\n        'Community support',\n        'Basic analytics'\n      ],\n      usageMetric: {\n        name: 'API calls',\n        unit: 'calls',\n        included: 1000,\n        tiers: [\n          { limit: 1000, pricePerUnit: 0.01 },\n          { limit: 9000, pricePerUnit: 0.008 },\n          { limit: Infinity, pricePerUnit: 0.005 }\n        ]\n      },\n      testimonial: {\n        quote: \"Started with free, now we're on Pro. Best decision ever!\",\n        author: \"Sarah Chen\",\n        role: \"Founder\",\n        company: \"StartupXYZ\"\n      }\n    },\n    {\n      id: 'pro',\n      name: 'Pro',\n      basePrice: 29,\n      description: 'For growing startups and teams',\n      features: [\n        'Unlimited projects',\n        '10,000 API calls/month included',\n        'Priority support',\n        'Advanced analytics',\n        'Team collaboration',\n        'Custom integrations'\n      ],\n      badge: 'Most popular',\n      usageMetric: {\n        name: 'API calls',\n        unit: 'calls',\n        included: 10000,\n        tiers: [\n          { limit: 10000, pricePerUnit: 0.008 },\n          { limit: 40000, pricePerUnit: 0.006 },\n          { limit: Infinity, pricePerUnit: 0.004 }\n        ]\n      },\n      testimonial: {\n        quote: \"The usage-based pricing scales perfectly with our growth.\",\n        author: \"Mike Johnson\",\n        role: \"CTO\",\n        company: \"TechStartup\"\n      }\n    },\n    {\n      id: 'scale',\n      name: 'Scale',\n      basePrice: 99,\n      description: 'For established businesses',\n      features: [\n        'Everything in Pro',\n        '50,000 API calls/month included',\n        'Dedicated support',\n        'Custom analytics',\n        'SLA guarantee',\n        'White-label options',\n        'Advanced security'\n      ],\n      usageMetric: {\n        name: 'API calls',\n        unit: 'calls',\n        included: 50000,\n        tiers: [\n          { limit: 50000, pricePerUnit: 0.004 },\n          { limit: Infinity, pricePerUnit: 0.002 }\n        ]\n      },\n      testimonial: {\n        quote: \"Enterprise features at startup-friendly prices.\",\n        author: \"Lisa Wang\",\n        role: \"VP Engineering\",\n        company: \"ScaleUp Inc\"\n      }\n    }\n  ];\n\n  return (\n    <StartupPricing\n      plans={plans}\n      onSelectPlan={(planId) => console.log(`Selected plan: ${planId}`)}\n    />\n  );\n};", "metadata": {"componentType": "pricing", "framework": "React", "complexity": "complex", "tags": ["pricing", "startup", "usage-based", "testimonial", "free-tier", "calculator"]}}