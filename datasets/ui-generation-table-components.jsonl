{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible table and data display components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, sorting, filtering, pagination, and modern design patterns."}, {"role": "user", "content": "Create a modern data table with sorting, filtering, pagination, row selection, and bulk actions. Include search and column visibility toggle."}, {"role": "assistant", "content": "```tsx\nimport React, { useState, useMemo } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { ChevronUp, ChevronDown, Search, Filter, Download, Trash2, Edit, MoreHorizontal, ChevronLeft, ChevronRight, Eye, EyeOff, Check, X } from 'lucide-react'\n\ninterface User {\n  id: string\n  name: string\n  email: string\n  role: string\n  department: string\n  status: 'active' | 'inactive' | 'pending'\n  joinDate: string\n  lastActive: string\n}\n\ninterface Column {\n  key: keyof User\n  label: string\n  sortable?: boolean\n  width?: string\n}\n\nconst mockData: User[] = [\n  { id: '1', name: 'Sarah Johnson', email: 'sarah.j@company.com', role: 'Product Manager', department: 'Product', status: 'active', joinDate: '2023-01-15', lastActive: '2024-03-20' },\n  { id: '2', name: 'Michael Chen', email: 'michael.c@company.com', role: 'Senior Developer', department: 'Engineering', status: 'active', joinDate: '2022-08-22', lastActive: '2024-03-20' },\n  { id: '3', name: 'Emma Wilson', email: 'emma.w@company.com', role: 'UX Designer', department: 'Design', status: 'active', joinDate: '2023-03-10', lastActive: '2024-03-19' },\n  { id: '4', name: 'James Brown', email: 'james.b@company.com', role: 'Data Analyst', department: 'Analytics', status: 'inactive', joinDate: '2022-11-05', lastActive: '2024-02-28' },\n  { id: '5', name: 'Lisa Davis', email: 'lisa.d@company.com', role: 'Marketing Lead', department: 'Marketing', status: 'active', joinDate: '2023-06-18', lastActive: '2024-03-20' },\n  { id: '6', name: 'Robert Taylor', email: 'robert.t@company.com', role: 'DevOps Engineer', department: 'Engineering', status: 'pending', joinDate: '2024-01-02', lastActive: '2024-03-18' },\n  { id: '7', name: 'Maria Garcia', email: 'maria.g@company.com', role: 'HR Manager', department: 'Human Resources', status: 'active', joinDate: '2022-04-12', lastActive: '2024-03-20' },\n  { id: '8', name: 'David Lee', email: 'david.l@company.com', role: 'QA Engineer', department: 'Engineering', status: 'active', joinDate: '2023-09-25', lastActive: '2024-03-20' },\n  { id: '9', name: 'Sophie Martin', email: 'sophie.m@company.com', role: 'Content Writer', department: 'Marketing', status: 'active', joinDate: '2023-12-01', lastActive: '2024-03-19' },\n  { id: '10', name: 'Tom Anderson', email: 'tom.a@company.com', role: 'Sales Manager', department: 'Sales', status: 'inactive', joinDate: '2022-07-08', lastActive: '2024-01-15' }\n]\n\nconst columns: Column[] = [\n  { key: 'name', label: 'Name', sortable: true },\n  { key: 'email', label: 'Email', sortable: true },\n  { key: 'role', label: 'Role', sortable: true },\n  { key: 'department', label: 'Department', sortable: true },\n  { key: 'status', label: 'Status', sortable: true },\n  { key: 'joinDate', label: 'Join Date', sortable: true },\n  { key: 'lastActive', label: 'Last Active', sortable: true }\n]\n\nexport function DataTable() {\n  const [data] = useState(mockData)\n  const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set())\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortConfig, setSortConfig] = useState<{ key: keyof User; direction: 'asc' | 'desc' } | null>(null)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage, setItemsPerPage] = useState(5)\n  const [visibleColumns, setVisibleColumns] = useState<Set<keyof User>>(new Set(columns.map(col => col.key)))\n  const [filterStatus, setFilterStatus] = useState<string>('all')\n  const [showColumnMenu, setShowColumnMenu] = useState(false)\n  const [showFilterMenu, setShowFilterMenu] = useState(false)\n\n  // Filter and sort data\n  const processedData = useMemo(() => {\n    let filtered = data\n\n    // Search filter\n    if (searchQuery) {\n      filtered = filtered.filter(item =>\n        Object.values(item).some(value =>\n          value.toString().toLowerCase().includes(searchQuery.toLowerCase())\n        )\n      )\n    }\n\n    // Status filter\n    if (filterStatus !== 'all') {\n      filtered = filtered.filter(item => item.status === filterStatus)\n    }\n\n    // Sort\n    if (sortConfig) {\n      filtered = [...filtered].sort((a, b) => {\n        const aValue = a[sortConfig.key]\n        const bValue = b[sortConfig.key]\n        \n        if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1\n        if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1\n        return 0\n      })\n    }\n\n    return filtered\n  }, [data, searchQuery, sortConfig, filterStatus])\n\n  // Pagination\n  const totalPages = Math.ceil(processedData.length / itemsPerPage)\n  const startIndex = (currentPage - 1) * itemsPerPage\n  const paginatedData = processedData.slice(startIndex, startIndex + itemsPerPage)\n\n  const handleSort = (key: keyof User) => {\n    setSortConfig(current => {\n      if (!current || current.key !== key) {\n        return { key, direction: 'asc' }\n      }\n      if (current.direction === 'asc') {\n        return { key, direction: 'desc' }\n      }\n      return null\n    })\n  }\n\n  const handleSelectAll = () => {\n    if (selectedRows.size === paginatedData.length) {\n      setSelectedRows(new Set())\n    } else {\n      setSelectedRows(new Set(paginatedData.map(item => item.id)))\n    }\n  }\n\n  const handleSelectRow = (id: string) => {\n    const newSelected = new Set(selectedRows)\n    if (newSelected.has(id)) {\n      newSelected.delete(id)\n    } else {\n      newSelected.add(id)\n    }\n    setSelectedRows(newSelected)\n  }\n\n  const toggleColumn = (key: keyof User) => {\n    const newVisible = new Set(visibleColumns)\n    if (newVisible.has(key)) {\n      newVisible.delete(key)\n    } else {\n      newVisible.add(key)\n    }\n    setVisibleColumns(newVisible)\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800 border-green-200'\n      case 'inactive': return 'bg-red-100 text-red-800 border-red-200'\n      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200'\n      default: return 'bg-gray-100 text-gray-800 border-gray-200'\n    }\n  }\n\n  return (\n    <div className=\"w-full bg-white rounded-2xl shadow-lg border border-gray-200\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Team Members</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">{processedData.length} total users</p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search users...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-64\"\n              />\n            </div>\n\n            {/* Filter */}\n            <div className=\"relative\">\n              <button\n                onClick={() => setShowFilterMenu(!showFilterMenu)}\n                className=\"p-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\n              >\n                <Filter className=\"w-5 h-5 text-gray-600\" />\n              </button>\n              \n              <AnimatePresence>\n                {showFilterMenu && (\n                  <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-10\"\n                  >\n                    <div className=\"p-2\">\n                      <p className=\"text-sm font-medium text-gray-700 px-3 py-2\">Filter by Status</p>\n                      {['all', 'active', 'inactive', 'pending'].map((status) => (\n                        <button\n                          key={status}\n                          onClick={() => {\n                            setFilterStatus(status)\n                            setShowFilterMenu(false)\n                          }}\n                          className={`w-full text-left px-3 py-2 text-sm rounded hover:bg-gray-100 transition-colors ${\n                            filterStatus === status ? 'bg-gray-100 font-medium' : ''\n                          }`}\n                        >\n                          {status.charAt(0).toUpperCase() + status.slice(1)}\n                        </button>\n                      ))}\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n\n            {/* Column Visibility */}\n            <div className=\"relative\">\n              <button\n                onClick={() => setShowColumnMenu(!showColumnMenu)}\n                className=\"p-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\n              >\n                <Eye className=\"w-5 h-5 text-gray-600\" />\n              </button>\n              \n              <AnimatePresence>\n                {showColumnMenu && (\n                  <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    className=\"absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 z-10\"\n                  >\n                    <div className=\"p-2\">\n                      <p className=\"text-sm font-medium text-gray-700 px-3 py-2\">Toggle Columns</p>\n                      {columns.map((column) => (\n                        <label\n                          key={column.key}\n                          className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-50 rounded cursor-pointer\"\n                        >\n                          <input\n                            type=\"checkbox\"\n                            checked={visibleColumns.has(column.key)}\n                            onChange={() => toggleColumn(column.key)}\n                            className=\"rounded text-blue-600\"\n                          />\n                          <span className=\"text-sm\">{column.label}</span>\n                        </label>\n                      ))}\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n\n            {/* Export */}\n            <button className=\"p-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\">\n              <Download className=\"w-5 h-5 text-gray-600\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Bulk Actions */}\n        <AnimatePresence>\n          {selectedRows.size > 0 && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"mt-4 flex items-center gap-3\"\n            >\n              <span className=\"text-sm text-gray-600\">\n                {selectedRows.size} item{selectedRows.size > 1 ? 's' : ''} selected\n              </span>\n              <button className=\"px-3 py-1.5 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\">\n                <Edit className=\"w-4 h-4\" />\n                Edit\n              </button>\n              <button className=\"px-3 py-1.5 text-sm bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center gap-2\">\n                <Trash2 className=\"w-4 h-4\" />\n                Delete\n              </button>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"border-b border-gray-200\">\n              <th className=\"text-left p-4\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedRows.size === paginatedData.length && paginatedData.length > 0}\n                  onChange={handleSelectAll}\n                  className=\"rounded text-blue-600\"\n                />\n              </th>\n              {columns.filter(col => visibleColumns.has(col.key)).map((column) => (\n                <th\n                  key={column.key}\n                  className=\"text-left p-4 font-medium text-gray-900\"\n                  style={{ width: column.width }}\n                >\n                  {column.sortable ? (\n                    <button\n                      onClick={() => handleSort(column.key)}\n                      className=\"flex items-center gap-1 hover:text-gray-700 transition-colors\"\n                    >\n                      {column.label}\n                      <div className=\"flex flex-col\">\n                        <ChevronUp\n                          className={`w-3 h-3 -mb-1 ${\n                            sortConfig?.key === column.key && sortConfig.direction === 'asc'\n                              ? 'text-blue-600'\n                              : 'text-gray-400'\n                          }`}\n                        />\n                        <ChevronDown\n                          className={`w-3 h-3 ${\n                            sortConfig?.key === column.key && sortConfig.direction === 'desc'\n                              ? 'text-blue-600'\n                              : 'text-gray-400'\n                          }`}\n                        />\n                      </div>\n                    </button>\n                  ) : (\n                    column.label\n                  )}\n                </th>\n              ))}\n              <th className=\"text-left p-4 font-medium text-gray-900\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <AnimatePresence>\n              {paginatedData.map((row, index) => (\n                <motion.tr\n                  key={row.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ delay: index * 0.05 }}\n                  className=\"border-b border-gray-100 hover:bg-gray-50 transition-colors\"\n                >\n                  <td className=\"p-4\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedRows.has(row.id)}\n                      onChange={() => handleSelectRow(row.id)}\n                      className=\"rounded text-blue-600\"\n                    />\n                  </td>\n                  {columns.filter(col => visibleColumns.has(col.key)).map((column) => (\n                    <td key={column.key} className=\"p-4\">\n                      {column.key === 'status' ? (\n                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(row[column.key])}`}>\n                          {row[column.key]}\n                        </span>\n                      ) : column.key === 'name' ? (\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-medium text-sm\">\n                            {row.name.split(' ').map(n => n[0]).join('')}\n                          </div>\n                          <span className=\"font-medium text-gray-900\">{row[column.key]}</span>\n                        </div>\n                      ) : column.key === 'joinDate' || column.key === 'lastActive' ? (\n                        <span className=\"text-gray-600\">\n                          {new Date(row[column.key]).toLocaleDateString('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                          })}\n                        </span>\n                      ) : (\n                        <span className=\"text-gray-600\">{row[column.key]}</span>\n                      )}\n                    </td>\n                  ))}\n                  <td className=\"p-4\">\n                    <button className=\"p-1.5 hover:bg-gray-100 rounded-lg transition-colors\">\n                      <MoreHorizontal className=\"w-5 h-5 text-gray-600\" />\n                    </button>\n                  </td>\n                </motion.tr>\n              ))}\n            </AnimatePresence>\n          </tbody>\n        </table>\n      </div>\n\n      {/* Pagination */}\n      <div className=\"p-4 border-t border-gray-200 flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-gray-600\">Rows per page:</span>\n          <select\n            value={itemsPerPage}\n            onChange={(e) => {\n              setItemsPerPage(Number(e.target.value))\n              setCurrentPage(1)\n            }}\n            className=\"px-3 py-1 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value={5}>5</option>\n            <option value={10}>10</option>\n            <option value={20}>20</option>\n            <option value={50}>50</option>\n          </select>\n        </div>\n\n        <div className=\"flex items-center gap-4\">\n          <span className=\"text-sm text-gray-600\">\n            {startIndex + 1}-{Math.min(startIndex + itemsPerPage, processedData.length)} of {processedData.length}\n          </span>\n          \n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n              disabled={currentPage === 1}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              <ChevronLeft className=\"w-5 h-5 text-gray-600\" />\n            </button>\n            \n            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n              const pageNumber = i + 1\n              return (\n                <button\n                  key={pageNumber}\n                  onClick={() => setCurrentPage(pageNumber)}\n                  className={`w-8 h-8 rounded-lg text-sm font-medium transition-colors ${\n                    currentPage === pageNumber\n                      ? 'bg-blue-600 text-white'\n                      : 'hover:bg-gray-100 text-gray-600'\n                  }`}\n                >\n                  {pageNumber}\n                </button>\n              )\n            })}\n            \n            {totalPages > 5 && (\n              <>{\n                <span className=\"text-gray-400\">...</span>\n                <button\n                  onClick={() => setCurrentPage(totalPages)}\n                  className={`w-8 h-8 rounded-lg text-sm font-medium transition-colors ${\n                    currentPage === totalPages\n                      ? 'bg-blue-600 text-white'\n                      : 'hover:bg-gray-100 text-gray-600'\n                  }`}\n                >\n                  {totalPages}\n                </button>\n              </>\n            )}\n            \n            <button\n              onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n              disabled={currentPage === totalPages}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              <ChevronRight className=\"w-5 h-5 text-gray-600\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible table and data display components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, sorting, filtering, pagination, and modern design patterns."}, {"role": "user", "content": "Build a kanban board component with drag and drop, task cards, column management, and real-time updates visualization."}, {"role": "assistant", "content": "```tsx\nimport React, { useState, useEffect } from 'react'\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { Plus, MoreVertical, Clock, MessageSquare, Paperclip, Flag, Users, Calendar, Trash2, Edit2, Check, X } from 'lucide-react'\n\ninterface Attachment {\n  id: string\n  name: string\n  size: string\n}\n\ninterface Comment {\n  id: string\n  author: string\n  text: string\n  timestamp: string\n}\n\ninterface Task {\n  id: string\n  title: string\n  description: string\n  priority: 'low' | 'medium' | 'high' | 'urgent'\n  assignees: string[]\n  dueDate?: string\n  labels: string[]\n  attachments: Attachment[]\n  comments: Comment[]\n  createdAt: string\n}\n\ninterface Column {\n  id: string\n  title: string\n  tasks: Task[]\n  color: string\n  limit?: number\n}\n\ninterface BoardState {\n  columns: Column[]\n  lastUpdate: string\n}\n\nconst initialData: BoardState = {\n  columns: [\n    {\n      id: 'backlog',\n      title: 'Backlog',\n      color: '#6B7280',\n      tasks: [\n        {\n          id: 'task-1',\n          title: 'Research user requirements for new feature',\n          description: 'Conduct user interviews and analyze feedback',\n          priority: 'medium',\n          assignees: ['JD', 'SM'],\n          labels: ['research', 'user-feedback'],\n          attachments: [{ id: 'att-1', name: 'user-survey.pdf', size: '2.5 MB' }],\n          comments: [{ id: 'com-1', author: 'John Doe', text: 'Started the survey', timestamp: '2h ago' }],\n          createdAt: '2024-03-20'\n        },\n        {\n          id: 'task-2',\n          title: 'Update documentation',\n          description: 'Update API documentation with new endpoints',\n          priority: 'low',\n          assignees: ['TC'],\n          labels: ['documentation'],\n          attachments: [],\n          comments: [],\n          createdAt: '2024-03-19'\n        }\n      ]\n    },\n    {\n      id: 'todo',\n      title: 'To Do',\n      color: '#3B82F6',\n      limit: 5,\n      tasks: [\n        {\n          id: 'task-3',\n          title: 'Implement authentication flow',\n          description: 'Add OAuth2 integration for Google and GitHub',\n          priority: 'high',\n          assignees: ['MC', 'JD'],\n          dueDate: '2024-03-25',\n          labels: ['feature', 'security'],\n          attachments: [],\n          comments: [],\n          createdAt: '2024-03-20'\n        }\n      ]\n    },\n    {\n      id: 'in-progress',\n      title: 'In Progress',\n      color: '#F59E0B',\n      limit: 3,\n      tasks: [\n        {\n          id: 'task-4',\n          title: 'Design new dashboard layout',\n          description: 'Create mockups for the analytics dashboard',\n          priority: 'urgent',\n          assignees: ['EW'],\n          dueDate: '2024-03-22',\n          labels: ['design', 'ui/ux'],\n          attachments: [{ id: 'att-2', name: 'dashboard-v1.fig', size: '15.2 MB' }],\n          comments: [{ id: 'com-2', author: 'Emma Wilson', text: '90% complete', timestamp: '30m ago' }],\n          createdAt: '2024-03-18'\n        }\n      ]\n    },\n    {\n      id: 'review',\n      title: 'Review',\n      color: '#8B5CF6',\n      tasks: [\n        {\n          id: 'task-5',\n          title: 'Code review: Payment integration',\n          description: 'Review PR #234 for payment gateway integration',\n          priority: 'high',\n          assignees: ['JD', 'TC'],\n          labels: ['code-review', 'payments'],\n          attachments: [],\n          comments: [{ id: 'com-3', author: 'Tom Chen', text: 'Found 2 issues', timestamp: '1h ago' }],\n          createdAt: '2024-03-20'\n        }\n      ]\n    },\n    {\n      id: 'done',\n      title: 'Done',\n      color: '#10B981',\n      tasks: [\n        {\n          id: 'task-6',\n          title: 'Setup CI/CD pipeline',\n          description: 'Configure GitHub Actions for automated deployment',\n          priority: 'medium',\n          assignees: ['MC'],\n          labels: ['devops', 'automation'],\n          attachments: [],\n          comments: [],\n          createdAt: '2024-03-15'\n        }\n      ]\n    }\n  ],\n  lastUpdate: new Date().toISOString()\n}\n\nconst priorityColors = {\n  low: 'bg-gray-100 text-gray-700 border-gray-300',\n  medium: 'bg-blue-100 text-blue-700 border-blue-300',\n  high: 'bg-orange-100 text-orange-700 border-orange-300',\n  urgent: 'bg-red-100 text-red-700 border-red-300'\n}\n\nconst labelColors = [\n  'bg-purple-100 text-purple-700',\n  'bg-pink-100 text-pink-700',\n  'bg-indigo-100 text-indigo-700',\n  'bg-green-100 text-green-700',\n  'bg-yellow-100 text-yellow-700'\n]\n\nexport function KanbanBoard() {\n  const [boardState, setBoardState] = useState<BoardState>(initialData)\n  const [showNewTaskModal, setShowNewTaskModal] = useState(false)\n  const [selectedColumn, setSelectedColumn] = useState<string>('')\n  const [editingColumn, setEditingColumn] = useState<string | null>(null)\n  const [newColumnTitle, setNewColumnTitle] = useState('')\n  const [showRealtimeIndicator, setShowRealtimeIndicator] = useState(false)\n\n  // Simulate real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setShowRealtimeIndicator(true)\n      setTimeout(() => setShowRealtimeIndicator(false), 2000)\n    }, 30000) // Every 30 seconds\n\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleDragEnd = (result: DropResult) => {\n    const { source, destination } = result\n\n    if (!destination) return\n\n    const sourceColIndex = boardState.columns.findIndex(col => col.id === source.droppableId)\n    const destColIndex = boardState.columns.findIndex(col => col.id === destination.droppableId)\n\n    const sourceCol = boardState.columns[sourceColIndex]\n    const destCol = boardState.columns[destColIndex]\n\n    const sourceTasks = [...sourceCol.tasks]\n    const [movedTask] = sourceTasks.splice(source.index, 1)\n\n    if (source.droppableId === destination.droppableId) {\n      // Moving within the same column\n      sourceTasks.splice(destination.index, 0, movedTask)\n      const newColumns = [...boardState.columns]\n      newColumns[sourceColIndex] = { ...sourceCol, tasks: sourceTasks }\n      setBoardState({ ...boardState, columns: newColumns, lastUpdate: new Date().toISOString() })\n    } else {\n      // Moving to different column\n      const destTasks = [...destCol.tasks]\n      destTasks.splice(destination.index, 0, movedTask)\n      \n      const newColumns = [...boardState.columns]\n      newColumns[sourceColIndex] = { ...sourceCol, tasks: sourceTasks }\n      newColumns[destColIndex] = { ...destCol, tasks: destTasks }\n      setBoardState({ ...boardState, columns: newColumns, lastUpdate: new Date().toISOString() })\n    }\n  }\n\n  const addNewTask = (columnId: string, task: Omit<Task, 'id' | 'createdAt'>) => {\n    const newTask: Task = {\n      ...task,\n      id: `task-${Date.now()}`,\n      createdAt: new Date().toISOString()\n    }\n\n    const columnIndex = boardState.columns.findIndex(col => col.id === columnId)\n    const column = boardState.columns[columnIndex]\n    const newColumns = [...boardState.columns]\n    newColumns[columnIndex] = { ...column, tasks: [...column.tasks, newTask] }\n    \n    setBoardState({ ...boardState, columns: newColumns, lastUpdate: new Date().toISOString() })\n    setShowNewTaskModal(false)\n  }\n\n  const deleteTask = (columnId: string, taskId: string) => {\n    const columnIndex = boardState.columns.findIndex(col => col.id === columnId)\n    const column = boardState.columns[columnIndex]\n    const newTasks = column.tasks.filter(task => task.id !== taskId)\n    const newColumns = [...boardState.columns]\n    newColumns[columnIndex] = { ...column, tasks: newTasks }\n    \n    setBoardState({ ...boardState, columns: newColumns, lastUpdate: new Date().toISOString() })\n  }\n\n  const updateColumnTitle = (columnId: string, newTitle: string) => {\n    const columnIndex = boardState.columns.findIndex(col => col.id === columnId)\n    const newColumns = [...boardState.columns]\n    newColumns[columnIndex] = { ...newColumns[columnIndex], title: newTitle }\n    setBoardState({ ...boardState, columns: newColumns })\n    setEditingColumn(null)\n    setNewColumnTitle('')\n  }\n\n  const addNewColumn = () => {\n    const newColumn: Column = {\n      id: `col-${Date.now()}`,\n      title: 'New Column',\n      color: '#9CA3AF',\n      tasks: []\n    }\n    setBoardState({ ...boardState, columns: [...boardState.columns, newColumn] })\n  }\n\n  const getPriorityIcon = (priority: string) => {\n    return <Flag className=\"w-3 h-3\" />\n  }\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Project Board</h1>\n            <p className=\"text-gray-600 mt-1\">Manage your tasks with drag and drop</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            {/* Real-time indicator */}\n            <AnimatePresence>\n              {showRealtimeIndicator && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.8 }}\n                  className=\"flex items-center gap-2 px-3 py-1.5 bg-green-100 text-green-700 rounded-full text-sm\"\n                >\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                  Board synced\n                </motion.div>\n              )}\n            </AnimatePresence>\n            \n            <span className=\"text-sm text-gray-500\">\n              Last updated: {new Date(boardState.lastUpdate).toLocaleTimeString()}\n            </span>\n            \n            <button\n              onClick={addNewColumn}\n              className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors flex items-center gap-2\"\n            >\n              <Plus className=\"w-5 h-5\" />\n              Add Column\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Kanban Board */}\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <div className=\"flex gap-6 overflow-x-auto pb-6\">\n          {boardState.columns.map((column) => (\n            <div key={column.id} className=\"flex-shrink-0 w-80\">\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n                {/* Column Header */}\n                <div className=\"p-4 border-b border-gray-200\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    {editingColumn === column.id ? (\n                      <div className=\"flex items-center gap-2 flex-1\">\n                        <input\n                          type=\"text\"\n                          value={newColumnTitle || column.title}\n                          onChange={(e) => setNewColumnTitle(e.target.value)}\n                          onKeyPress={(e) => {\n                            if (e.key === 'Enter') {\n                              updateColumnTitle(column.id, newColumnTitle || column.title)\n                            }\n                          }}\n                          className=\"flex-1 px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          autoFocus\n                        />\n                        <button\n                          onClick={() => updateColumnTitle(column.id, newColumnTitle || column.title)}\n                          className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                        >\n                          <Check className=\"w-4 h-4\" />\n                        </button>\n                        <button\n                          onClick={() => {\n                            setEditingColumn(null)\n                            setNewColumnTitle('')\n                          }}\n                          className=\"p-1 text-red-600 hover:bg-red-50 rounded\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: column.color }}\n                        />\n                        <h3 className=\"font-semibold text-gray-900\">{column.title}</h3>\n                        <span className=\"text-sm text-gray-500\">({column.tasks.length})</span>\n                        {column.limit && (\n                          <span className={`text-xs px-2 py-0.5 rounded-full ${\n                            column.tasks.length >= column.limit\n                              ? 'bg-red-100 text-red-700'\n                              : 'bg-gray-100 text-gray-600'\n                          }`}>\n                            Limit: {column.limit}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                    <button\n                      onClick={() => {\n                        setEditingColumn(column.id)\n                        setNewColumnTitle(column.title)\n                      }}\n                      className=\"p-1.5 hover:bg-gray-100 rounded transition-colors\"\n                    >\n                      <MoreVertical className=\"w-4 h-4 text-gray-600\" />\n                    </button>\n                  </div>\n                  <button\n                    onClick={() => {\n                      setSelectedColumn(column.id)\n                      setShowNewTaskModal(true)\n                    }}\n                    className=\"w-full py-2 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-gray-400 hover:text-gray-700 transition-colors flex items-center justify-center gap-2\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                    Add Task\n                  </button>\n                </div>\n\n                {/* Tasks */}\n                <Droppable droppableId={column.id}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      className={`p-4 min-h-[200px] transition-colors ${\n                        snapshot.isDraggingOver ? 'bg-gray-50' : ''\n                      }`}\n                    >\n                      <AnimatePresence>\n                        {column.tasks.map((task, index) => (\n                          <Draggable key={task.id} draggableId={task.id} index={index}>\n                            {(provided, snapshot) => (\n                              <motion.div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                initial={{ opacity: 0, y: 20 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                exit={{ opacity: 0, scale: 0.8 }}\n                                style={{\n                                  ...provided.draggableProps.style,\n                                  marginBottom: '0.75rem'\n                                }}\n                                className={`bg-white rounded-lg border border-gray-200 p-4 cursor-pointer transition-all ${\n                                  snapshot.isDragging\n                                    ? 'shadow-xl rotate-2 opacity-90'\n                                    : 'shadow-sm hover:shadow-md'\n                                }`}\n                              >\n                                {/* Priority Badge */}\n                                <div className=\"flex items-start justify-between mb-2\">\n                                  <span className={`inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs font-medium border ${priorityColors[task.priority]}`}>\n                                    {getPriorityIcon(task.priority)}\n                                    {task.priority}\n                                  </span>\n                                  <button\n                                    onClick={(e) => {\n                                      e.stopPropagation()\n                                      deleteTask(column.id, task.id)\n                                    }}\n                                    className=\"opacity-0 group-hover:opacity-100 p-1 hover:bg-gray-100 rounded transition-all\"\n                                  >\n                                    <Trash2 className=\"w-3 h-3 text-gray-500\" />\n                                  </button>\n                                </div>\n\n                                {/* Task Title */}\n                                <h4 className=\"font-medium text-gray-900 mb-2\">{task.title}</h4>\n                                \n                                {/* Task Description */}\n                                {task.description && (\n                                  <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                                    {task.description}\n                                  </p>\n                                )}\n\n                                {/* Labels */}\n                                {task.labels.length > 0 && (\n                                  <div className=\"flex flex-wrap gap-1 mb-3\">\n                                    {task.labels.map((label, i) => (\n                                      <span\n                                        key={label}\n                                        className={`px-2 py-0.5 rounded text-xs ${labelColors[i % labelColors.length]}`}\n                                      >\n                                        {label}\n                                      </span>\n                                    ))}\n                                  </div>\n                                )}\n\n                                {/* Task Meta */}\n                                <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                                  <div className=\"flex items-center gap-3\">\n                                    {task.dueDate && (\n                                      <div className=\"flex items-center gap-1\">\n                                        <Calendar className=\"w-3 h-3\" />\n                                        {formatDate(task.dueDate)}\n                                      </div>\n                                    )}\n                                    {task.comments.length > 0 && (\n                                      <div className=\"flex items-center gap-1\">\n                                        <MessageSquare className=\"w-3 h-3\" />\n                                        {task.comments.length}\n                                      </div>\n                                    )}\n                                    {task.attachments.length > 0 && (\n                                      <div className=\"flex items-center gap-1\">\n                                        <Paperclip className=\"w-3 h-3\" />\n                                        {task.attachments.length}\n                                      </div>\n                                    )}\n                                  </div>\n                                  \n                                  {/* Assignees */}\n                                  {task.assignees.length > 0 && (\n                                    <div className=\"flex -space-x-2\">\n                                      {task.assignees.slice(0, 3).map((assignee, i) => (\n                                        <div\n                                          key={i}\n                                          className=\"w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full border-2 border-white flex items-center justify-center text-white text-xs font-medium\"\n                                          title={assignee}\n                                        >\n                                          {assignee}\n                                        </div>\n                                      ))}\n                                      {task.assignees.length > 3 && (\n                                        <div className=\"w-6 h-6 bg-gray-200 rounded-full border-2 border-white flex items-center justify-center text-gray-600 text-xs font-medium\">\n                                          +{task.assignees.length - 3}\n                                        </div>\n                                      )}\n                                    </div>\n                                  )}\n                                </div>\n                              </motion.div>\n                            )}\n                          </Draggable>\n                        ))}\n                      </AnimatePresence>\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n            </div>\n          ))}\n        </div>\n      </DragDropContext>\n\n      {/* New Task Modal */}\n      <AnimatePresence>\n        {showNewTaskModal && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\"\n            onClick={() => setShowNewTaskModal(false)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              onClick={(e) => e.stopPropagation()}\n              className=\"bg-white rounded-xl shadow-xl p-6 w-full max-w-md\"\n            >\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Add New Task</h3>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault()\n                  const formData = new FormData(e.currentTarget)\n                  addNewTask(selectedColumn, {\n                    title: formData.get('title') as string,\n                    description: formData.get('description') as string,\n                    priority: formData.get('priority') as Task['priority'],\n                    assignees: [],\n                    labels: [],\n                    attachments: [],\n                    comments: []\n                  })\n                }}\n                className=\"space-y-4\"\n              >\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Title\n                  </label>\n                  <input\n                    name=\"title\"\n                    type=\"text\"\n                    required\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Enter task title\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Description\n                  </label>\n                  <textarea\n                    name=\"description\"\n                    rows={3}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Enter task description\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Priority\n                  </label>\n                  <select\n                    name=\"priority\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"low\">Low</option>\n                    <option value=\"medium\">Medium</option>\n                    <option value=\"high\">High</option>\n                    <option value=\"urgent\">Urgent</option>\n                  </select>\n                </div>\n                \n                <div className=\"flex gap-3 pt-4\">\n                  <button\n                    type=\"submit\"\n                    className=\"flex-1 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                  >\n                    Add Task\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowNewTaskModal(false)}\n                    className=\"flex-1 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors\"\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are an expert UI component generator specializing in creating beautiful, modern, accessible table and data display components in the style of 21st.dev. Generate complete, production-ready components with proper TypeScript types, sorting, filtering, pagination, and modern design patterns."}, {"role": "user", "content": "Create a data grid component with inline editing, cell validation, keyboard navigation, and export functionality."}, {"role": "assistant", "content": "```tsx\nimport React, { useState, useRef, useEffect, KeyboardEvent } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { Save, X, Check, AlertCircle, Download, Upload, Copy, Trash2, Plus, Edit2, FileSpreadsheet } from 'lucide-react'\n\ninterface CellData {\n  value: string | number | boolean\n  type: 'text' | 'number' | 'email' | 'date' | 'select' | 'boolean'\n  options?: string[]\n  validation?: {\n    required?: boolean\n    min?: number\n    max?: number\n    pattern?: RegExp\n    custom?: (value: any) => string | null\n  }\n}\n\ninterface RowData {\n  id: string\n  cells: Record<string, CellData>\n}\n\ninterface Column {\n  key: string\n  header: string\n  width?: number\n  type: CellData['type']\n  editable?: boolean\n  options?: string[]\n  validation?: CellData['validation']\n}\n\ninterface EditingCell {\n  rowId: string\n  columnKey: string\n  value: any\n}\n\nconst initialColumns: Column[] = [\n  { key: 'name', header: 'Name', type: 'text', editable: true, validation: { required: true } },\n  { key: 'email', header: 'Email', type: 'email', editable: true, validation: { required: true, pattern: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ } },\n  { key: 'age', header: 'Age', type: 'number', width: 100, editable: true, validation: { min: 18, max: 100 } },\n  { key: 'department', header: 'Department', type: 'select', editable: true, options: ['Engineering', 'Design', 'Marketing', 'Sales', 'HR'] },\n  { key: 'salary', header: 'Salary', type: 'number', editable: true, validation: { min: 0 } },\n  { key: 'active', header: 'Active', type: 'boolean', width: 100, editable: true },\n  { key: 'startDate', header: 'Start Date', type: 'date', editable: true }\n]\n\nconst initialRows: RowData[] = [\n  {\n    id: '1',\n    cells: {\n      name: { value: 'John Doe', type: 'text' },\n      email: { value: 'john.doe@example.com', type: 'email' },\n      age: { value: 32, type: 'number' },\n      department: { value: 'Engineering', type: 'select' },\n      salary: { value: 85000, type: 'number' },\n      active: { value: true, type: 'boolean' },\n      startDate: { value: '2022-03-15', type: 'date' }\n    }\n  },\n  {\n    id: '2',\n    cells: {\n      name: { value: 'Jane Smith', type: 'text' },\n      email: { value: 'jane.smith@example.com', type: 'email' },\n      age: { value: 28, type: 'number' },\n      department: { value: 'Design', type: 'select' },\n      salary: { value: 75000, type: 'number' },\n      active: { value: true, type: 'boolean' },\n      startDate: { value: '2023-01-10', type: 'date' }\n    }\n  },\n  {\n    id: '3',\n    cells: {\n      name: { value: 'Bob Johnson', type: 'text' },\n      email: { value: 'bob.j@example.com', type: 'email' },\n      age: { value: 45, type: 'number' },\n      department: { value: 'Sales', type: 'select' },\n      salary: { value: 92000, type: 'number' },\n      active: { value: false, type: 'boolean' },\n      startDate: { value: '2021-07-22', type: 'date' }\n    }\n  }\n]\n\nexport function DataGrid() {\n  const [columns] = useState(initialColumns)\n  const [rows, setRows] = useState(initialRows)\n  const [editingCell, setEditingCell] = useState<EditingCell | null>(null)\n  const [selectedCells, setSelectedCells] = useState<Set<string>>(new Set())\n  const [errors, setErrors] = useState<Record<string, string>>({})\n  const [focusedCell, setFocusedCell] = useState<{ rowId: string; columnKey: string } | null>(null)\n  const [copiedData, setCopiedData] = useState<any>(null)\n  const [undoStack, setUndoStack] = useState<RowData[][]>([])\n  const [redoStack, setRedoStack] = useState<RowData[][]>([])\n  \n  const gridRef = useRef<HTMLDivElement>(null)\n  const inputRefs = useRef<Record<string, HTMLInputElement | HTMLSelectElement>>({})\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: globalThis.KeyboardEvent) => {\n      if (!focusedCell) return\n\n      const { rowId, columnKey } = focusedCell\n      const rowIndex = rows.findIndex(r => r.id === rowId)\n      const colIndex = columns.findIndex(c => c.key === columnKey)\n\n      switch (e.key) {\n        case 'ArrowUp':\n          e.preventDefault()\n          if (rowIndex > 0) {\n            setFocusedCell({ rowId: rows[rowIndex - 1].id, columnKey })\n          }\n          break\n        case 'ArrowDown':\n          e.preventDefault()\n          if (rowIndex < rows.length - 1) {\n            setFocusedCell({ rowId: rows[rowIndex + 1].id, columnKey })\n          }\n          break\n        case 'ArrowLeft':\n          e.preventDefault()\n          if (colIndex > 0) {\n            setFocusedCell({ rowId, columnKey: columns[colIndex - 1].key })\n          }\n          break\n        case 'ArrowRight':\n          e.preventDefault()\n          if (colIndex < columns.length - 1) {\n            setFocusedCell({ rowId, columnKey: columns[colIndex + 1].key })\n          }\n          break\n        case 'Enter':\n          e.preventDefault()\n          if (!editingCell && columns[colIndex].editable) {\n            startEditing(rowId, columnKey)\n          }\n          break\n        case 'Escape':\n          if (editingCell) {\n            cancelEditing()\n          }\n          break\n        case 'Delete':\n        case 'Backspace':\n          if (!editingCell && columns[colIndex].editable) {\n            updateCell(rowId, columnKey, '')\n          }\n          break\n      }\n\n      // Copy/Paste shortcuts\n      if (e.ctrlKey || e.metaKey) {\n        switch (e.key) {\n          case 'c':\n            e.preventDefault()\n            copyCell()\n            break\n          case 'v':\n            e.preventDefault()\n            pasteCell()\n            break\n          case 'z':\n            e.preventDefault()\n            undo()\n            break\n          case 'y':\n            e.preventDefault()\n            redo()\n            break\n        }\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [focusedCell, editingCell, rows, columns])\n\n  const validateCell = (value: any, column: Column): string | null => {\n    const validation = column.validation\n    if (!validation) return null\n\n    if (validation.required && !value) {\n      return 'This field is required'\n    }\n\n    if (column.type === 'number') {\n      const numValue = Number(value)\n      if (validation.min !== undefined && numValue < validation.min) {\n        return `Value must be at least ${validation.min}`\n      }\n      if (validation.max !== undefined && numValue > validation.max) {\n        return `Value must be at most ${validation.max}`\n      }\n    }\n\n    if (column.type === 'email' && validation.pattern) {\n      if (!validation.pattern.test(value)) {\n        return 'Invalid email format'\n      }\n    }\n\n    if (validation.custom) {\n      return validation.custom(value)\n    }\n\n    return null\n  }\n\n  const startEditing = (rowId: string, columnKey: string) => {\n    const row = rows.find(r => r.id === rowId)\n    if (!row) return\n\n    setEditingCell({\n      rowId,\n      columnKey,\n      value: row.cells[columnKey]?.value || ''\n    })\n\n    // Focus input after render\n    setTimeout(() => {\n      const input = inputRefs.current[`${rowId}-${columnKey}`]\n      if (input) {\n        input.focus()\n        if ('select' in input) {\n          input.select()\n        }\n      }\n    }, 0)\n  }\n\n  const saveEdit = () => {\n    if (!editingCell) return\n\n    const column = columns.find(c => c.key === editingCell.columnKey)\n    if (!column) return\n\n    const error = validateCell(editingCell.value, column)\n    if (error) {\n      setErrors({ [`${editingCell.rowId}-${editingCell.columnKey}`]: error })\n      return\n    }\n\n    updateCell(editingCell.rowId, editingCell.columnKey, editingCell.value)\n    setEditingCell(null)\n    setErrors({})\n  }\n\n  const cancelEditing = () => {\n    setEditingCell(null)\n    setErrors({})\n  }\n\n  const updateCell = (rowId: string, columnKey: string, value: any) => {\n    // Save current state for undo\n    setUndoStack([...undoStack, rows])\n    setRedoStack([])\n\n    setRows(rows.map(row => {\n      if (row.id === rowId) {\n        return {\n          ...row,\n          cells: {\n            ...row.cells,\n            [columnKey]: {\n              ...row.cells[columnKey],\n              value\n            }\n          }\n        }\n      }\n      return row\n    }))\n  }\n\n  const addRow = () => {\n    const newRow: RowData = {\n      id: `row-${Date.now()}`,\n      cells: columns.reduce((acc, col) => {\n        acc[col.key] = {\n          value: col.type === 'boolean' ? false : '',\n          type: col.type,\n          options: col.options\n        }\n        return acc\n      }, {} as Record<string, CellData>)\n    }\n\n    setUndoStack([...undoStack, rows])\n    setRedoStack([])\n    setRows([...rows, newRow])\n  }\n\n  const deleteRow = (rowId: string) => {\n    setUndoStack([...undoStack, rows])\n    setRedoStack([])\n    setRows(rows.filter(r => r.id !== rowId))\n  }\n\n  const copyCell = () => {\n    if (!focusedCell) return\n    const row = rows.find(r => r.id === focusedCell.rowId)\n    if (!row) return\n    \n    const value = row.cells[focusedCell.columnKey]?.value\n    setCopiedData(value)\n    \n    // Visual feedback\n    const cellKey = `${focusedCell.rowId}-${focusedCell.columnKey}`\n    setSelectedCells(new Set([cellKey]))\n    setTimeout(() => setSelectedCells(new Set()), 200)\n  }\n\n  const pasteCell = () => {\n    if (!focusedCell || copiedData === null) return\n    const column = columns.find(c => c.key === focusedCell.columnKey)\n    if (!column?.editable) return\n    \n    updateCell(focusedCell.rowId, focusedCell.columnKey, copiedData)\n  }\n\n  const undo = () => {\n    if (undoStack.length === 0) return\n    const previousState = undoStack[undoStack.length - 1]\n    setRedoStack([...redoStack, rows])\n    setUndoStack(undoStack.slice(0, -1))\n    setRows(previousState)\n  }\n\n  const redo = () => {\n    if (redoStack.length === 0) return\n    const nextState = redoStack[redoStack.length - 1]\n    setUndoStack([...undoStack, rows])\n    setRedoStack(redoStack.slice(0, -1))\n    setRows(nextState)\n  }\n\n  const exportToCSV = () => {\n    const headers = columns.map(col => col.header).join(',')\n    const csvRows = rows.map(row => \n      columns.map(col => {\n        const value = row.cells[col.key]?.value || ''\n        // Escape quotes and wrap in quotes if contains comma\n        const stringValue = String(value)\n        return stringValue.includes(',') ? `\"${stringValue.replace(/\"/g, '\"\"')}\"` : stringValue\n      }).join(',')\n    )\n    \n    const csv = [headers, ...csvRows].join('\\n')\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `data-export-${new Date().toISOString().split('T')[0]}.csv`\n    a.click()\n    URL.revokeObjectURL(url)\n  }\n\n  const exportToJSON = () => {\n    const jsonData = rows.map(row => {\n      const rowData: Record<string, any> = { id: row.id }\n      columns.forEach(col => {\n        rowData[col.key] = row.cells[col.key]?.value || null\n      })\n      return rowData\n    })\n    \n    const json = JSON.stringify(jsonData, null, 2)\n    const blob = new Blob([json], { type: 'application/json' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `data-export-${new Date().toISOString().split('T')[0]}.json`\n    a.click()\n    URL.revokeObjectURL(url)\n  }\n\n  const renderCell = (row: RowData, column: Column) => {\n    const cellKey = `${row.id}-${column.key}`\n    const isEditing = editingCell?.rowId === row.id && editingCell?.columnKey === column.key\n    const isFocused = focusedCell?.rowId === row.id && focusedCell?.columnKey === column.key\n    const isSelected = selectedCells.has(cellKey)\n    const hasError = errors[cellKey]\n    const cellValue = row.cells[column.key]?.value\n\n    if (isEditing) {\n      return (\n        <div className=\"relative\">\n          {column.type === 'select' ? (\n            <select\n              ref={(el) => { if (el) inputRefs.current[cellKey] = el }}\n              value={editingCell.value}\n              onChange={(e) => setEditingCell({ ...editingCell, value: e.target.value })}\n              onBlur={saveEdit}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') saveEdit()\n                if (e.key === 'Escape') cancelEditing()\n              }}\n              className=\"w-full px-2 py-1 border border-blue-500 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">Select...</option>\n              {column.options?.map(opt => (\n                <option key={opt} value={opt}>{opt}</option>\n              ))}\n            </select>\n          ) : column.type === 'boolean' ? (\n            <input\n              type=\"checkbox\"\n              checked={editingCell.value}\n              onChange={(e) => {\n                setEditingCell({ ...editingCell, value: e.target.checked })\n                updateCell(row.id, column.key, e.target.checked)\n                setEditingCell(null)\n              }}\n              className=\"w-4 h-4 text-blue-600 rounded\"\n            />\n          ) : (\n            <input\n              ref={(el) => { if (el) inputRefs.current[cellKey] = el }}\n              type={column.type === 'number' ? 'number' : column.type === 'date' ? 'date' : 'text'}\n              value={editingCell.value}\n              onChange={(e) => setEditingCell({ ...editingCell, value: e.target.value })}\n              onBlur={saveEdit}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') saveEdit()\n                if (e.key === 'Escape') cancelEditing()\n              }}\n              className=\"w-full px-2 py-1 border border-blue-500 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          )}\n          {hasError && (\n            <div className=\"absolute top-full left-0 mt-1 p-2 bg-red-50 border border-red-200 rounded text-xs text-red-600 whitespace-nowrap z-10 flex items-center gap-1\">\n              <AlertCircle className=\"w-3 h-3\" />\n              {hasError}\n            </div>\n          )}\n        </div>\n      )\n    }\n\n    return (\n      <div\n        className={`px-3 py-2 cursor-pointer transition-all ${\n          isFocused ? 'ring-2 ring-blue-500 ring-inset' : ''\n        } ${isSelected ? 'bg-blue-50' : ''} ${column.editable ? 'hover:bg-gray-50' : ''}`}\n        onClick={() => {\n          setFocusedCell({ rowId: row.id, columnKey: column.key })\n          if (column.editable) {\n            startEditing(row.id, column.key)\n          }\n        }}\n      >\n        {column.type === 'boolean' ? (\n          <input\n            type=\"checkbox\"\n            checked={cellValue || false}\n            onChange={(e) => {\n              if (column.editable) {\n                updateCell(row.id, column.key, e.target.checked)\n              }\n            }}\n            onClick={(e) => e.stopPropagation()}\n            disabled={!column.editable}\n            className=\"w-4 h-4 text-blue-600 rounded disabled:opacity-50\"\n          />\n        ) : column.type === 'number' && typeof cellValue === 'number' ? (\n          <span>{column.key === 'salary' ? `$${cellValue.toLocaleString()}` : cellValue}</span>\n        ) : (\n          <span>{cellValue || '-'}</span>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-full bg-white rounded-xl shadow-lg border border-gray-200\">\n      {/* Toolbar */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Data Grid</h2>\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span>{rows.length} rows</span>\n              <span>•</span>\n              <span>{columns.length} columns</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Undo/Redo */}\n            <button\n              onClick={undo}\n              disabled={undoStack.length === 0}\n              className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              title=\"Undo (Ctrl+Z)\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6\" />\n              </svg>\n            </button>\n            <button\n              onClick={redo}\n              disabled={redoStack.length === 0}\n              className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              title=\"Redo (Ctrl+Y)\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 10h-10a8 8 0 00-8 8v2M21 10l-6 6m6-6l-6-6\" />\n              </svg>\n            </button>\n            \n            <div className=\"w-px h-6 bg-gray-300\" />\n            \n            {/* Actions */}\n            <button\n              onClick={addRow}\n              className=\"px-3 py-1.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Add Row\n            </button>\n            \n            <div className=\"relative group\">\n              <button className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\">\n                <Download className=\"w-5 h-5\" />\n              </button>\n              <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all z-10\">\n                <button\n                  onClick={exportToCSV}\n                  className=\"w-full text-left px-4 py-2 hover:bg-gray-50 transition-colors flex items-center gap-2\"\n                >\n                  <FileSpreadsheet className=\"w-4 h-4\" />\n                  Export as CSV\n                </button>\n                <button\n                  onClick={exportToJSON}\n                  className=\"w-full text-left px-4 py-2 hover:bg-gray-50 transition-colors flex items-center gap-2\"\n                >\n                  <FileSpreadsheet className=\"w-4 h-4\" />\n                  Export as JSON\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Grid */}\n      <div ref={gridRef} className=\"overflow-auto max-h-[600px]\">\n        <table className=\"w-full\">\n          <thead className=\"sticky top-0 bg-gray-50 border-b border-gray-200\">\n            <tr>\n              <th className=\"w-12 px-4 py-3 text-left\">#</th>\n              {columns.map((column) => (\n                <th\n                  key={column.key}\n                  className=\"px-3 py-3 text-left font-medium text-gray-900\"\n                  style={{ width: column.width }}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    {column.header}\n                    {column.editable && (\n                      <Edit2 className=\"w-3 h-3 text-gray-400\" />\n                    )}\n                  </div>\n                </th>\n              ))}\n              <th className=\"w-20 px-4 py-3\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <AnimatePresence>\n              {rows.map((row, index) => (\n                <motion.tr\n                  key={row.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ delay: index * 0.05 }}\n                  className=\"border-b border-gray-100 hover:bg-gray-50 transition-colors\"\n                >\n                  <td className=\"px-4 py-2 text-sm text-gray-500\">{index + 1}</td>\n                  {columns.map((column) => (\n                    <td key={column.key} className=\"relative\">\n                      {renderCell(row, column)}\n                    </td>\n                  ))}\n                  <td className=\"px-4 py-2\">\n                    <button\n                      onClick={() => deleteRow(row.id)}\n                      className=\"p-1.5 text-red-600 hover:bg-red-50 rounded transition-colors\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </td>\n                </motion.tr>\n              ))}\n            </AnimatePresence>\n          </tbody>\n        </table>\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-gray-200 bg-gray-50\">\n        <div className=\"flex items-center justify-between text-sm text-gray-600\">\n          <div className=\"flex items-center gap-4\">\n            <span>Keyboard shortcuts:</span>\n            <kbd className=\"px-2 py-1 bg-gray-200 rounded text-xs\">↑↓←→</kbd>\n            <span>Navigate</span>\n            <kbd className=\"px-2 py-1 bg-gray-200 rounded text-xs\">Enter</kbd>\n            <span>Edit</span>\n            <kbd className=\"px-2 py-1 bg-gray-200 rounded text-xs\">Esc</kbd>\n            <span>Cancel</span>\n            <kbd className=\"px-2 py-1 bg-gray-200 rounded text-xs\">Ctrl+C/V</kbd>\n            <span>Copy/Paste</span>\n          </div>\n          {copiedData !== null && (\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"flex items-center gap-2 text-green-600\"\n            >\n              <Check className=\"w-4 h-4\" />\n              Value copied\n            </motion.div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n```"}]}