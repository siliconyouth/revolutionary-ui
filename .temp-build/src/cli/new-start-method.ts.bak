  async start() {
    printBanner()
    
    console.log(chalk.bold.cyan('\nüöÄ Welcome to Revolutionary UI v3.0!\n'))
    console.log(chalk.gray('Generate production-ready UI components with AI-powered factories.\n'))

    // Step 1: Ask for project name
    const { projectName } = await inquirer.prompt([{
      type: 'input',
      name: 'projectName',
      message: 'What would you like to name your project?',
      default: 'my-revolutionary-app',
      validate: (value: string) => {
        if (!value || value.trim().length === 0) {
          return 'Project name is required'
        }
        if (!/^[a-z0-9-_]+$/i.test(value)) {
          return 'Project name can only contain letters, numbers, hyphens, and underscores'
        }
        return true
      },
      filter: (value: string) => value.trim().toLowerCase().replace(/\s+/g, '-')
    }])

    // Step 2: Configuration wizard
    showProgress(1, 5, 'Starting configuration wizard...')
    
    // Create a minimal analysis for new projects
    const minimalAnalysis = {
      summary: {
        name: projectName,
        framework: 'React',
        language: 'TypeScript',
        packageManager: 'npm',
        hasTypeScript: true,
        hasTailwind: false,
        hasESLint: true
      },
      structure: {
        files: [],
        directories: []
      },
      dependencies: {},
      devDependencies: {},
      patterns: {},
      metrics: {
        totalFiles: 0,
        components: 0,
        dependencies: 0
      },
      git: null,
      environment: {},
      recommendations: []
    }
    
    const config = await this.configWizard.runWizard(minimalAnalysis, {})

    // Step 3: Feature selection and setup
    showProgress(2, 5, 'Setting up features...')
    const features = await this.featureManager.setupFeatures(config)

    // Step 4: Generate project
    showProgress(3, 5, 'Generating project structure...')
    
    const projectPath = await this.projectGenerator.generateProject(projectName, config)

    // Step 5: Install dependencies
    showProgress(4, 5, 'Installing dependencies...')
    
    const { installDeps } = await inquirer.prompt([{
      type: 'confirm',
      name: 'installDeps',
      message: 'Install dependencies now?',
      default: true
    }])

    if (installDeps) {
      const spinner = ora('Installing dependencies...').start()
      try {
        const { exec } = await import('child_process')
        const { promisify } = await import('util')
        const execAsync = promisify(exec)
        
        await execAsync(`${config.project.packageManager} install`, { 
          cwd: projectPath 
        })
        
        spinner.succeed('Dependencies installed successfully!')
      } catch (error) {
        spinner.fail('Failed to install dependencies')
        console.log(chalk.yellow('\nYou can install them manually by running:'))
        console.log(chalk.cyan(`  cd ${projectName}`))
        console.log(chalk.cyan(`  ${config.project.packageManager} install`))
      }
    }

    // Step 6: Final instructions
    showProgress(5, 5, 'Complete!')
    
    console.log(chalk.green('\n‚ú® Project created successfully!\n'))
    console.log(chalk.bold('üìÅ Project location:'))
    console.log(chalk.gray(`   ${projectPath}\n`))
    
    console.log(chalk.bold('üöÄ Get started with:'))
    console.log(chalk.cyan(`   cd ${projectName}`))
    if (!installDeps) {
      console.log(chalk.cyan(`   ${config.project.packageManager} install`))
    }
    console.log(chalk.cyan(`   ${config.project.packageManager} run dev\n`))
    
    console.log(chalk.bold('ü§ñ Generate components with:'))
    console.log(chalk.cyan(`   ${config.project.packageManager} run rui:generate\n`))
    
    console.log(chalk.bold('üìö Browse component catalog:'))
    console.log(chalk.cyan(`   ${config.project.packageManager} run rui:catalog\n`))
    
    console.log(chalk.gray('For more information, check the README.md in your project.\n'))
  }